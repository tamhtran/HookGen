<file_map>
    /Users/ttran/hookgen
    ├── public
    │   ├── images
    │   │   ├── og
    │   │   │   └── home.jpg
    │   │   ├── 1.jpg
    │   │   ├── 2.jpg
    │   │   ├── demo.png
    │   │   ├── l.jpg
    │   │   ├── login.png
    │   │   ├── profile.jpg
    │   │   └── z.jpg
    │   └── trademark
    │       ├── design-engineers-wordmark.svg
    │       ├── dopler-wordmark.svg
    │       ├── enroll-wordmark.svg
    │       ├── icon-dark.svg
    │       ├── icon-light.svg
    │       ├── magic-portfolio-wordmark.svg
    │       ├── type-dark.svg
    │       └── type-light.svg
    ├── src
    │   ├── app
    │   │   ├── resources
    │   │   │   └── config.js
    │   │   ├── favicon.ico
    │   │   ├── layout.tsx
    │   │   └── page.tsx
    │   └── once-ui
    │       ├── components
    │       │   ├── Accordion.module.scss
    │       │   ├── Accordion.tsx
    │       │   ├── AccordionGroup.tsx
    │       │   ├── Arrow.module.scss
    │       │   ├── Arrow.tsx
    │       │   ├── Avatar.module.scss
    │       │   ├── Avatar.tsx
    │       │   ├── AvatarGroup.module.scss
    │       │   ├── AvatarGroup.tsx
    │       │   ├── Background.module.scss
    │       │   ├── Background.tsx
    │       │   ├── Badge.module.scss
    │       │   ├── Badge.tsx
    │       │   ├── Button.module.scss
    │       │   ├── Button.tsx
    │       │   ├── Card.module.scss
    │       │   ├── Card.tsx
    │       │   ├── Carousel.tsx
    │       │   ├── Checkbox.tsx
    │       │   ├── Chip.module.scss
    │       │   ├── Chip.tsx
    │       │   ├── ColorInput.tsx
    │       │   ├── Column.tsx
    │       │   ├── CompareImage.module.scss
    │       │   ├── CompareImage.tsx
    │       │   ├── DateInput.tsx
    │       │   ├── DatePicker.module.scss
    │       │   ├── DatePicker.tsx
    │       │   ├── DateRangeInput.tsx
    │       │   ├── DateRangePicker.tsx
    │       │   ├── Dialog.module.scss
    │       │   ├── Dialog.tsx
    │       │   ├── Dropdown.tsx
    │       │   ├── DropdownWrapper.module.scss
    │       │   ├── DropdownWrapper.tsx
    │       │   ├── ElementType.tsx
    │       │   ├── Fade.module.scss
    │       │   ├── Fade.tsx
    │       │   ├── Feedback.tsx
    │       │   ├── Flex.tsx
    │       │   ├── GlitchFx.module.scss
    │       │   ├── GlitchFx.tsx
    │       │   ├── Grid.tsx
    │       │   ├── Heading.tsx
    │       │   ├── HeadingLink.module.scss
    │       │   ├── HeadingLink.tsx
    │       │   ├── HeadingNav.tsx
    │       │   ├── HoloFx.module.scss
    │       │   ├── HoloFx.tsx
    │       │   ├── Icon.module.scss
    │       │   ├── Icon.tsx
    │       │   ├── IconButton.module.scss
    │       │   ├── IconButton.tsx
    │       │   ├── index.ts
    │       │   ├── InlineCode.module.scss
    │       │   ├── InlineCode.tsx
    │       │   ├── Input.module.scss
    │       │   ├── Input.tsx
    │       │   ├── InteractiveDetails.tsx
    │       │   ├── Kbar.module.scss
    │       │   ├── Kbar.tsx
    │       │   ├── Kbd.tsx
    │       │   ├── LetterFx.tsx
    │       │   ├── Line.tsx
    │       │   ├── Logo.module.scss
    │       │   ├── Logo.tsx
    │       │   ├── LogoCloud.module.scss
    │       │   ├── LogoCloud.tsx
    │       │   ├── MegaMenu.module.scss
    │       │   ├── MegaMenu.tsx
    │       │   ├── NavIcon.module.scss
    │       │   ├── NavIcon.tsx
    │       │   ├── NumberInput.module.scss
    │       │   ├── NumberInput.tsx
    │       │   ├── Option.module.scss
    │       │   ├── Option.tsx
    │       │   ├── OTPInput.module.scss
    │       │   ├── OTPInput.tsx
    │       │   ├── PasswordInput.tsx
    │       │   ├── RadioButton.tsx
    │       │   ├── RevealFx.module.scss
    │       │   ├── RevealFx.tsx
    │       │   ├── Row.tsx
    │       │   ├── Scroller.module.scss
    │       │   ├── Scroller.tsx
    │       │   ├── ScrollToTop.module.scss
    │       │   ├── ScrollToTop.tsx
    │       │   ├── SegmentedControl.tsx
    │       │   ├── Select.tsx
    │       │   ├── SharedInteractiveStyles.module.scss
    │       │   ├── Skeleton.module.scss
    │       │   ├── Skeleton.tsx
    │       │   ├── SmartImage.tsx
    │       │   ├── SmartLink.tsx
    │       │   ├── Spinner.module.scss
    │       │   ├── Spinner.tsx
    │       │   ├── StatusIndicator.module.scss
    │       │   ├── StatusIndicator.tsx
    │       │   ├── StyleOverlay.module.scss
    │       │   ├── StyleOverlay.tsx
    │       │   ├── StylePanel.module.scss
    │       │   ├── StylePanel.tsx
    │       │   ├── Switch.module.scss
    │       │   ├── Switch.tsx
    │       │   ├── Table.tsx
    │       │   ├── Tag.module.scss
    │       │   ├── Tag.tsx
    │       │   ├── TagInput.tsx
    │       │   ├── Text.tsx
    │       │   ├── Textarea.tsx
    │       │   ├── ThemeProvider.tsx
    │       │   ├── ThemeSwitcher.tsx
    │       │   ├── TiltFx.module.scss
    │       │   ├── TiltFx.tsx
    │       │   ├── Toast.module.scss
    │       │   ├── Toast.tsx
    │       │   ├── Toaster.module.scss
    │       │   ├── Toaster.tsx
    │       │   ├── ToastProvider.tsx
    │       │   ├── ToggleButton.module.scss
    │       │   ├── ToggleButton.tsx
    │       │   ├── Tooltip.tsx
    │       │   ├── User.tsx
    │       │   ├── UserMenu.module.scss
    │       │   └── UserMenu.tsx
    │       ├── hooks
    │       │   ├── generateHeadingLinks.ts
    │       │   └── useDebounce.ts
    │       ├── modules
    │       │   ├── code
    │       │   │   ├── CodeBlock.module.scss
    │       │   │   ├── CodeBlock.tsx
    │       │   │   ├── CodeHighlight.css
    │       │   │   ├── LineNumber.css
    │       │   │   └── prismjs.d.ts
    │       │   ├── media
    │       │   │   ├── MediaUpload.module.scss
    │       │   │   └── MediaUpload.tsx
    │       │   ├── seo
    │       │   │   ├── Meta.tsx
    │       │   │   └── Schema.tsx
    │       │   └── index.ts
    │       ├── styles
    │       │   ├── background.scss
    │       │   ├── border.scss
    │       │   ├── breakpoints.scss
    │       │   ├── color.scss
    │       │   ├── display.scss
    │       │   ├── flex.scss
    │       │   ├── global.scss
    │       │   ├── grid.scss
    │       │   ├── index.scss
    │       │   ├── layout.scss
    │       │   ├── position.scss
    │       │   ├── shadow.scss
    │       │   ├── size.scss
    │       │   ├── spacing.scss
    │       │   ├── typography.scss
    │       │   └── utilities.scss
    │       ├── tokens
    │       │   ├── border.scss
    │       │   ├── function.scss
    │       │   ├── index.scss
    │       │   ├── layout.scss
    │       │   ├── scheme.scss
    │       │   ├── shadow.scss
    │       │   ├── theme.scss
    │       │   └── typography.scss
    │       ├── icons.ts
    │       ├── interfaces.ts
    │       └── types.ts
    ├── .env.example
    ├── .eslintrc.json
    ├── biome.json
    ├── hookgen-impl-plan.md
    ├── hookgen-prd.md
    ├── hookgen-tech-spec.md
    ├── LICENSE
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.js
    ├── README.md
    ├── repomix-output.txt
    └── tsconfig.json
    
    </file_map>
    
    <file_contents>
    File: /Users/ttran/hookgen/public/images/og/home.jpg
    ```jpg
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/1.jpg
    ```jpg
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/2.jpg
    ```jpg
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/demo.png
    ```png
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/l.jpg
    ```jpg
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/login.png
    ```png
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/profile.jpg
    ```jpg
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/images/z.jpg
    ```jpg
    [Binary file]
    ```
    
    File: /Users/ttran/hookgen/public/trademark/design-engineers-wordmark.svg
    ```svg
    <svg width="3922" height="589" viewBox="0 0 3922 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M232.04 471.96C210.28 471.96 191.24 466.52 174.92 455.64C158.92 444.76 146.6 429.24 137.96 409.08C129.32 388.92 125 365.4 125 338.52C125 311.64 129.32 288.12 137.96 267.96C146.6 247.8 158.92 232.28 174.92 221.4C191.24 210.52 210.28 205.08 232.04 205.08C249.64 205.08 265.16 208.76 278.6 216.12C292.36 223.48 302.76 233.72 309.8 246.84V152.4C309.8 137.488 321.888 125.4 336.8 125.4H360.68V466.2H339.646C325.128 466.2 313.209 454.72 312.665 440.212L312.2 427.8C305.16 441.56 294.44 452.44 280.04 460.44C265.96 468.12 249.96 471.96 232.04 471.96ZM245.48 427.8C258.92 427.8 270.44 424.28 280.04 417.24C289.96 410.2 297.32 400.12 302.12 387C307.24 373.56 309.8 357.4 309.8 338.52C309.8 319.64 307.24 303.48 302.12 290.04C297.32 276.6 290.12 266.52 280.52 259.8C270.92 252.76 259.24 249.24 245.48 249.24C224.68 249.24 208.2 257.24 196.04 273.24C183.88 288.92 177.8 310.68 177.8 338.52C177.8 366.04 183.88 387.8 196.04 403.8C208.52 419.8 225 427.8 245.48 427.8Z" fill="white"/>
    <path d="M528.86 471.96C504.54 471.96 483.26 466.52 465.02 455.64C446.78 444.76 432.7 429.24 422.78 409.08C412.86 388.92 407.9 365.4 407.9 338.52C407.9 311.96 412.86 288.6 422.78 268.44C432.7 247.96 446.62 232.28 464.54 221.4C482.46 210.52 503.42 205.08 527.42 205.08C550.78 205.08 571.26 210.52 588.86 221.4C606.46 231.96 620.06 247.48 629.66 267.96C639.58 288.12 644.54 312.28 644.54 340.44V353.4H461.18C462.14 377.72 468.54 396.28 480.38 409.08C492.54 421.88 508.86 428.28 529.34 428.28C544.38 428.28 556.86 424.92 566.78 418.2C571.141 415.246 574.945 411.735 578.193 407.668C585.84 398.091 596.421 389.942 608.653 390.721L640.7 392.76C633.98 417.08 620.54 436.44 600.38 450.84C580.54 464.92 556.7 471.96 528.86 471.96ZM590.3 315C588.7 292.92 582.3 276.28 571.1 265.08C560.22 253.88 545.66 248.28 527.42 248.28C509.18 248.28 494.14 254.04 482.3 265.56C470.78 277.08 463.74 293.56 461.18 315H590.3Z" fill="white"/>
    <path d="M789.114 471.96C765.754 471.96 745.594 468.44 728.634 461.4C711.994 454.04 699.034 443.96 689.754 431.16C680.794 418.04 675.674 402.84 674.394 385.56L702.929 384.263C716.725 383.636 727.871 394.224 735.278 405.879C738.035 410.216 741.42 414.003 745.434 417.24C755.674 425.24 770.234 429.24 789.114 429.24C805.434 429.24 818.074 426.68 827.034 421.56C836.314 416.12 840.954 407.96 840.954 397.08C840.954 390.68 839.354 385.4 836.154 381.24C832.954 377.08 827.034 373.56 818.394 370.68C809.754 367.48 796.954 364.44 779.994 361.56C755.034 357.08 735.194 351.64 720.474 345.24C706.074 338.52 695.834 330.36 689.754 320.76C683.674 310.84 680.634 298.68 680.634 284.28C680.634 260.6 689.594 241.56 707.514 227.16C725.434 212.44 750.554 205.08 782.874 205.08C814.234 205.08 838.874 212.92 856.794 228.6C875.034 243.96 886.074 264.12 889.914 289.08L861.283 290.656C847.734 291.402 836.583 281.258 828.908 270.068C826.249 266.191 823.064 262.768 819.354 259.8C810.074 251.8 797.754 247.8 782.394 247.8C766.394 247.8 754.234 251 745.914 257.4C737.594 263.48 733.434 271.8 733.434 282.36C733.434 290.04 735.194 296.28 738.714 301.08C742.554 305.88 748.474 309.88 756.474 313.08C764.794 315.96 776.154 318.52 790.554 320.76C817.114 325.24 837.754 330.68 852.474 337.08C867.194 343.48 877.754 351.48 884.154 361.08C890.554 370.36 893.754 382.2 893.754 396.6C893.754 420.28 883.994 438.84 864.474 452.28C845.274 465.4 820.154 471.96 789.114 471.96Z" fill="white"/>
    <path d="M932.799 237.84C932.799 222.928 944.887 210.84 959.799 210.84H983.679V439.2C983.679 454.112 971.59 466.2 956.679 466.2H932.799V237.84ZM931.839 150C931.839 135.088 943.927 123 958.839 123H985.119V146.88C985.119 161.792 973.03 173.88 958.119 173.88H931.839V150Z" fill="white"/>
    <path d="M1149.7 543.96C1129.86 543.96 1112.1 540.92 1096.42 534.84C1081.06 528.76 1068.42 520.12 1058.5 508.92C1048.58 498.04 1041.86 485.24 1038.34 470.52L1069.84 468.515C1082.33 467.721 1092.92 476.438 1101.26 485.76C1103.78 488.571 1106.64 491.011 1109.86 493.08C1119.14 498.84 1132.42 501.72 1149.7 501.72C1171.14 501.72 1187.3 497.24 1198.18 488.28C1209.38 479.32 1214.98 465.72 1214.98 447.48V410.52C1208.58 423.64 1198.66 434.04 1185.22 441.72C1172.1 449.4 1157.22 453.24 1140.58 453.24C1119.46 453.24 1100.58 448.12 1083.94 437.88C1067.3 427.32 1054.18 412.76 1044.58 394.2C1035.3 375.32 1030.66 353.72 1030.66 329.4C1030.66 305.08 1035.3 283.64 1044.58 265.08C1053.86 246.2 1066.66 231.48 1082.98 220.92C1099.3 210.36 1118.02 205.08 1139.14 205.08C1157.06 205.08 1172.9 209.24 1186.66 217.56C1200.74 225.56 1210.82 236.76 1216.9 251.16V237.84C1216.9 222.928 1228.99 210.84 1243.9 210.84H1266.34V446.04C1266.34 477.08 1255.94 501.08 1235.14 518.04C1214.34 535.32 1185.86 543.96 1149.7 543.96ZM1148.74 410.04C1162.18 410.04 1173.86 406.84 1183.78 400.44C1193.7 393.72 1201.38 384.28 1206.82 372.12C1212.58 359.96 1215.46 345.56 1215.46 328.92C1215.46 312.6 1212.74 298.36 1207.3 286.2C1202.18 274.04 1194.5 264.76 1184.26 258.36C1174.02 251.64 1162.18 248.28 1148.74 248.28C1128.58 248.28 1112.58 255.64 1100.74 270.36C1089.22 284.76 1083.46 304.28 1083.46 328.92C1083.46 353.88 1089.38 373.72 1101.22 388.44C1113.06 402.84 1128.9 410.04 1148.74 410.04Z" fill="white"/>
    <path d="M1328.44 210.84H1348.75C1363.37 210.84 1375.33 222.47 1375.74 237.08L1376.92 279L1370.68 275.64C1374.84 251.96 1384.28 234.36 1399 222.84C1414.04 211 1432.28 205.08 1453.72 205.08C1481.24 205.08 1502.52 214.04 1517.56 231.96C1532.6 249.56 1540.12 272.92 1540.12 302.04V466.2H1516.24C1501.33 466.2 1489.24 454.112 1489.24 439.2V317.4C1489.24 294.36 1485.4 277.08 1477.72 265.56C1470.04 253.72 1457.4 247.8 1439.8 247.8C1421.24 247.8 1406.52 253.88 1395.64 266.04C1384.76 278.2 1379.32 295.32 1379.32 317.4V466.2H1328.44V210.84Z" fill="white"/>
    <path d="M1815.64 471.96C1791.32 471.96 1770.04 466.52 1751.8 455.64C1733.56 444.76 1719.48 429.24 1709.56 409.08C1699.64 388.92 1694.68 365.4 1694.68 338.52C1694.68 311.96 1699.64 288.6 1709.56 268.44C1719.48 247.96 1733.4 232.28 1751.32 221.4C1769.24 210.52 1790.2 205.08 1814.2 205.08C1837.56 205.08 1858.04 210.52 1875.64 221.4C1893.24 231.96 1906.84 247.48 1916.44 267.96C1926.36 288.12 1931.32 312.28 1931.32 340.44V353.4H1747.96C1748.92 377.72 1755.32 396.28 1767.16 409.08C1779.32 421.88 1795.64 428.28 1816.12 428.28C1831.16 428.28 1843.64 424.92 1853.56 418.2C1857.92 415.246 1861.72 411.735 1864.97 407.668C1872.62 398.091 1883.2 389.942 1895.43 390.721L1927.48 392.76C1920.76 417.08 1907.32 436.44 1887.16 450.84C1867.32 464.92 1843.48 471.96 1815.64 471.96ZM1877.08 315C1875.48 292.92 1869.08 276.28 1857.88 265.08C1847 253.88 1832.44 248.28 1814.2 248.28C1795.96 248.28 1780.92 254.04 1769.08 265.56C1757.56 277.08 1750.52 293.56 1747.96 315H1877.08Z" fill="white"/>
    <path d="M1976.05 210.84H1996.36C2010.97 210.84 2022.94 222.47 2023.35 237.08L2024.53 279L2018.29 275.64C2022.45 251.96 2031.89 234.36 2046.61 222.84C2061.65 211 2079.89 205.08 2101.33 205.08C2128.85 205.08 2150.13 214.04 2165.17 231.96C2180.21 249.56 2187.73 272.92 2187.73 302.04V466.2H2163.85C2148.94 466.2 2136.85 454.112 2136.85 439.2V317.4C2136.85 294.36 2133.01 277.08 2125.33 265.56C2117.65 253.72 2105.01 247.8 2087.41 247.8C2068.85 247.8 2054.13 253.88 2043.25 266.04C2032.37 278.2 2026.93 295.32 2026.93 317.4V466.2H1976.05V210.84Z" fill="white"/>
    <path d="M2347.64 543.96C2327.8 543.96 2310.04 540.92 2294.36 534.84C2279 528.76 2266.36 520.12 2256.44 508.92C2246.52 498.04 2239.8 485.24 2236.28 470.52L2267.78 468.515C2280.27 467.721 2290.86 476.438 2299.2 485.76C2301.72 488.571 2304.58 491.011 2307.8 493.08C2317.08 498.84 2330.36 501.72 2347.64 501.72C2369.08 501.72 2385.24 497.24 2396.12 488.28C2407.32 479.32 2412.92 465.72 2412.92 447.48V410.52C2406.52 423.64 2396.6 434.04 2383.16 441.72C2370.04 449.4 2355.16 453.24 2338.52 453.24C2317.4 453.24 2298.52 448.12 2281.88 437.88C2265.24 427.32 2252.12 412.76 2242.52 394.2C2233.24 375.32 2228.6 353.72 2228.6 329.4C2228.6 305.08 2233.24 283.64 2242.52 265.08C2251.8 246.2 2264.6 231.48 2280.92 220.92C2297.24 210.36 2315.96 205.08 2337.08 205.08C2355 205.08 2370.84 209.24 2384.6 217.56C2398.68 225.56 2408.76 236.76 2414.84 251.16V237.84C2414.84 222.928 2426.93 210.84 2441.84 210.84H2464.28V446.04C2464.28 477.08 2453.88 501.08 2433.08 518.04C2412.28 535.32 2383.8 543.96 2347.64 543.96ZM2346.68 410.04C2360.12 410.04 2371.8 406.84 2381.72 400.44C2391.64 393.72 2399.32 384.28 2404.76 372.12C2410.52 359.96 2413.4 345.56 2413.4 328.92C2413.4 312.6 2410.68 298.36 2405.24 286.2C2400.12 274.04 2392.44 264.76 2382.2 258.36C2371.96 251.64 2360.12 248.28 2346.68 248.28C2326.52 248.28 2310.52 255.64 2298.68 270.36C2287.16 284.76 2281.4 304.28 2281.4 328.92C2281.4 353.88 2287.32 373.72 2299.16 388.44C2311 402.84 2326.84 410.04 2346.68 410.04Z" fill="white"/>
    <path d="M2520.29 237.84C2520.29 222.928 2532.37 210.84 2547.29 210.84H2571.17V439.2C2571.17 454.112 2559.08 466.2 2544.17 466.2H2520.29V237.84ZM2519.33 150C2519.33 135.088 2531.41 123 2546.33 123H2572.61V146.88C2572.61 161.792 2560.52 173.88 2545.61 173.88H2519.33V150Z" fill="white"/>
    <path d="M2626.94 210.84H2647.25C2661.86 210.84 2673.82 222.47 2674.24 237.08L2675.42 279L2669.18 275.64C2673.34 251.96 2682.78 234.36 2697.5 222.84C2712.54 211 2730.78 205.08 2752.22 205.08C2779.74 205.08 2801.02 214.04 2816.06 231.96C2831.1 249.56 2838.62 272.92 2838.62 302.04V466.2H2814.74C2799.82 466.2 2787.74 454.112 2787.74 439.2V317.4C2787.74 294.36 2783.9 277.08 2776.22 265.56C2768.54 253.72 2755.9 247.8 2738.3 247.8C2719.74 247.8 2705.02 253.88 2694.14 266.04C2683.26 278.2 2677.82 295.32 2677.82 317.4V466.2H2626.94V210.84Z" fill="white"/>
    <path d="M3000.45 471.96C2976.13 471.96 2954.85 466.52 2936.61 455.64C2918.37 444.76 2904.29 429.24 2894.37 409.08C2884.45 388.92 2879.49 365.4 2879.49 338.52C2879.49 311.96 2884.45 288.6 2894.37 268.44C2904.29 247.96 2918.21 232.28 2936.13 221.4C2954.05 210.52 2975.01 205.08 2999.01 205.08C3022.37 205.08 3042.85 210.52 3060.45 221.4C3078.05 231.96 3091.65 247.48 3101.25 267.96C3111.17 288.12 3116.13 312.28 3116.13 340.44V353.4H2932.77C2933.73 377.72 2940.13 396.28 2951.97 409.08C2964.13 421.88 2980.45 428.28 3000.93 428.28C3015.97 428.28 3028.45 424.92 3038.37 418.2C3042.73 415.246 3046.53 411.735 3049.78 407.668C3057.43 398.091 3068.01 389.942 3080.24 390.721L3112.29 392.76C3105.57 417.08 3092.13 436.44 3071.97 450.84C3052.13 464.92 3028.29 471.96 3000.45 471.96ZM3061.89 315C3060.29 292.92 3053.89 276.28 3042.69 265.08C3031.81 253.88 3017.25 248.28 2999.01 248.28C2980.77 248.28 2965.73 254.04 2953.89 265.56C2942.37 277.08 2935.33 293.56 2932.77 315H3061.89Z" fill="white"/>
    <path d="M3266.94 471.96C3242.62 471.96 3221.34 466.52 3203.1 455.64C3184.86 444.76 3170.78 429.24 3160.86 409.08C3150.94 388.92 3145.98 365.4 3145.98 338.52C3145.98 311.96 3150.94 288.6 3160.86 268.44C3170.78 247.96 3184.7 232.28 3202.62 221.4C3220.54 210.52 3241.5 205.08 3265.5 205.08C3288.86 205.08 3309.34 210.52 3326.94 221.4C3344.54 231.96 3358.14 247.48 3367.74 267.96C3377.66 288.12 3382.62 312.28 3382.62 340.44V353.4H3199.26C3200.22 377.72 3206.62 396.28 3218.46 409.08C3230.62 421.88 3246.94 428.28 3267.42 428.28C3282.46 428.28 3294.94 424.92 3304.86 418.2C3309.22 415.246 3313.03 411.735 3316.27 407.668C3323.92 398.091 3334.5 389.942 3346.73 390.721L3378.78 392.76C3372.06 417.08 3358.62 436.44 3338.46 450.84C3318.62 464.92 3294.78 471.96 3266.94 471.96ZM3328.38 315C3326.78 292.92 3320.38 276.28 3309.18 265.08C3298.3 253.88 3283.74 248.28 3265.5 248.28C3247.26 248.28 3232.22 254.04 3220.38 265.56C3208.86 277.08 3201.82 293.56 3199.26 315H3328.38Z" fill="white"/>
    <path d="M3427.35 210.84H3447.67C3462.28 210.84 3474.24 222.467 3474.66 237.074L3475.84 278.52L3471.52 277.08C3475.04 254.36 3482.08 237.72 3492.64 227.16C3503.2 216.28 3517.76 210.84 3536.32 210.84H3560.8V231.96C3560.8 245.48 3549.84 256.44 3536.32 256.44V256.44C3523.2 256.44 3512.32 258.68 3503.68 263.16C3495.36 267.32 3488.96 273.72 3484.48 282.36C3480.32 291 3478.24 302.04 3478.24 315.48V439.2C3478.24 454.112 3466.15 466.2 3451.24 466.2H3427.35V210.84Z" fill="white"/>
    <path d="M3692.44 471.96C3669.08 471.96 3648.92 468.44 3631.96 461.4C3615.32 454.04 3602.36 443.96 3593.08 431.16C3584.12 418.04 3579 402.84 3577.72 385.56L3606.25 384.263C3620.05 383.636 3631.2 394.224 3638.6 405.879C3641.36 410.216 3644.75 414.003 3648.76 417.24C3659 425.24 3673.56 429.24 3692.44 429.24C3708.76 429.24 3721.4 426.68 3730.36 421.56C3739.64 416.12 3744.28 407.96 3744.28 397.08C3744.28 390.68 3742.68 385.4 3739.48 381.24C3736.28 377.08 3730.36 373.56 3721.72 370.68C3713.08 367.48 3700.28 364.44 3683.32 361.56C3658.36 357.08 3638.52 351.64 3623.8 345.24C3609.4 338.52 3599.16 330.36 3593.08 320.76C3587 310.84 3583.96 298.68 3583.96 284.28C3583.96 260.6 3592.92 241.56 3610.84 227.16C3628.76 212.44 3653.88 205.08 3686.2 205.08C3717.56 205.08 3742.2 212.92 3760.12 228.6C3778.36 243.96 3789.4 264.12 3793.24 289.08L3764.61 290.656C3751.06 291.402 3739.91 281.258 3732.23 270.068C3729.57 266.191 3726.39 262.768 3722.68 259.8C3713.4 251.8 3701.08 247.8 3685.72 247.8C3669.72 247.8 3657.56 251 3649.24 257.4C3640.92 263.48 3636.76 271.8 3636.76 282.36C3636.76 290.04 3638.52 296.28 3642.04 301.08C3645.88 305.88 3651.8 309.88 3659.8 313.08C3668.12 315.96 3679.48 318.52 3693.88 320.76C3720.44 325.24 3741.08 330.68 3755.8 337.08C3770.52 343.48 3781.08 351.48 3787.48 361.08C3793.88 370.36 3797.08 382.2 3797.08 396.6C3797.08 420.28 3787.32 438.84 3767.8 452.28C3748.6 465.4 3723.48 471.96 3692.44 471.96Z" fill="white"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/dopler-wordmark.svg
    ```svg
    <svg width="1631" height="589" viewBox="0 0 1631 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M1372.3 206.541H1392.61C1407.23 206.541 1419.19 218.168 1419.6 232.775L1420.78 274.221L1416.46 272.781C1419.98 250.061 1427.02 233.421 1437.58 222.861C1448.14 211.981 1462.7 206.541 1481.26 206.541H1505.74V227.661C1505.74 241.181 1494.78 252.141 1481.26 252.141C1468.14 252.141 1457.26 254.381 1448.62 258.861C1440.3 263.021 1433.9 269.421 1429.42 278.061C1425.26 286.701 1423.18 297.741 1423.18 311.181V434.901C1423.18 449.813 1411.09 461.901 1396.18 461.901H1372.3V206.541Z" fill="white"/>
    <path d="M1211.88 467.661C1187.56 467.661 1166.28 462.221 1148.04 451.341C1129.8 440.461 1115.72 424.941 1105.8 404.781C1095.88 384.621 1090.92 361.101 1090.92 334.221C1090.92 307.661 1095.88 284.301 1105.8 264.141C1115.72 243.661 1129.64 227.981 1147.56 217.101C1165.48 206.221 1186.44 200.781 1210.44 200.781C1233.8 200.781 1254.28 206.221 1271.88 217.101C1289.48 227.661 1303.08 243.181 1312.68 263.661C1322.6 283.821 1327.56 307.981 1327.56 336.141V349.101H1144.2C1145.16 373.421 1151.56 391.981 1163.4 404.781C1175.56 417.581 1191.88 423.981 1212.36 423.981C1227.4 423.981 1239.88 420.621 1249.8 413.901C1254.16 410.947 1257.97 407.437 1261.21 403.37C1268.86 393.792 1279.44 385.644 1291.68 386.422L1323.72 388.461C1317 412.781 1303.56 432.141 1283.4 446.541C1263.56 460.621 1239.72 467.661 1211.88 467.661ZM1273.32 310.701C1271.72 288.621 1265.32 271.981 1254.12 260.781C1243.24 249.581 1228.68 243.981 1210.44 243.981C1192.2 243.981 1177.16 249.741 1165.32 261.261C1153.8 272.781 1146.76 289.261 1144.2 310.701H1273.32Z" fill="white"/>
    <path d="M1032.34 461.902C1014.74 461.902 1000.98 457.582 991.064 448.942C981.144 439.982 976.184 426.222 976.184 407.662L976.664 121.102H1000.54C1015.46 121.102 1027.54 133.19 1027.54 148.102V402.862C1027.54 408.622 1028.98 412.942 1031.86 415.822C1035.06 418.702 1039.38 420.142 1044.82 420.142C1056.22 420.142 1065.46 429.382 1065.46 440.782V461.902H1032.34Z" fill="white"/>
    <path d="M695.16 206.541H716.861C731.496 206.541 743.467 218.201 743.852 232.831L744.6 261.261L738.84 258.381C744.92 239.821 755.32 225.581 770.04 215.661C784.76 205.741 801.88 200.781 821.4 200.781C845.4 200.781 865.56 206.701 881.88 218.541C898.52 230.381 910.84 246.541 918.84 267.021C926.84 287.181 930.84 309.581 930.84 334.221C930.84 358.861 926.84 381.421 918.84 401.901C910.84 422.061 898.52 438.061 881.88 449.901C865.56 461.741 845.4 467.661 821.4 467.661C808.6 467.661 796.6 465.421 785.4 460.941C774.2 456.461 764.6 450.061 756.6 441.741C748.92 433.421 743.48 423.821 740.28 412.941L746.04 407.181V506.901C746.04 521.813 733.952 533.901 719.04 533.901H695.16V206.541ZM812.28 423.501C832.76 423.501 848.76 415.661 860.28 399.981C872.12 384.301 878.04 362.381 878.04 334.221C878.04 306.061 872.12 284.141 860.28 268.461C848.76 252.781 832.76 244.941 812.28 244.941C798.84 244.941 787 248.301 776.76 255.021C766.84 261.741 759.16 271.821 753.72 285.261C748.6 298.381 746.04 314.701 746.04 334.221C746.04 353.741 748.6 370.221 753.72 383.661C759.16 396.781 766.84 406.701 776.76 413.421C786.68 420.141 798.52 423.501 812.28 423.501Z" fill="white"/>
    <path d="M529.6 467.661C505.28 467.661 484 462.221 465.76 451.341C447.52 440.461 433.28 424.941 423.04 404.781C413.12 384.621 408.16 361.101 408.16 334.221C408.16 307.341 413.12 283.821 423.04 263.661C433.28 243.501 447.52 227.981 465.76 217.101C484 206.221 505.28 200.781 529.6 200.781C553.6 200.781 574.72 206.221 592.96 217.101C611.2 227.981 625.28 243.501 635.2 263.661C645.44 283.821 650.56 307.341 650.56 334.221C650.56 361.101 645.44 384.621 635.2 404.781C625.28 424.941 611.2 440.461 592.96 451.341C574.72 462.221 553.6 467.661 529.6 467.661ZM529.6 423.501C551.04 423.501 567.68 415.661 579.52 399.981C591.68 383.981 597.76 362.061 597.76 334.221C597.76 306.381 591.68 284.621 579.52 268.941C567.68 252.941 551.04 244.941 529.6 244.941C508.16 244.941 491.36 252.781 479.2 268.461C467.04 284.141 460.96 306.061 460.96 334.221C460.96 362.381 467.04 384.301 479.2 399.981C491.36 415.661 508.16 423.501 529.6 423.501Z" fill="white"/>
    <path d="M232.302 467.662C210.542 467.662 191.502 462.222 175.182 451.342C159.182 440.462 146.862 424.942 138.222 404.782C129.582 384.622 125.262 361.102 125.262 334.222C125.262 307.342 129.582 283.822 138.222 263.662C146.862 243.502 159.182 227.982 175.182 217.102C191.502 206.222 210.542 200.782 232.302 200.782C249.902 200.782 265.422 204.462 278.862 211.822C292.622 219.182 303.022 229.422 310.062 242.542V148.102C310.062 133.19 322.15 121.102 337.062 121.102H360.942V461.902H339.908C325.39 461.902 313.471 450.421 312.927 435.913L312.462 423.502C305.422 437.262 294.702 448.142 280.302 456.142C266.222 463.822 250.222 467.662 232.302 467.662ZM245.742 423.502C259.182 423.502 270.702 419.982 280.302 412.942C290.222 405.902 297.582 395.822 302.382 382.702C307.502 369.262 310.062 353.102 310.062 334.222C310.062 315.342 307.502 299.182 302.382 285.742C297.582 272.302 290.382 262.222 280.782 255.502C271.182 248.462 259.502 244.942 245.742 244.942C224.942 244.942 208.462 252.942 196.302 268.942C184.142 284.622 178.062 306.382 178.062 334.222C178.062 361.742 184.142 383.502 196.302 399.502C208.782 415.502 225.262 423.502 245.742 423.502Z" fill="white"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/enroll-wordmark.svg
    ```svg
    <svg width="1453" height="589" viewBox="0 0 1453 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M245.96 467.78C221.64 467.78 200.36 462.34 182.12 451.46C163.88 440.58 149.8 425.06 139.88 404.9C129.96 384.74 125 361.22 125 334.34C125 307.78 129.96 284.42 139.88 264.26C149.8 243.78 163.72 228.1 181.64 217.22C199.56 206.34 220.52 200.9 244.52 200.9C267.88 200.9 288.36 206.34 305.96 217.22C323.56 227.78 337.16 243.3 346.76 263.78C356.68 283.94 361.64 308.1 361.64 336.26V349.22H178.28C179.24 373.54 185.64 392.1 197.48 404.9C209.64 417.7 225.96 424.1 246.44 424.1C261.48 424.1 273.96 420.74 283.88 414.02C288.241 411.066 292.045 407.555 295.293 403.488C302.941 393.911 313.521 385.762 325.753 386.54L357.8 388.58C351.08 412.9 337.64 432.26 317.48 446.66C297.64 460.74 273.8 467.78 245.96 467.78ZM307.4 310.82C305.8 288.74 299.4 272.1 288.2 260.9C277.32 249.7 262.76 244.1 244.52 244.1C226.28 244.1 211.24 249.86 199.4 261.38C187.88 272.9 180.84 289.38 178.28 310.82H307.4Z" fill="white"/>
    <path d="M406.374 206.66H426.684C441.299 206.66 453.261 218.29 453.673 232.899L454.854 274.82L448.614 271.46C452.774 247.78 462.214 230.18 476.934 218.66C491.974 206.82 510.214 200.9 531.654 200.9C559.174 200.9 580.454 209.86 595.494 227.78C610.534 245.38 618.054 268.74 618.054 297.86V462.02H594.174C579.262 462.02 567.174 449.931 567.174 435.02V313.22C567.174 290.18 563.334 272.9 555.654 261.38C547.974 249.54 535.334 243.62 517.734 243.62C499.174 243.62 484.454 249.7 473.574 261.86C462.694 274.02 457.254 291.14 457.254 313.22V462.02H406.374V206.66Z" fill="white"/>
    <path d="M671.461 206.66H691.776C706.39 206.66 718.351 218.286 718.765 232.894L719.941 274.34L715.621 272.9C719.141 250.18 726.181 233.54 736.741 222.98C747.301 212.1 761.861 206.66 780.421 206.66H804.901V227.78C804.901 241.3 793.941 252.26 780.421 252.26V252.26C767.301 252.26 756.421 254.5 747.781 258.98C739.461 263.14 733.061 269.54 728.581 278.18C724.421 286.82 722.341 297.86 722.341 311.3V435.02C722.341 449.931 710.253 462.02 695.341 462.02H671.461V206.66Z" fill="white"/>
    <path d="M943.265 467.78C918.945 467.78 897.665 462.34 879.425 451.46C861.185 440.58 846.945 425.06 836.705 404.9C826.785 384.74 821.825 361.22 821.825 334.34C821.825 307.46 826.785 283.94 836.705 263.78C846.945 243.62 861.185 228.1 879.425 217.22C897.665 206.34 918.945 200.9 943.265 200.9C967.265 200.9 988.385 206.34 1006.62 217.22C1024.87 228.1 1038.94 243.62 1048.86 263.78C1059.1 283.94 1064.23 307.46 1064.23 334.34C1064.23 361.22 1059.1 384.74 1048.86 404.9C1038.94 425.06 1024.87 440.58 1006.62 451.46C988.385 462.34 967.265 467.78 943.265 467.78ZM943.265 423.62C964.705 423.62 981.345 415.78 993.185 400.1C1005.34 384.1 1011.42 362.18 1011.42 334.34C1011.42 306.5 1005.34 284.74 993.185 269.06C981.345 253.06 964.705 245.06 943.265 245.06C921.825 245.06 905.025 252.9 892.865 268.58C880.705 284.26 874.625 306.18 874.625 334.34C874.625 362.5 880.705 384.42 892.865 400.1C905.025 415.78 921.825 423.62 943.265 423.62Z" fill="white"/>
    <path d="M1165.45 462.02C1147.85 462.02 1134.09 457.7 1124.17 449.06C1114.25 440.1 1109.29 426.34 1109.29 407.78L1109.77 121.22H1133.65C1148.56 121.22 1160.65 133.308 1160.65 148.22V402.98C1160.65 408.74 1162.09 413.06 1164.97 415.94C1168.17 418.82 1172.49 420.26 1177.93 420.26V420.26C1189.33 420.26 1198.57 429.501 1198.57 440.9V462.02H1165.45Z" fill="white"/>
    <path d="M1294.6 462.02C1277 462.02 1263.24 457.7 1253.32 449.06C1243.4 440.1 1238.44 426.34 1238.44 407.78L1238.92 121.22H1262.8C1277.71 121.22 1289.8 133.308 1289.8 148.22V402.98C1289.8 408.74 1291.24 413.06 1294.12 415.94C1297.32 418.82 1301.64 420.26 1307.08 420.26V420.26C1318.48 420.26 1327.72 429.501 1327.72 440.9V462.02H1294.6Z" fill="white"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/icon-dark.svg
    ```svg
    <svg width="590" height="589" viewBox="0 0 590 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M81.6393 341.413C55.4536 315.228 55.4536 272.772 81.6393 246.587L156.146 172.08L264.52 280.453C272.002 287.935 272.002 300.065 264.52 307.547L156.146 415.92L81.6393 341.413Z" fill="white"/>
    <path d="M173.08 155.146L247.587 80.6393C273.772 54.4536 316.228 54.4536 342.413 80.6393L416.92 155.146L308.547 263.52C301.065 271.002 288.935 271.002 281.453 263.52L173.08 155.146Z" fill="white"/>
    <path d="M173.08 432.854L281.453 324.48C288.935 316.998 301.065 316.998 308.547 324.48L416.92 432.854L342.413 507.361C316.228 533.546 273.772 533.546 247.587 507.361L173.08 432.854Z" fill="white"/>
    <path d="M325.48 307.547C317.998 300.065 317.998 287.935 325.48 280.453L433.854 172.08L508.361 246.587C534.546 272.772 534.546 315.228 508.361 341.413L433.854 415.92L325.48 307.547Z" fill="white"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/magic-portfolio-wordmark.svg
    ```svg
    <svg width="3524" height="589" viewBox="0 0 3524 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M125 171.86H145.167C159.839 171.86 171.826 183.577 172.16 198.246L173 235.22L167.24 233.3C170.12 219.54 175.08 207.7 182.12 197.78C189.48 187.54 198.44 179.7 209 174.26C219.56 168.82 231.08 166.1 243.56 166.1C265.32 166.1 283.08 172.18 296.84 184.34C310.6 196.5 319.24 213.46 322.76 235.22H314.6C318.76 213.14 327.56 196.18 341 184.34C354.44 172.18 371.72 166.1 392.84 166.1C410.44 166.1 425.64 169.94 438.44 177.62C451.24 184.98 460.84 195.86 467.24 210.26C473.96 224.66 477.32 242.26 477.32 263.06V427.22H453.44C438.528 427.22 426.44 415.131 426.44 400.22V275.54C426.44 253.14 422.44 236.5 414.44 225.62C406.44 214.42 394.28 208.82 377.96 208.82C367.4 208.82 358.12 211.54 350.12 216.98C342.12 222.42 335.88 230.42 331.4 240.98C327.24 251.22 325.16 263.38 325.16 277.46V427.22H303.68C288.768 427.22 276.68 415.131 276.68 400.22V277.46C276.68 255.06 272.84 238.1 265.16 226.58C257.8 214.74 245.8 208.82 229.16 208.82C218.28 208.82 208.84 211.54 200.84 216.98C192.84 222.42 186.6 230.42 182.12 240.98C177.96 251.22 175.88 263.38 175.88 277.46V427.22H125V171.86Z" fill="white"/>
    <path d="M607.411 432.98C580.851 432.98 559.571 426.9 543.571 414.74C527.891 402.26 520.051 385.14 520.051 363.38C520.051 341.62 526.611 324.5 539.731 312.02C552.851 299.54 573.491 290.58 601.651 285.14L689.491 268.34C689.491 248.5 684.851 233.78 675.571 224.18C666.611 214.26 653.011 209.3 634.771 209.3C618.771 209.3 605.971 212.98 596.371 220.34C592.375 223.27 588.934 226.81 586.047 230.96C578.479 241.839 567.449 251.401 554.224 250.559L524.371 248.66C529.171 222.74 541.171 202.58 560.371 188.18C579.891 173.46 604.691 166.1 634.771 166.1C669.011 166.1 695.091 175.22 713.011 193.46C731.251 211.7 740.371 237.62 740.371 271.22V370.58C740.371 376.66 741.491 380.98 743.731 383.54C745.971 385.78 749.491 386.9 754.291 386.9V386.9C759.328 386.9 763.411 390.983 763.411 396.02V427.22C761.171 427.54 758.291 427.86 754.771 428.18C751.571 428.5 748.211 428.66 744.691 428.66C727.091 428.66 713.971 424.5 705.331 416.18C697.011 407.54 692.851 393.14 692.851 372.98L698.131 375.38C694.611 392.02 684.371 405.78 667.411 416.66C650.451 427.54 630.451 432.98 607.411 432.98ZM616.051 392.66C631.091 392.66 644.051 389.78 654.931 384.02C666.131 377.94 674.611 369.62 680.371 359.06C686.451 348.5 689.491 336.5 689.491 323.06V306.74L615.091 321.14C600.051 324.02 589.171 328.5 582.451 334.58C576.051 340.66 572.851 348.66 572.851 358.58C572.851 369.46 576.531 377.94 583.891 384.02C591.571 389.78 602.291 392.66 616.051 392.66Z" fill="white"/>
    <path d="M905.585 504.98C885.745 504.98 867.985 501.94 852.305 495.86C836.945 489.78 824.305 481.14 814.385 469.94C804.465 459.06 797.745 446.26 794.225 431.54L847.025 428.18C850.545 439.7 856.785 448.34 865.745 454.1C875.025 459.86 888.305 462.74 905.585 462.74C927.025 462.74 943.185 458.26 954.065 449.3C965.265 440.34 970.865 426.74 970.865 408.5V371.54C964.465 384.66 954.545 395.06 941.105 402.74C927.985 410.42 913.105 414.26 896.465 414.26C875.345 414.26 856.465 409.14 839.825 398.9C823.185 388.34 810.065 373.78 800.465 355.22C791.185 336.34 786.545 314.74 786.545 290.42C786.545 266.1 791.185 244.66 800.465 226.1C809.745 207.22 822.545 192.5 838.865 181.94C855.185 171.38 873.905 166.1 895.025 166.1C912.945 166.1 928.785 170.26 942.545 178.58C956.625 186.58 966.705 197.78 972.785 212.18V198.86C972.785 183.948 984.873 171.86 999.785 171.86H1022.22V407.06C1022.22 438.1 1011.83 462.1 991.025 479.06C970.225 496.34 941.745 504.98 905.585 504.98ZM904.625 371.06C918.065 371.06 929.745 367.86 939.665 361.46C949.585 354.74 957.265 345.3 962.705 333.14C968.465 320.98 971.345 306.58 971.345 289.94C971.345 273.62 968.625 259.38 963.185 247.22C958.065 235.06 950.385 225.78 940.145 219.38C929.905 212.66 918.065 209.3 904.625 209.3C884.465 209.3 868.465 216.66 856.625 231.38C845.105 245.78 839.345 265.3 839.345 289.94C839.345 314.9 845.265 334.74 857.105 349.46C868.945 363.86 884.785 371.06 904.625 371.06Z" fill="white"/>
    <path d="M1078.23 198.86C1078.23 183.948 1090.32 171.86 1105.23 171.86H1129.11V400.22C1129.11 415.131 1117.02 427.22 1102.11 427.22H1078.23V198.86ZM1077.27 111.02C1077.27 96.1078 1089.36 84.0195 1104.27 84.0195H1130.55V107.9C1130.55 122.811 1118.46 134.9 1103.55 134.9H1077.27V111.02Z" fill="white"/>
    <path d="M1297.54 432.98C1273.22 432.98 1251.93 427.54 1233.69 416.66C1215.45 405.78 1201.21 390.26 1190.97 370.1C1181.05 349.62 1176.09 326.1 1176.09 299.54C1176.09 272.98 1181.05 249.62 1190.97 229.46C1201.21 208.98 1215.45 193.3 1233.69 182.42C1251.93 171.54 1273.22 166.1 1297.54 166.1C1318.02 166.1 1336.26 169.78 1352.26 177.14C1368.58 184.18 1381.85 194.74 1392.09 208.82C1402.33 222.58 1408.74 239.22 1411.3 258.74L1382.86 260.291C1369.02 261.045 1357.64 250.656 1350.82 238.597C1347.56 232.834 1343.4 227.869 1338.33 223.7C1327.45 214.74 1313.86 210.26 1297.54 210.26C1276.1 210.26 1259.3 218.1 1247.14 233.78C1234.98 249.46 1228.9 271.38 1228.9 299.54C1228.9 327.7 1234.98 349.62 1247.14 365.3C1259.3 380.98 1276.1 388.82 1297.54 388.82C1313.86 388.82 1327.45 384.18 1338.33 374.9C1343.84 370.201 1348.29 364.353 1351.66 357.357C1357.76 344.727 1369.25 334.206 1383.26 334.97L1411.3 336.5C1408.74 356.02 1402.33 372.98 1392.09 387.38C1382.17 401.78 1369.05 412.98 1352.73 420.98C1336.41 428.98 1318.02 432.98 1297.54 432.98Z" fill="white"/>
    <path d="M1561.31 171.86H1583.01C1597.64 171.86 1609.61 183.519 1610 198.149L1610.75 226.58L1604.99 223.7C1611.07 205.14 1621.47 190.9 1636.19 180.98C1650.91 171.06 1668.03 166.1 1687.55 166.1C1711.55 166.1 1731.71 172.02 1748.03 183.86C1764.67 195.7 1776.99 211.86 1784.99 232.34C1792.99 252.5 1796.99 274.9 1796.99 299.54C1796.99 324.18 1792.99 346.74 1784.99 367.22C1776.99 387.38 1764.67 403.38 1748.03 415.22C1731.71 427.06 1711.55 432.98 1687.55 432.98C1674.75 432.98 1662.75 430.74 1651.55 426.26C1640.35 421.78 1630.75 415.38 1622.75 407.06C1615.07 398.74 1609.63 389.14 1606.43 378.26L1612.19 372.5V472.22C1612.19 487.131 1600.1 499.22 1585.19 499.22H1561.31V171.86ZM1678.43 388.82C1698.91 388.82 1714.91 380.98 1726.43 365.3C1738.27 349.62 1744.19 327.7 1744.19 299.54C1744.19 271.38 1738.27 249.46 1726.43 233.78C1714.91 218.1 1698.91 210.26 1678.43 210.26C1664.99 210.26 1653.15 213.62 1642.91 220.34C1632.99 227.06 1625.31 237.14 1619.87 250.58C1614.75 263.7 1612.19 280.02 1612.19 299.54C1612.19 319.06 1614.75 335.54 1619.87 348.98C1625.31 362.1 1632.99 372.02 1642.91 378.74C1652.83 385.46 1664.67 388.82 1678.43 388.82Z" fill="white"/>
    <path d="M1948.42 432.98C1924.1 432.98 1902.82 427.54 1884.58 416.66C1866.34 405.78 1852.1 390.26 1841.86 370.1C1831.94 349.94 1826.98 326.42 1826.98 299.54C1826.98 272.66 1831.94 249.14 1841.86 228.98C1852.1 208.82 1866.34 193.3 1884.58 182.42C1902.82 171.54 1924.1 166.1 1948.42 166.1C1972.42 166.1 1993.54 171.54 2011.78 182.42C2030.02 193.3 2044.1 208.82 2054.02 228.98C2064.26 249.14 2069.38 272.66 2069.38 299.54C2069.38 326.42 2064.26 349.94 2054.02 370.1C2044.1 390.26 2030.02 405.78 2011.78 416.66C1993.54 427.54 1972.42 432.98 1948.42 432.98ZM1948.42 388.82C1969.86 388.82 1986.5 380.98 1998.34 365.3C2010.5 349.3 2016.58 327.38 2016.58 299.54C2016.58 271.7 2010.5 249.94 1998.34 234.26C1986.5 218.26 1969.86 210.26 1948.42 210.26C1926.98 210.26 1910.18 218.1 1898.02 233.78C1885.86 249.46 1879.78 271.38 1879.78 299.54C1879.78 327.7 1885.86 349.62 1898.02 365.3C1910.18 380.98 1926.98 388.82 1948.42 388.82Z" fill="white"/>
    <path d="M2113.98 171.86H2134.3C2148.91 171.86 2160.87 183.486 2161.29 198.094L2162.46 239.54L2158.14 238.1C2161.66 215.38 2168.7 198.74 2179.26 188.18C2189.82 177.3 2204.38 171.86 2222.94 171.86H2247.42V192.98C2247.42 206.499 2236.46 217.46 2222.94 217.46V217.46C2209.82 217.46 2198.94 219.7 2190.3 224.18C2181.98 228.34 2175.58 234.74 2171.1 243.38C2166.94 252.02 2164.86 263.06 2164.86 276.5V400.22C2164.86 415.131 2152.77 427.22 2137.86 427.22H2113.98V171.86Z" fill="white"/>
    <path d="M2386.05 427.22C2361.73 427.22 2343.81 421.62 2332.29 410.42C2320.77 399.22 2315.01 381.78 2315.01 358.1V111.86H2338.89C2353.8 111.86 2365.89 123.948 2365.89 138.86V354.26C2365.89 365.78 2368.29 373.94 2373.09 378.74C2378.21 383.22 2386.21 385.46 2397.09 385.46H2406.57C2421.48 385.46 2433.57 397.548 2433.57 412.46V427.22H2386.05ZM2276.13 198.86C2276.13 183.948 2288.22 171.86 2303.13 171.86H2433.57V186.62C2433.57 201.531 2421.48 213.62 2406.57 213.62H2276.13V198.86Z" fill="white"/>
    <path d="M2502.26 155.54C2502.26 133.78 2508.34 116.82 2520.5 104.66C2532.66 92.4995 2551.06 86.4195 2575.7 86.4195H2620.82V101.18C2620.82 116.091 2608.74 128.18 2593.82 128.18H2582.42C2572.5 128.18 2565.14 130.74 2560.34 135.86C2555.54 140.98 2553.14 148.5 2553.14 158.42V400.22C2553.14 415.131 2541.06 427.22 2526.14 427.22H2502.26V155.54ZM2466.74 202.22C2466.74 187.308 2478.83 175.22 2493.74 175.22H2616.98V189.5C2616.98 204.411 2604.9 216.5 2589.98 216.5H2466.74V202.22Z" fill="white"/>
    <path d="M2757.99 432.98C2733.67 432.98 2712.39 427.54 2694.15 416.66C2675.91 405.78 2661.67 390.26 2651.43 370.1C2641.51 349.94 2636.55 326.42 2636.55 299.54C2636.55 272.66 2641.51 249.14 2651.43 228.98C2661.67 208.82 2675.91 193.3 2694.15 182.42C2712.39 171.54 2733.67 166.1 2757.99 166.1C2781.99 166.1 2803.11 171.54 2821.35 182.42C2839.59 193.3 2853.67 208.82 2863.59 228.98C2873.83 249.14 2878.95 272.66 2878.95 299.54C2878.95 326.42 2873.83 349.94 2863.59 370.1C2853.67 390.26 2839.59 405.78 2821.35 416.66C2803.11 427.54 2781.99 432.98 2757.99 432.98ZM2757.99 388.82C2779.43 388.82 2796.07 380.98 2807.91 365.3C2820.07 349.3 2826.15 327.38 2826.15 299.54C2826.15 271.7 2820.07 249.94 2807.91 234.26C2796.07 218.26 2779.43 210.26 2757.99 210.26C2736.55 210.26 2719.75 218.1 2707.59 233.78C2695.43 249.46 2689.35 271.38 2689.35 299.54C2689.35 327.7 2695.43 349.62 2707.59 365.3C2719.75 380.98 2736.55 388.82 2757.99 388.82Z" fill="white"/>
    <path d="M2980.18 427.22C2962.58 427.22 2948.82 422.9 2938.9 414.26C2928.98 405.3 2924.02 391.54 2924.02 372.98L2924.5 86.4195H2948.38C2963.29 86.4195 2975.38 98.5078 2975.38 113.42V368.18C2975.38 373.94 2976.82 378.26 2979.7 381.14C2982.9 384.02 2987.22 385.46 2992.66 385.46V385.46C3004.06 385.46 3013.3 394.7 3013.3 406.1V427.22H2980.18Z" fill="white"/>
    <path d="M3057.86 198.86C3057.86 183.948 3069.94 171.86 3084.86 171.86H3108.74V400.22C3108.74 415.131 3096.65 427.22 3081.74 427.22H3057.86V198.86ZM3056.9 111.02C3056.9 96.1078 3068.98 84.0195 3083.9 84.0195H3110.18V107.9C3110.18 122.811 3098.09 134.9 3083.18 134.9H3056.9V111.02Z" fill="white"/>
    <path d="M3277.16 432.98C3252.84 432.98 3231.56 427.54 3213.32 416.66C3195.08 405.78 3180.84 390.26 3170.6 370.1C3160.68 349.94 3155.72 326.42 3155.72 299.54C3155.72 272.66 3160.68 249.14 3170.6 228.98C3180.84 208.82 3195.08 193.3 3213.32 182.42C3231.56 171.54 3252.84 166.1 3277.16 166.1C3301.16 166.1 3322.28 171.54 3340.52 182.42C3358.76 193.3 3372.84 208.82 3382.76 228.98C3393 249.14 3398.12 272.66 3398.12 299.54C3398.12 326.42 3393 349.94 3382.76 370.1C3372.84 390.26 3358.76 405.78 3340.52 416.66C3322.28 427.54 3301.16 432.98 3277.16 432.98ZM3277.16 388.82C3298.6 388.82 3315.24 380.98 3327.08 365.3C3339.24 349.3 3345.32 327.38 3345.32 299.54C3345.32 271.7 3339.24 249.94 3327.08 234.26C3315.24 218.26 3298.6 210.26 3277.16 210.26C3255.72 210.26 3238.92 218.1 3226.76 233.78C3214.6 249.46 3208.52 271.38 3208.52 299.54C3208.52 327.7 3214.6 349.62 3226.76 365.3C3238.92 380.98 3255.72 388.82 3277.16 388.82Z" fill="white"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/type-dark.svg
    ```svg
    <svg width="1830" height="589" viewBox="0 0 1830 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M1617.54 463.22V234.86C1617.54 219.948 1629.62 207.86 1644.54 207.86H1668.42V436.22C1668.42 451.131 1656.33 463.22 1641.42 463.22H1617.54ZM1616.58 170.9V147.02C1616.58 132.108 1628.66 120.02 1643.58 120.02H1669.86V143.9C1669.86 158.811 1657.77 170.9 1642.86 170.9H1616.58Z" fill="white"/>
    <path d="M1435.98 468.979C1410.38 468.979 1389.9 460.499 1374.54 443.539C1359.5 426.259 1351.98 402.419 1351.98 372.019V207.859H1375.86C1390.77 207.859 1402.86 219.948 1402.86 234.859V359.059C1402.86 382.099 1406.86 399.059 1414.86 409.939C1422.86 420.819 1435.02 426.259 1451.34 426.259C1469.9 426.259 1484.3 420.339 1494.54 408.499C1505.1 396.339 1510.38 379.379 1510.38 357.619V207.859H1561.26V463.219H1540.35C1525.59 463.219 1513.57 451.367 1513.36 436.608L1512.78 396.499L1519.98 399.379C1515.5 421.779 1506.06 439.059 1491.66 451.219C1477.26 463.059 1458.7 468.979 1435.98 468.979Z" fill="white"/>
    <path d="M1081.63 468.98C1056.99 468.98 1035.55 463.54 1017.31 452.66C999.394 441.78 985.474 426.26 975.554 406.1C965.634 385.94 960.674 362.42 960.674 335.54C960.674 308.66 965.634 285.3 975.554 265.46C985.474 245.3 999.234 229.78 1016.83 218.9C1034.75 207.7 1055.87 202.1 1080.19 202.1C1103.55 202.1 1124.03 207.54 1141.63 218.42C1159.23 228.98 1172.83 244.34 1182.43 264.5C1192.35 284.66 1197.31 308.98 1197.31 337.46V350.42H1013.95C1015.23 375.38 1021.79 394.1 1033.63 406.58C1045.79 419.06 1061.95 425.3 1082.11 425.3C1097.47 425.3 1109.95 421.78 1119.55 414.74C1123.85 411.687 1127.61 408.184 1130.83 404.23C1138.47 394.849 1149.01 386.95 1161.08 387.718L1193.47 389.78C1186.75 413.46 1173.47 432.66 1153.63 447.38C1134.11 461.78 1110.11 468.98 1081.63 468.98ZM1013.95 312.02H1143.07C1141.47 289.3 1134.91 272.5 1123.39 261.62C1112.19 250.74 1097.79 245.3 1080.19 245.3C1062.27 245.3 1047.39 251.06 1035.55 262.58C1024.03 273.78 1016.83 290.26 1013.95 312.02Z" fill="white"/>
    <path d="M821.715 468.98C797.075 468.98 775.635 463.54 757.395 452.66C739.475 441.78 725.395 426.26 715.155 406.1C705.235 385.94 700.275 362.42 700.275 335.54C700.275 308.66 705.235 285.3 715.155 265.46C725.395 245.3 739.475 229.78 757.395 218.9C775.635 207.7 797.075 202.1 821.715 202.1C842.195 202.1 860.435 205.78 876.435 213.14C892.755 220.18 906.035 230.58 916.275 244.34C926.515 258.1 932.915 274.9 935.475 294.74L907.111 296.287C893.245 297.043 881.896 286.575 874.968 274.54C871.612 268.709 867.301 263.762 862.035 259.7C851.155 250.74 837.715 246.26 821.715 246.26C800.275 246.26 783.475 254.26 771.315 270.26C759.155 285.94 753.075 307.7 753.075 335.54C753.075 363.38 759.155 385.3 771.315 401.3C783.475 416.98 800.275 424.82 821.715 424.82C837.715 424.82 851.155 420.34 862.035 411.38C867.784 406.617 872.394 400.632 875.866 393.424C881.964 380.768 893.469 370.208 907.496 370.973L935.475 372.5C932.915 392.02 926.515 408.98 916.275 423.38C906.355 437.78 893.235 448.98 876.915 456.98C860.915 464.98 842.515 468.98 821.715 468.98Z" fill="white"/>
    <path d="M447.721 463.22V207.86H468.031C482.646 207.86 494.608 219.49 495.02 234.099L496.201 276.02L489.961 272.66C492.841 256.02 498.281 242.58 506.281 232.34C514.281 222.1 524.041 214.58 535.561 209.78C547.081 204.66 559.561 202.1 573.001 202.1C592.201 202.1 608.041 206.42 620.521 215.06C633.321 223.38 642.921 234.9 649.321 249.62C656.041 264.02 659.401 280.5 659.401 299.06V463.22H635.521C620.609 463.22 608.521 451.131 608.521 436.22V314.42C608.521 299.38 606.921 286.74 603.721 276.5C600.521 266.26 595.241 258.42 587.881 252.98C580.521 247.54 570.921 244.82 559.081 244.82C541.161 244.82 526.601 250.74 515.401 262.58C504.201 274.42 498.601 291.7 498.601 314.42V463.22H447.721Z" fill="white"/>
    <path d="M282.163 468.98C257.843 468.98 236.563 463.54 218.323 452.66C200.083 441.78 185.843 426.26 175.603 406.1C165.683 385.94 160.723 362.42 160.723 335.54C160.723 308.34 165.683 284.82 175.603 264.98C185.843 245.14 200.083 229.78 218.323 218.9C236.563 207.7 257.843 202.1 282.163 202.1C306.483 202.1 327.603 207.7 345.523 218.9C363.763 229.78 377.843 245.14 387.763 264.98C398.003 284.82 403.123 308.34 403.123 335.54C403.123 362.42 398.003 385.94 387.763 406.1C377.843 426.26 363.763 441.78 345.523 452.66C327.603 463.54 306.483 468.98 282.163 468.98ZM282.163 424.82C303.603 424.82 320.243 416.98 332.083 401.3C344.243 385.3 350.323 363.38 350.323 335.54C350.323 307.7 344.243 285.94 332.083 270.26C320.243 254.26 303.603 246.26 282.163 246.26C260.723 246.26 243.923 254.26 231.763 270.26C219.603 285.94 213.523 307.7 213.523 335.54C213.523 363.38 219.603 385.3 231.763 401.3C243.923 416.98 260.723 424.82 282.163 424.82Z" fill="white"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/type-light.svg
    ```svg
    <svg width="1830" height="589" viewBox="0 0 1830 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M1617.54 463.22V234.86C1617.54 219.948 1629.62 207.86 1644.54 207.86H1668.42V436.22C1668.42 451.131 1656.33 463.22 1641.42 463.22H1617.54ZM1616.58 170.9V147.02C1616.58 132.108 1628.66 120.02 1643.58 120.02H1669.86V143.9C1669.86 158.811 1657.77 170.9 1642.86 170.9H1616.58Z" fill="black"/>
    <path d="M1435.98 468.979C1410.38 468.979 1389.9 460.499 1374.54 443.539C1359.5 426.259 1351.98 402.419 1351.98 372.019V207.859H1375.86C1390.77 207.859 1402.86 219.948 1402.86 234.859V359.059C1402.86 382.099 1406.86 399.059 1414.86 409.939C1422.86 420.819 1435.02 426.259 1451.34 426.259C1469.9 426.259 1484.3 420.339 1494.54 408.499C1505.1 396.339 1510.38 379.379 1510.38 357.619V207.859H1561.26V463.219H1540.35C1525.59 463.219 1513.57 451.367 1513.36 436.608L1512.78 396.499L1519.98 399.379C1515.5 421.779 1506.06 439.059 1491.66 451.219C1477.26 463.059 1458.7 468.979 1435.98 468.979Z" fill="black"/>
    <path d="M1081.63 468.98C1056.99 468.98 1035.55 463.54 1017.31 452.66C999.394 441.78 985.474 426.26 975.554 406.1C965.634 385.94 960.674 362.42 960.674 335.54C960.674 308.66 965.634 285.3 975.554 265.46C985.474 245.3 999.234 229.78 1016.83 218.9C1034.75 207.7 1055.87 202.1 1080.19 202.1C1103.55 202.1 1124.03 207.54 1141.63 218.42C1159.23 228.98 1172.83 244.34 1182.43 264.5C1192.35 284.66 1197.31 308.98 1197.31 337.46V350.42H1013.95C1015.23 375.38 1021.79 394.1 1033.63 406.58C1045.79 419.06 1061.95 425.3 1082.11 425.3C1097.47 425.3 1109.95 421.78 1119.55 414.74C1123.85 411.687 1127.61 408.184 1130.83 404.23C1138.47 394.849 1149.01 386.95 1161.08 387.718L1193.47 389.78C1186.75 413.46 1173.47 432.66 1153.63 447.38C1134.11 461.78 1110.11 468.98 1081.63 468.98ZM1013.95 312.02H1143.07C1141.47 289.3 1134.91 272.5 1123.39 261.62C1112.19 250.74 1097.79 245.3 1080.19 245.3C1062.27 245.3 1047.39 251.06 1035.55 262.58C1024.03 273.78 1016.83 290.26 1013.95 312.02Z" fill="black"/>
    <path d="M821.715 468.98C797.075 468.98 775.635 463.54 757.395 452.66C739.475 441.78 725.395 426.26 715.155 406.1C705.235 385.94 700.275 362.42 700.275 335.54C700.275 308.66 705.235 285.3 715.155 265.46C725.395 245.3 739.475 229.78 757.395 218.9C775.635 207.7 797.075 202.1 821.715 202.1C842.195 202.1 860.435 205.78 876.435 213.14C892.755 220.18 906.035 230.58 916.275 244.34C926.515 258.1 932.915 274.9 935.475 294.74L907.111 296.287C893.245 297.043 881.896 286.575 874.968 274.54C871.612 268.709 867.301 263.762 862.035 259.7C851.155 250.74 837.715 246.26 821.715 246.26C800.275 246.26 783.475 254.26 771.315 270.26C759.155 285.94 753.075 307.7 753.075 335.54C753.075 363.38 759.155 385.3 771.315 401.3C783.475 416.98 800.275 424.82 821.715 424.82C837.715 424.82 851.155 420.34 862.035 411.38C867.784 406.617 872.394 400.632 875.866 393.424C881.964 380.768 893.469 370.208 907.496 370.973L935.475 372.5C932.915 392.02 926.515 408.98 916.275 423.38C906.355 437.78 893.235 448.98 876.915 456.98C860.915 464.98 842.515 468.98 821.715 468.98Z" fill="black"/>
    <path d="M447.721 463.22V207.86H468.031C482.646 207.86 494.608 219.49 495.02 234.099L496.201 276.02L489.961 272.66C492.841 256.02 498.281 242.58 506.281 232.34C514.281 222.1 524.041 214.58 535.561 209.78C547.081 204.66 559.561 202.1 573.001 202.1C592.201 202.1 608.041 206.42 620.521 215.06C633.321 223.38 642.921 234.9 649.321 249.62C656.041 264.02 659.401 280.5 659.401 299.06V463.22H635.521C620.609 463.22 608.521 451.131 608.521 436.22V314.42C608.521 299.38 606.921 286.74 603.721 276.5C600.521 266.26 595.241 258.42 587.881 252.98C580.521 247.54 570.921 244.82 559.081 244.82C541.161 244.82 526.601 250.74 515.401 262.58C504.201 274.42 498.601 291.7 498.601 314.42V463.22H447.721Z" fill="black"/>
    <path d="M282.163 468.98C257.843 468.98 236.563 463.54 218.323 452.66C200.083 441.78 185.843 426.26 175.603 406.1C165.683 385.94 160.723 362.42 160.723 335.54C160.723 308.34 165.683 284.82 175.603 264.98C185.843 245.14 200.083 229.78 218.323 218.9C236.563 207.7 257.843 202.1 282.163 202.1C306.483 202.1 327.603 207.7 345.523 218.9C363.763 229.78 377.843 245.14 387.763 264.98C398.003 284.82 403.123 308.34 403.123 335.54C403.123 362.42 398.003 385.94 387.763 406.1C377.843 426.26 363.763 441.78 345.523 452.66C327.603 463.54 306.483 468.98 282.163 468.98ZM282.163 424.82C303.603 424.82 320.243 416.98 332.083 401.3C344.243 385.3 350.323 363.38 350.323 335.54C350.323 307.7 344.243 285.94 332.083 270.26C320.243 254.26 303.603 246.26 282.163 246.26C260.723 246.26 243.923 254.26 231.763 270.26C219.603 285.94 213.523 307.7 213.523 335.54C213.523 363.38 219.603 385.3 231.763 401.3C243.923 416.98 260.723 424.82 282.163 424.82Z" fill="black"/>
    </svg>
    
    ```
    
    File: /Users/ttran/hookgen/src/app/resources/config.js
    ```js
    // IMPORTANT: Replace with your own domain address - it's used for SEO in meta tags and schema
    const baseURL = "https://demo.once-ui.com";
    
    // Import and set font for each variant
    import { Geist } from "next/font/google";
    import { Geist_Mono } from "next/font/google";
    
    const primaryFont = Geist({
      variable: "--font-primary",
      subsets: ["latin"],
      display: "swap",
    });
    
    const monoFont = Geist_Mono({
      variable: "--font-code",
      subsets: ["latin"],
      display: "swap",
    });
    
    const font = {
      primary: primaryFont,
      secondary: primaryFont,
      tertiary: primaryFont,
      code: monoFont,
    };
    
    // default customization applied to the HTML in the main layout.tsx
    const style = {
      theme: "dark", // dark | light - not needed when using ThemeProvider
      neutral: "gray", // sand | gray | slate
      brand: "blue", // blue | indigo | violet | magenta | pink | red | orange | yellow | moss | green | emerald | aqua | cyan
      accent: "indigo", // blue | indigo | violet | magenta | pink | red | orange | yellow | moss | green | emerald | aqua | cyan
      solid: "contrast", // color | contrast | inverse
      solidStyle: "flat", // flat | plastic
      border: "playful", // rounded | playful | conservative
      surface: "filled", // filled | translucent
      transition: "all", // all | micro | macro
      scaling: "100", // 90 | 95 | 100 | 105 | 110
    };
    
    const effects = {
      mask: {
        cursor: false,
        x: 100,
        y: 0,
        radius: 100,
      },
      gradient: {
        display: true,
        opacity: 90,
        x: 100,
        y: 60,
        width: 70,
        height: 50,
        tilt: -40,
        colorStart: "accent-background-strong",
        colorEnd: "page-background",
      },
      dots: {
        display: true,
        opacity: 20,
        size: "2",
        color: "brand-on-background-weak",
      },
      grid: {
        display: true,
        opacity: 100,
        color: "accent-alpha-weak",
        width: "0.25rem",
        height: "0.25rem",
      },
      lines: {
        display: false,
        opacity: 100,
        color: "neutral-alpha-weak",
        size: "16",
        thickness: 1,
        angle: 45,
      },
    };
    
    // metadata for pages
    const meta = {
      home: {
        path: "/",
        title: "Once UI for Next.js",
        description: "An open-source design system and component library for Next.js that emphasizes easy styling and accessibility in UI development.",
        image: "/og/home.jpg",
        canonical: "https://once-ui.com",
        robots: "index,follow",
        alternates: [
          { href: "https://once-ui.com", hrefLang: "en" },
        ],
      },
      // add more routes and reference them in page.tsx
    };
    
    // default schema data
    const schema = {
      logo: "",
      type: "Organization",
      name: "Once UI",
      description: meta.home.description,
      email: "lorant@once-ui.com",
    };
    
    // social links
    const social = {
      twitter: "https://www.twitter.com/_onceui",
      linkedin: "https://www.linkedin.com/company/once-ui/",
      discord: "https://discord.com/invite/5EyAQ4eNdS",
    };
    
    export { baseURL, font, style, meta, schema, social, effects };
    
    ```
    
    File: /Users/ttran/hookgen/src/app/layout.tsx
    ```tsx
    import "@/once-ui/styles/index.scss";
    import "@/once-ui/tokens/index.scss";
    
    import classNames from "classnames";
    
    import { baseURL, style, meta, font, effects } from "@/app/resources/config";
    import { Background, Column, Flex, ToastProvider, ThemeProvider } from "@/once-ui/components";
    
    import { opacity, SpacingToken } from "@/once-ui/types";
    import { Meta, Schema } from "@/once-ui/modules";
    
    export async function generateMetadata() {
      return Meta.generate({
        title: meta.home.title,
        description: meta.home.description,
        baseURL: baseURL,
        path: meta.home.path,
        canonical: meta.home.canonical,
        image: meta.home.image,
        robots: meta.home.robots,
        alternates: meta.home.alternates,
      });
    }
    
    export default function RootLayout({
      children,
    }: Readonly<{
      children: React.ReactNode;
    }>) {
      return (
        <Flex
          suppressHydrationWarning
          as="html"
          lang="en"
          fillHeight
          background="page"
          data-neutral={style.neutral}
          data-brand={style.brand}
          data-accent={style.accent}
          data-border={style.border}
          data-solid={style.solid}
          data-solid-style={style.solidStyle}
          data-surface={style.surface}
          data-transition={style.transition}
          data-scaling={style.scaling}
          className={classNames(
            font.primary.variable,
            font.secondary.variable,
            font.tertiary.variable,
            font.code.variable,
          )}
        >
          <Schema
            as="webPage"
            baseURL={baseURL}
            title={meta.home.title}
            description={meta.home.description}
            path={meta.home.path}
          />
          <head>
            <script
              // biome-ignore lint/security/noDangerouslySetInnerHtml: <It's not dynamic nor a security issue.>
              dangerouslySetInnerHTML={{
                __html: `
                  (function() {
                    try {
                      const theme = localStorage.getItem('theme') || 'system';
                      const root = document.documentElement;
                      if (theme === 'system') {
                        const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                        root.setAttribute('data-theme', isDark ? 'dark' : 'light');
                      } else {
                        root.setAttribute('data-theme', theme);
                      }
                    } catch (e) {
                      document.documentElement.setAttribute('data-theme', 'dark');
                    }
                  })();
                `,
              }}
            />
          </head>
          <ThemeProvider>
            <ToastProvider>
              <Column as="body" fillWidth margin="0" padding="0">
                <Background
                  position="absolute"
                  mask={{
                    x: effects.mask.x,
                    y: effects.mask.y,
                    radius: effects.mask.radius,
                    cursor: effects.mask.cursor
                  }}
                  gradient={{
                    display: effects.gradient.display,
                    opacity: effects.gradient.opacity as opacity,
                    x: effects.gradient.x,
                    y: effects.gradient.y,
                    width: effects.gradient.width,
                    height: effects.gradient.height,
                    tilt: effects.gradient.tilt,
                    colorStart: effects.gradient.colorStart,
                    colorEnd: effects.gradient.colorEnd,
                  }}
                  dots={{
                    display: effects.dots.display,
                    opacity: effects.dots.opacity as opacity,
                    size: effects.dots.size as SpacingToken,
                    color: effects.dots.color,
                  }}
                  grid={{
                    display: effects.grid.display,
                    opacity: effects.grid.opacity as opacity,
                    color: effects.grid.color,
                    width: effects.grid.width,
                    height: effects.grid.height,
                  }}
                  lines={{
                    display: effects.lines.display,
                    opacity: effects.lines.opacity as opacity,
                    size: effects.lines.size as SpacingToken,
                    thickness: effects.lines.thickness,
                    angle: effects.lines.angle,
                    color: effects.lines.color,
                  }}
                />
                {children}
              </Column>
            </ToastProvider>
          </ThemeProvider>
        </Flex>
      );
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Accordion.module.scss
    ```scss
    .accordion {
        &:hover {
            background: var(--neutral-alpha-weak);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Accordion.tsx
    ```tsx
    "use client";
    
    import React, { useState, forwardRef, useImperativeHandle, useEffect, useCallback } from "react";
    import { Flex, Icon, Text, Column, Grid } from ".";
    import styles from "./Accordion.module.scss";
    
    export interface AccordionHandle extends HTMLDivElement {
      toggle: () => void;
      open: () => void;
      close: () => void;
    }
    
    interface AccordionProps extends Omit<React.ComponentProps<typeof Flex>, "title"> {
      title: React.ReactNode;
      children: React.ReactNode;
      icon?: string;
      iconRotation?: number;
      size?: "s" | "m" | "l";
      radius?: "xs" | "s" | "m" | "l" | "full";
      open?: boolean;
    }
    
    const Accordion = forwardRef<AccordionHandle, AccordionProps>(
      (
        {
          title,
          children,
          open = false,
          iconRotation = 180,
          radius,
          icon = "chevronDown",
          size = "m",
          ...rest
        },
        ref,
      ) => {
        const [isOpen, setIsOpen] = useState(open);
    
        useEffect(() => {
          setIsOpen(open);
        }, [open]);
    
        const toggleAccordion = useCallback(() => {
          setIsOpen((prev) => !prev);
        }, []);
    
        useImperativeHandle(
          ref,
          () => {
            const methods = {
              toggle: toggleAccordion,
              open: () => setIsOpen(true),
              close: () => setIsOpen(false),
            };
    
            return Object.assign(document.createElement("div"), methods) as unknown as AccordionHandle;
          },
          [toggleAccordion],
        );
    
        return (
          <Column fillWidth className={styles.border}>
            <Flex
              tabIndex={0}
              className={styles.accordion}
              cursor="pointer"
              transition="macro-medium"
              paddingY={size === "s" ? "8" : size === "m" ? "12" : "16"}
              paddingX={size === "s" ? "12" : size === "m" ? "16" : "20"}
              vertical="center"
              horizontal="space-between"
              onClick={toggleAccordion}
              onKeyDown={(e) => {
                if (e.key === "Enter" || e.key === " ") {
                  e.preventDefault();
                  toggleAccordion();
                }
              }}
              aria-expanded={isOpen}
              aria-controls="accordion-content"
              radius={radius}
              role="button"
            >
              <Text variant="heading-strong-s">{title}</Text>
              <Icon
                name={icon}
                size={size === "s" ? "xs" : "s"}
                onBackground={isOpen ? "neutral-strong" : "neutral-weak"}
                style={{
                  display: "flex",
                  transform: isOpen ? `rotate(${iconRotation}deg)` : "rotate(0deg)",
                  transition: "var(--transition-micro-medium)",
                }}
              />
            </Flex>
            <Grid
              id="accordion-content"
              fillWidth
              style={{
                gridTemplateRows: isOpen ? "1fr" : "0fr",
                transition:
                  "grid-template-rows var(--transition-duration-macro-medium) var(--transition-eased)",
              }}
              aria-hidden={!isOpen}
            >
              <Flex fillWidth minHeight={0} overflow="hidden">
                <Column fillWidth paddingX="20" paddingTop="8" paddingBottom="16" {...rest}>
                  {children}
                </Column>
              </Flex>
            </Grid>
          </Column>
        );
      },
    );
    
    Accordion.displayName = "Accordion";
    export { Accordion };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/AccordionGroup.tsx
    ```tsx
    import React from "react";
    import { Column, Accordion, Line, Flex } from "@/once-ui/components";
    
    export type AccordionItem = {
      title: React.ReactNode;
      content: React.ReactNode;
    };
    
    export interface AccordionGroupProps extends React.ComponentProps<typeof Flex> {
      items: AccordionItem[];
      size?: "s" | "m" | "l";
    }
    
    const AccordionGroup: React.FC<AccordionGroupProps> = ({ items, size = "m", ...rest }) => {
      if (!items || items.length === 0) {
        return null;
      }
    
      return (
        <Column fillWidth radius="m" border="neutral-alpha-medium" overflow="hidden" {...rest}>
          {items.map((item, index) => (
            <React.Fragment key={index}>
              <Accordion title={item.title} size={size}>
                {item.content}
              </Accordion>
              {index < items.length - 1 && <Line background="neutral-alpha-medium" />}
            </React.Fragment>
          ))}
        </Column>
      );
    };
    
    AccordionGroup.displayName = "AccordionGroup";
    export { AccordionGroup };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Arrow.module.scss
    ```scss
    .arrowContainer {
        transition: var(--transition-micro-medium);
        height: var(--static-space-16);
        width: var(--static-space-0);
        visibility: hidden;
    }
    
    .arrowHead {
        transition: var(--transition-micro-medium);
        width: var(--static-space-0);
        transition-delay: 0.2s;
        right: 0;
        transform-origin: right center;
        transform: rotate(0);
    }
    
    .active {
        width: var(--static-space-16);
        visibility: visible;
    
        .arrow {
            width: var(--static-space-12);
        }
    
        .arrowHead {
            width: var(--static-space-8);
        }
    
        .arrowHead:nth-child(2) {
            transform: rotate(45deg);
        }
    
        .arrowHead:nth-child(3) {
            transform: rotate(-45deg);
        }
    }
    
    .onSolid {
        background: var(--brand-on-solid-strong);
    }
    
    .onBackground {
        background: var(--brand-on-background-strong);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Arrow.tsx
    ```tsx
    "use client";
    
    import { useEffect, useRef } from "react";
    import classNames from "classnames";
    import styles from "./Arrow.module.scss";
    import { Flex } from ".";
    
    interface ArrowProps {
      trigger: string;
      scale?: number;
      color?: "onBackground" | "onSolid";
      style?: React.CSSProperties;
      className?: string;
    }
    
    const Arrow: React.FC<ArrowProps> = ({
      trigger,
      scale = 0.8,
      color = "onBackground",
      style,
      className,
    }) => {
      const ref = useRef<HTMLDivElement>(null);
    
      useEffect(() => {
        const triggerElement = document.querySelector(trigger);
    
        if (triggerElement && ref.current) {
          const handleMouseOver = () => {
            ref.current?.classList.add(styles.active);
          };
    
          const handleMouseOut = () => {
            ref.current?.classList.remove(styles.active);
          };
    
          triggerElement.addEventListener("mouseenter", handleMouseOver);
          triggerElement.addEventListener("mouseleave", handleMouseOut);
    
          return () => {
            triggerElement.removeEventListener("mouseenter", handleMouseOver);
            triggerElement.removeEventListener("mouseleave", handleMouseOut);
          };
        }
      }, [trigger]);
    
      return (
        <Flex
          ref={ref}
          position="relative"
          vertical="center"
          horizontal="center"
          className={classNames(styles.arrowContainer, className)}
          style={{
            transform: `scale(${scale})`,
            ...style,
          }}
        >
          <Flex className={classNames(styles.arrow, styles[color])} height={0.1} />
          <Flex
            position="absolute"
            className={classNames(styles.arrowHead, styles[color])}
            height={0.0875}
          />
          <Flex
            position="absolute"
            className={classNames(styles.arrowHead, styles[color])}
            height={0.0875}
          />
        </Flex>
      );
    };
    
    Arrow.displayName = "Arrow";
    export { Arrow };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Avatar.module.scss
    ```scss
    .xs {
        width: var(--static-space-20);
        height: var(--static-space-20);
        min-width: var(--static-space-20);
        min-height: var(--static-space-20);
    }
    
    .s {
        width: var(--static-space-24);
        height: var(--static-space-24);
        min-width: var(--static-space-24);
        min-height: var(--static-space-24);
    }
    
    .m {
        width: var(--static-space-32);
        height: var(--static-space-32);
        min-width: var(--static-space-32);
        min-height: var(--static-space-32);
    }
    
    .l {
        width: var(--static-space-48);
        height: var(--static-space-48);
        min-width: var(--static-space-48);
        min-height: var(--static-space-48);
    }
    
    .xl {
        width: var(--static-space-160);
        height: var(--static-space-160);
        min-width: var(--static-space-160);
        min-height: var(--static-space-160);
    
        .position {
            bottom: var(--static-space-16);
            right: var(--static-space-16);
        }
    }
    
    .value {
        white-space: nowrap;
        overflow: hidden;
        user-select: none;
    }
    
    .indicator {
        box-sizing: content-box;
        bottom: 0;
        right: 0;
        transform: translateX(var(--static-space-2)) translateY(var(--static-space-2));
    }
    
    .image {
        object-position: center;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Avatar.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    
    import { Skeleton, Icon, Text, StatusIndicator, Flex, SmartImage } from ".";
    import styles from "./Avatar.module.scss";
    
    interface AvatarProps extends React.ComponentProps<typeof Flex> {
      size?: "xs" | "s" | "m" | "l" | "xl" | number;
      value?: string;
      src?: string;
      loading?: boolean;
      empty?: boolean;
      statusIndicator?: {
        color: "green" | "yellow" | "red" | "gray";
      };
      style?: React.CSSProperties;
      className?: string;
    }
    
    const sizeMapping: Record<"xs" | "s" | "m" | "l" | "xl", number> = {
      xs: 20,
      s: 24,
      m: 32,
      l: 48,
      xl: 160,
    };
    
    const statusIndicatorSizeMapping: Record<"xs" | "s" | "m" | "l" | "xl", "s" | "m" | "l"> = {
      xs: "s",
      s: "s",
      m: "m",
      l: "m",
      xl: "l",
    };
    
    const Avatar = forwardRef<HTMLDivElement, AvatarProps>(
      (
        { size = "m", value, src, loading, empty, statusIndicator, className, style = {}, ...rest },
        ref,
      ) => {
        const sizeInRem = typeof size === "number" ? `${size}rem` : undefined;
        const sizeStyle = sizeInRem
          ? {
              width: sizeInRem,
              height: sizeInRem,
              minWidth: sizeInRem,
              minHeight: sizeInRem,
              ...style,
            }
          : style;
        const isEmpty = empty || (!src && !value);
    
        if (value && src) {
          throw new Error("Avatar cannot have both 'value' and 'src' props.");
        }
    
        if (loading) {
          return (
            <Skeleton
              {...rest}
              border="neutral-medium"
              shape="circle"
              width={typeof size === "number" ? "m" : size}
              height={typeof size === "number" ? "m" : size}
              className={`${styles.avatar} ${className}`}
              aria-busy="true"
              aria-label="Loading avatar"
            />
          );
        }
    
        const renderContent = () => {
          if (isEmpty) {
            return (
              <Icon
                onBackground="neutral-medium"
                name="person"
                size="m"
                style={typeof size === "number" ? { fontSize: `${size}rem` } : undefined}
                className={styles.icon}
                aria-label="Empty avatar"
              />
            );
          }
    
          if (src) {
            return (
              <SmartImage
                radius="full"
                src={src}
                fill
                alt="Avatar"
                sizes={typeof size === "string" ? `${sizeMapping[size]}px` : `${size * 16}px`}
                className={styles.image}
              />
            );
          }
    
          if (value) {
            return (
              <Text
                as="span"
                onBackground="neutral-weak"
                variant={`body-default-${typeof size === "string" ? size : "m"}`}
                className={styles.value}
                aria-label={`Avatar with initials ${value}`}
              >
                {value}
              </Text>
            );
          }
    
          return null;
        };
    
        return (
          <Flex
            ref={ref}
            role="img"
            horizontal="center"
            vertical="center"
            radius="full"
            border="neutral-strong"
            background="surface"
            style={sizeStyle}
            className={`${styles.avatar} ${typeof size === "string" ? styles[size] : ""} ${className || ""}`}
            {...rest}
          >
            {renderContent()}
            {statusIndicator && (
              <StatusIndicator
                position="absolute"
                size={typeof size === "string" ? statusIndicatorSizeMapping[size] : "l"}
                color={statusIndicator.color}
                className={`${styles.className || ""} ${styles.indicator} ${size === "xl" || (typeof size === "number" && size >= 10) ? styles.position : ""}`}
                aria-label={`Status: ${statusIndicator.color}`}
              />
            )}
          </Flex>
        );
      },
    );
    
    Avatar.displayName = "Avatar";
    
    export { Avatar };
    export type { AvatarProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/AvatarGroup.module.scss
    ```scss
    .avatarGroup {
        z-index: 0;
    }
    
    .avatar {
        margin-left: calc(-1 * var(--static-space-8));
    
        &:first-child {
            margin-left: 0;
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/AvatarGroup.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    
    import { Avatar, AvatarProps, Flex } from ".";
    import styles from "./AvatarGroup.module.scss";
    import classNames from "classnames";
    
    interface AvatarGroupProps extends React.ComponentProps<typeof Flex> {
      avatars: AvatarProps[];
      size?: "xs" | "s" | "m" | "l" | "xl";
      reverse?: boolean;
      limit?: number;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>(
      ({ avatars, size = "m", reverse = false, limit, className, style, ...rest }, ref) => {
        const displayedAvatars = limit ? avatars.slice(0, limit) : avatars;
        const remainingCount = limit && avatars.length > limit ? avatars.length - limit : 0;
    
        return (
          <Flex
            vertical="center"
            ref={ref}
            className={classNames(styles.avatarGroup, className)}
            style={style}
            zIndex={0}
            {...rest}
          >
            {displayedAvatars.map((avatarProps, index) => (
              <Avatar
                key={index}
                size={size}
                {...avatarProps}
                className={styles.avatar}
                style={{
                  ...avatarProps.style,
                  zIndex: reverse ? displayedAvatars.length - index : index + 1,
                }}
              />
            ))}
            {remainingCount > 0 && (
              <Avatar
                value={`+${remainingCount}`}
                className={styles.avatar}
                size={size}
                style={{
                  ...style,
                  zIndex: reverse ? -1 : displayedAvatars.length + 1,
                }}
              />
            )}
          </Flex>
        );
      },
    );
    
    AvatarGroup.displayName = "AvatarGroup";
    
    export { AvatarGroup };
    export type { AvatarGroupProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Background.module.scss
    ```scss
    .mask {
      mask-size: 100% 100%;
      mask-image: radial-gradient(
        var(--mask-radius) at var(--mask-position-x) var(--mask-position-y),
        black 0%,
        transparent 100%
      );
    }
    
    .gradient {
      background: radial-gradient(
            ellipse var(--gradient-width) var(--gradient-height) at var(--gradient-position-x) var(--gradient-position-y),
            var(--gradient-color-start),
            var(--gradient-color-end)
          );
      width: 400%;
      height: 400%;
      left: -150%;
      top: -150%;
      transform: rotate(var(--gradient-tilt));
      transform-origin: center;
    }
    
    .lines {
      background-size: var(--lines-size) var(--lines-size);
      background-position: center;
    }
    
    .dots {
      background-image: radial-gradient(var(--dots-color) 1px, var(--static-transparent) 1px);
      background-size: var(--dots-size) var(--dots-size);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Background.tsx
    ```tsx
    "use client";
    
    import React, { CSSProperties, forwardRef, useEffect, useRef, useState } from "react";
    import { SpacingToken } from "../types";
    import { Flex } from "./Flex";
    import { DisplayProps } from "../interfaces";
    import styles from "./Background.module.scss";
    import classNames from "classnames";
    
    function setRef<T>(ref: React.Ref<T> | undefined, value: T | null) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref && "current" in ref) {
        (ref as React.MutableRefObject<T | null>).current = value;
      }
    }
    
    interface MaskProps {
      cursor?: boolean;
      x?: number;
      y?: number;
      radius?: number;
    }
    
    interface GradientProps {
      display?: boolean;
      opacity?: DisplayProps["opacity"];
      x?: number;
      y?: number;
      width?: number;
      height?: number;
      tilt?: number;
      colorStart?: string;
      colorEnd?: string;
    }
    
    interface DotsProps {
      display?: boolean;
      opacity?: DisplayProps["opacity"];
      color?: string;
      size?: SpacingToken;
    }
    
    interface GridProps {
      display?: boolean;
      opacity?: DisplayProps["opacity"];
      color?: string;
      width?: string;
      height?: string;
    }
    
    interface LinesProps {
      display?: boolean;
      opacity?: DisplayProps["opacity"];
      size?: SpacingToken;
      thickness?: number;
      angle?: number;
      color?: string;
    }
    
    interface BackgroundProps extends React.ComponentProps<typeof Flex> {
      gradient?: GradientProps;
      dots?: DotsProps;
      grid?: GridProps;
      lines?: LinesProps;
      mask?: MaskProps;
      className?: string;
      style?: React.CSSProperties;
      children?: React.ReactNode;
    }
    
    const Background = forwardRef<HTMLDivElement, BackgroundProps>(
      (
        {
          gradient = {},
          dots = {},
          grid = {},
          lines = {},
          mask = {},
          children,
          className,
          style,
          ...rest
        },
        forwardedRef,
      ) => {
        const dotsColor = dots.color ?? "brand-on-background-weak";
        const dotsSize = "var(--static-space-" + (dots.size ?? "24") + ")";
    
        const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });
        const [smoothPosition, setSmoothPosition] = useState({ x: 0, y: 0 });
        const backgroundRef = useRef<HTMLDivElement>(null);
    
        useEffect(() => {
          setRef(forwardedRef, backgroundRef.current);
        }, [forwardedRef]);
    
        useEffect(() => {
          const handleMouseMove = (event: MouseEvent) => {
            if (backgroundRef.current) {
              const rect = backgroundRef.current.getBoundingClientRect();
              setCursorPosition({
                x: event.clientX - rect.left,
                y: event.clientY - rect.top,
              });
            }
          };
    
          document.addEventListener("mousemove", handleMouseMove);
    
          return () => {
            document.removeEventListener("mousemove", handleMouseMove);
          };
        }, []);
    
        useEffect(() => {
          let animationFrameId: number;
    
          const updateSmoothPosition = () => {
            setSmoothPosition((prev) => {
              const dx = cursorPosition.x - prev.x;
              const dy = cursorPosition.y - prev.y;
              const easingFactor = 0.05;
    
              return {
                x: Math.round(prev.x + dx * easingFactor),
                y: Math.round(prev.y + dy * easingFactor),
              };
            });
            animationFrameId = requestAnimationFrame(updateSmoothPosition);
          };
    
          if (mask.cursor) {
            animationFrameId = requestAnimationFrame(updateSmoothPosition);
          }
    
          return () => {
            cancelAnimationFrame(animationFrameId);
          };
        }, [cursorPosition, mask]);
    
        const maskStyle = (): CSSProperties => {
          if (!mask) return {};
    
          if (mask.cursor) {
            return {
              "--mask-position-x": `${smoothPosition.x}px`,
              "--mask-position-y": `${smoothPosition.y}px`,
              "--mask-radius": `${mask.radius || 50}vh`,
            } as CSSProperties;
          }
    
          if (mask.x != null && mask.y != null) {
            return {
              "--mask-position-x": `${mask.x}%`,
              "--mask-position-y": `${mask.y}%`,
              "--mask-radius": `${mask.radius || 50}vh`,
            } as CSSProperties;
          }
    
          return {};
        };
    
        const remap = (
          value: number,
          inputMin: number,
          inputMax: number,
          outputMin: number,
          outputMax: number,
        ) => {
          return ((value - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;
        };
    
        const adjustedX = gradient.x != null ? remap(gradient.x, 0, 100, 37.5, 62.5) : 50;
        const adjustedY = gradient.y != null ? remap(gradient.y, 0, 100, 37.5, 62.5) : 50;
    
        return (
          <Flex
            ref={backgroundRef}
            fill
            className={classNames(mask && styles.mask, className)}
            top="0"
            left="0"
            zIndex={0}
            overflow="hidden"
            style={{
              ...maskStyle(),
              ...style,
            }}
            {...rest}
          >
            {gradient.display && (
              <Flex
                position="absolute"
                className={styles.gradient}
                opacity={gradient.opacity}
                pointerEvents="none"
                style={{
                  ["--gradient-position-x" as string]: `${adjustedX}%`,
                  ["--gradient-position-y" as string]: `${adjustedY}%`,
                  ["--gradient-width" as string]:
                    gradient.width != null ? `${gradient.width / 4}%` : "25%",
                  ["--gradient-height" as string]:
                    gradient.height != null ? `${gradient.height / 4}%` : "25%",
                  ["--gradient-tilt" as string]: gradient.tilt != null ? `${gradient.tilt}deg` : "0deg",
                  ["--gradient-color-start" as string]: gradient.colorStart
                    ? `var(--${gradient.colorStart})`
                    : "var(--brand-solid-strong)",
                  ["--gradient-color-end" as string]: gradient.colorEnd
                    ? `var(--${gradient.colorEnd})`
                    : "var(--brand-solid-weak)",
                }}
              />
            )}
            {dots.display && (
              <Flex
                position="absolute"
                top="0"
                left="0"
                fill
                pointerEvents="none"
                className={styles.dots}
                opacity={dots.opacity}
                style={
                  {
                    "--dots-color": `var(--${dotsColor})`,
                    "--dots-size": dotsSize,
                  } as React.CSSProperties
                }
              />
            )}
            {lines.display && (
              <Flex
                position="absolute"
                top="0"
                left="0"
                fill
                pointerEvents="none"
                className={styles.lines}
                opacity={lines.opacity}
                style={
                  {
                    "--lines-angle": `${lines.angle ?? 45}deg`,
                    "--lines-color": `var(--${lines.color ?? "brand-on-background-weak"})`,
                    "--lines-thickness": `${lines.thickness ?? 0.5}px`,
                    "--lines-spacing": `var(--static-space-${lines.size ?? "24"})`,
                    background: `
                    repeating-linear-gradient(
                      var(--lines-angle),
                      var(--static-transparent),
                      var(--static-transparent) calc(var(--lines-spacing) - var(--lines-thickness)),
                      var(--lines-color) calc(var(--lines-spacing) - var(--lines-thickness)),
                      var(--lines-color) var(--lines-spacing)
                    )
                  `,
                  } as React.CSSProperties
                }
              />
            )}
            {grid.display && (
              <Flex
                position="absolute"
                top="0"
                left="0"
                fill
                pointerEvents="none"
                className={styles.grid}
                opacity={grid.opacity}
                style={{
                  backgroundSize: `
                    ${grid.width || "var(--static-space-32)"}
                    ${grid.height || "var(--static-space-32)"}`,
                  backgroundPosition: "0 0",
                  backgroundImage: `
                    linear-gradient(
                      90deg,
                      var(--${grid.color || "brand-on-background-weak"}) 0,
                      var(--${grid.color || "brand-on-background-weak"}) 1px,
                      var(--static-transparent) 1px,
                      var(--static-transparent) ${grid.width || "var(--static-space-32)"}
                    ),
                    linear-gradient(
                      0deg,
                      var(--${grid.color || "brand-on-background-weak"}) 0,
                      var(--${grid.color || "brand-on-background-weak"}) 1px,
                      var(--static-transparent) 1px,
                      var(--static-transparent) ${grid.height || "var(--static-space-32)"}
                    )
                  `,
                }}
              />
            )}
            {children}
          </Flex>
        );
      },
    );
    
    Background.displayName = "Background";
    
    export { Background };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Badge.module.scss
    ```scss
    .animation {
        position: relative;
        overflow: hidden;
    
        &::before {
            content: '';
            opacity: 0;
            border-radius: var(--radius-full);
            position: absolute;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                120deg,
                transparent 20%,
                var(--brand-alpha-medium) 50%,
                transparent 80%
            );
            transform: skewX(-20deg);
            animation: shineDefault 9s ease-in-out infinite;
        }
    
        &:hover {
            &::before {
                animation: shineHover 3s ease-in-out infinite;
            }
        }
    }
    
    @keyframes shineDefault {
        0% {
            left: -100%;
        }
        1% {
            left: -100%;
            opacity: 1;
        }
        15% {
            left: 100%;
            opacity: 1;
        }
        16% {
            opacity: 0;
        }
        100% {
            left: -100%;
        }
    }
    
    @keyframes shineHover {
        0% {
            left: -100%;
        }
        1% {
            left: -100%;
            opacity: 1;
        }
        45% {
            left: 100%;
            opacity: 1;
        }
        46% {
            opacity: 0;
        }
        100% {
            left: -100%;
        }
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Badge.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import { Arrow, Flex, Icon, SmartLink, Text } from ".";
    
    import styles from "./Badge.module.scss";
    import { IconName } from "../icons";
    
    interface BadgeProps extends React.ComponentProps<typeof Flex> {
      title?: string;
      icon?: IconName;
      arrow?: boolean;
      children?: React.ReactNode;
      href?: string;
      effect?: boolean;
    }
    
    const Badge = forwardRef<HTMLDivElement | HTMLAnchorElement, BadgeProps>(
      (
        { title, icon, arrow = true, children, href, effect = true, ...rest },
        ref
      ) => {
        const content = (
          <Flex
            id="badge"
            paddingX="20"
            paddingY="12"
            fitWidth
            className={effect ? styles.animation : undefined}
            vertical="center"
            radius="full"
            background="neutral-weak"
            border="brand-alpha-medium"
            shadow="l"
            {...rest}
          >
            {icon && (
              <Icon
                className="mr-8"
                size="s"
                name={icon}
                onBackground="brand-medium"
              />
            )}
            {title && (
              <Text onBackground="brand-strong" variant="label-strong-s">
                {title}
              </Text>
            )}
            {children}
            {arrow && <Arrow trigger="#badge" />}
          </Flex>
        );
    
        if (href) {
          return (
            <SmartLink
              unstyled
              style={{
                borderRadius: "var(--radius-full)",
              }}
              href={href}
              ref={ref as React.Ref<HTMLAnchorElement>}
            >
              {content}
            </SmartLink>
          );
        }
    
        return React.cloneElement(content, {
          ref: ref as React.Ref<HTMLDivElement>,
        });
      }
    );
    
    Badge.displayName = "Badge";
    export { Badge };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Button.module.scss
    ```scss
    .button {
        display: flex;
        align-items: center;
        position: relative;
        user-select: none;
        padding: 0;
        white-space: nowrap;
        text-decoration: none;
        -webkit-tap-highlight-color: transparent;
        transition: var(--transition-micro-medium);
    
        &:hover, &:focus {
            z-index: 1;
        }
    
        &:disabled {
            box-shadow: none;
            background: var(--neutral-solid-weak);
            color: var(--neutral-on-solid-weak);
            border: none;
            pointer-events: none;
            cursor: not-allowed;
        }
    }
    
    .primary {
        box-shadow: inset 0 var(--solid-inset-distance) var(--solid-inset-size) var(--solid-inset-color-brand);
        background: var(--brand-solid-medium);
        border-style: solid;
        border-width: var(--solid-border-width);
        border-color: var(--solid-border-color-brand);
        color: var(--brand-on-solid-strong);
    
        &:hover, &:focus {
            background: var(--brand-solid-strong);
        }
    }
    
    .secondary {
        box-shadow: inset 0 var(--solid-inset-distance) var(--solid-inset-size) var(--solid-inset-color-neutral);
        background: var(--neutral-background-medium);
        border-style: solid;
        border: 1px solid var(--neutral-border-medium);
        color: var(--neutral-on-background-strong);
    
        &:hover, &:focus {
            background: var(--neutral-background-strong);
            border-color: var(--neutral-border-strong);
        }
    }
    
    .tertiary {
        background: var(--static-transparent);
        color: var(--neutral-on-background-strong);
        border: 1px solid var(--static-transparent);
    
        &:hover, &:focus {
            border: 1px solid var(--neutral-border-medium);
        }
    
        &:disabled {
            background: var(--static-transparent);
            color: var(--neutral-on-background-weak);
        }
    }
    
    .ghost {
        border: none;
        background: var(--static-transparent);
        color: var(--neutral-on-background-medium);
    
        &:hover, &:focus {
            color: var(--neutral-on-background-strong);
        }
    }
    
    .danger {
        box-shadow: inset 0 var(--solid-inset-distance) var(--solid-inset-size) var(--solid-inset-color-danger);
        background: var(--danger-solid-medium);
        border-style: solid;
        border-width: var(--solid-border-width);
        border-color: var(--solid-border-color-danger);
        color: var(--danger-on-solid-strong);
    
        &:hover, &:focus {
            background: var(--danger-solid-strong);
        }
    }
    
    .s {
        padding: var(--static-space-4) var(--static-space-8);
        min-height: var(--static-space-32);
        height: var(--static-space-32);
        gap: var(--static-space-4);
    }
    
    .m {
        padding: var(--static-space-8) var(--static-space-12);
        min-height: var(--static-space-40);
        height: var(--static-space-40);
        gap: var(--static-space-4);
    }
    
    .l {
        padding: var(--static-space-12) var(--static-space-20);
        min-height: var(--static-space-48);
        height: var(--static-space-48);
        gap: var(--static-space-8);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Button.tsx
    ```tsx
    "use client";
    
    import React, { ReactNode, forwardRef } from "react";
    import { ElementType } from "./ElementType";
    import classNames from "classnames";
    
    import { Spinner, Icon, Arrow, Flex } from ".";
    import styles from "./Button.module.scss";
    import { IconName } from "../icons";
    
    interface CommonProps {
      variant?: "primary" | "secondary" | "tertiary" | "danger";
      size?: "s" | "m" | "l";
      radius?:
        | "none"
        | "top"
        | "right"
        | "bottom"
        | "left"
        | "top-left"
        | "top-right"
        | "bottom-right"
        | "bottom-left";
      label?: string;
      weight?: "default" | "strong";
      prefixIcon?: IconName;
      suffixIcon?: IconName;
      loading?: boolean;
      fillWidth?: boolean;
      justifyContent?: "start" | "center" | "end" | "space-between";
      children?: ReactNode;
      href?: string;
      className?: string;
      style?: React.CSSProperties;
      id?: string;
      arrowIcon?: boolean;
    }
    
    export type ButtonProps = CommonProps &
      React.ButtonHTMLAttributes<HTMLButtonElement>;
    export type AnchorProps = CommonProps &
      React.AnchorHTMLAttributes<HTMLAnchorElement>;
    
    const Button = forwardRef<HTMLButtonElement, ButtonProps | AnchorProps>(
      (
        {
          variant = "primary",
          size = "m",
          radius,
          label,
          weight = "strong",
          children,
          prefixIcon,
          suffixIcon,
          loading = false,
          fillWidth = false,
          justifyContent = "center",
          href,
          id,
          arrowIcon = false,
          className,
          style,
          ...props
        },
        ref
      ) => {
        const iconSize = size === "l" ? "s" : size === "m" ? "s" : "xs";
        const radiusSize = size === "s" || size === "m" ? "m" : "l";
    
        return (
          <ElementType
            id={id}
            href={href}
            ref={ref}
            className={classNames(
              styles.button,
              styles[variant],
              styles[size],
              radius === "none"
                ? "radius-none"
                : radius
                ? `radius-${radiusSize}-${radius}`
                : `radius-${radiusSize}`,
              "text-decoration-none",
              "button",
              "cursor-interactive",
              {
                ["fill-width"]: fillWidth,
                ["fit-width"]: !fillWidth,
                ["justify-" + justifyContent]: justifyContent,
              },
              className
            )}
            style={style}
            {...props}
          >
            {prefixIcon && !loading && <Icon name={prefixIcon} size={iconSize} />}
            {loading && <Spinner size={size} />}
            {(label || children) && (
              <Flex
                paddingX="4"
                paddingY="0"
                textWeight={weight}
                textSize={size}
                className="font-label"
              >
                {label || children}
              </Flex>
            )}
            {arrowIcon && (
              <Arrow
                style={{
                  marginLeft: "calc(-1 * var(--static-space-4))",
                }}
                trigger={"#" + id}
                scale={size === "s" ? 0.8 : size === "m" ? 0.9 : 1}
                color={variant === "primary" ? "onSolid" : "onBackground"}
              />
            )}
            {suffixIcon && <Icon name={suffixIcon} size={iconSize} />}
          </ElementType>
        );
      }
    );
    
    Button.displayName = "Button";
    export { Button };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Card.module.scss
    ```scss
    .card {
        &:hover {
            background-color: var(--neutral-alpha-medium);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Card.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import { Flex } from ".";
    import styles from "./Card.module.scss";
    import { ElementType } from "./ElementType";
    import classNames from "classnames";
    
    interface CardProps extends React.ComponentProps<typeof Flex> {
      children?: React.ReactNode;
      href?: string;
      onClick?: () => void;
    }
    
    const Card = forwardRef<HTMLDivElement, CardProps>(
      ({ children, href, onClick, style, className, ...rest }, ref) => {
        return (
          <ElementType
            tabIndex={0}
            className={classNames(
              "reset-button-styles",
              "display-flex",
              "fill-width",
              (onClick || href) && "focus-ring",
              (onClick || href) && "radius-l",
            )}
            href={href}
            onClick={onClick ? onClick : () => {}}
            role="button"
            ref={ref}
          >
            <Flex
              background="surface"
              onBackground="neutral-strong"
              transition="macro-medium"
              border="neutral-medium"
              cursor="interactive"
              align="left"
              className={styles.card}
              onClick={onClick}
              {...rest}
            >
              {children}
            </Flex>
          </ElementType>
        );
      },
    );
    
    Card.displayName = "Card";
    export { Card };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Carousel.tsx
    ```tsx
    "use client";
    
    import { Flex, RevealFx, Scroller, SmartImage } from ".";
    import { useEffect, useState, useRef } from "react";
    
    interface Image {
      src: string;
      alt: string;
    }
    
    interface CarouselProps extends React.ComponentProps<typeof Flex> {
      images: Image[];
      indicator?: "line" | "thumbnail";
      aspectRatio?: string;
      sizes?: string;
      revealedByDefault?: boolean;
    }
    
    const Carousel: React.FC<CarouselProps> = ({
      images = [],
      indicator = "line",
      aspectRatio = "16 / 9",
      sizes,
      revealedByDefault = false,
      ...rest
    }) => {
      const [activeIndex, setActiveIndex] = useState<number>(0);
      const [isTransitioning, setIsTransitioning] = useState(revealedByDefault);
      const [initialTransition, setInitialTransition] = useState(revealedByDefault);
      const nextImageRef = useRef<HTMLImageElement | null>(null);
      const transitionTimeoutRef = useRef<NodeJS.Timeout | undefined>(undefined);
    
      const preloadNextImage = (nextIndex: number) => {
        if (nextIndex >= 0 && nextIndex < images.length) {
          nextImageRef.current = new Image();
          nextImageRef.current.src = images[nextIndex].src;
        }
      };
    
      const handleImageClick = () => {
        if (images.length > 1) {
          const nextIndex = (activeIndex + 1) % images.length;
          handleControlClick(nextIndex);
        }
      };
    
      const handleControlClick = (nextIndex: number) => {
        if (nextIndex !== activeIndex && !transitionTimeoutRef.current) {
          preloadNextImage(nextIndex);
    
          setIsTransitioning(false);
    
          transitionTimeoutRef.current = setTimeout(() => {
            setActiveIndex(nextIndex);
    
            setTimeout(() => {
              setIsTransitioning(true);
              transitionTimeoutRef.current = undefined;
            }, 300);
          }, 800);
        }
      };
    
      useEffect(() => {
        if (!revealedByDefault && !initialTransition) {
          setIsTransitioning(true);
          setInitialTransition(true);
        }
        return () => {
          if (transitionTimeoutRef.current) {
            clearTimeout(transitionTimeoutRef.current);
          }
        };
      }, [revealedByDefault, initialTransition]);
    
      if (images.length === 0) {
        return null;
      }
    
      return (
        <Flex fillWidth gap="12" direction="column" {...rest}>
          <RevealFx
            onClick={handleImageClick}
            fillWidth
            trigger={isTransitioning}
            translateY="16"
            aspectRatio={aspectRatio}
            speed="fast"
          >
            <SmartImage
              sizes={sizes}
              priority
              radius="l"
              border="neutral-alpha-weak"
              alt={images[activeIndex]?.alt}
              aspectRatio={aspectRatio}
              src={images[activeIndex]?.src}
              style={{
                ...(images.length > 1 && {
                  cursor: "pointer",
                }),
              }}
            />
          </RevealFx>
          {images.length > 1 && (
            <>
              {indicator === "line" ? (
                <Flex gap="4" paddingX="s" fillWidth horizontal="center">
                  {images.map((_, index) => (
                    <Flex
                      key={index}
                      onClick={() => handleControlClick(index)}
                      style={{
                        background:
                          activeIndex === index
                            ? "var(--neutral-on-background-strong)"
                            : "var(--neutral-alpha-medium)",
                        transition: "background 0.3s ease",
                      }}
                      cursor="interactive"
                      fillWidth
                      height="2"
                    ></Flex>
                  ))}
                </Flex>
              ) : (
                <Scroller fillWidth gap="4" onItemClick={handleControlClick}>
                  {images.map((image, index) => (
                    <Flex
                      key={index}
                      style={{
                        border: activeIndex === index ? "2px solid var(--brand-solid-strong)" : "none",
                        borderRadius: "var(--radius-m-nest-4)",
                        transition: "border 0.3s ease",
                      }}
                      cursor="interactive"
                      padding="4"
                      width="80"
                      height="80"
                    >
                      <SmartImage
                        alt={image.alt}
                        aspectRatio="1 / 1"
                        sizes="120px"
                        src={image.src}
                        cursor="interactive"
                        radius="m"
                        transition="macro-medium"
                      />
                    </Flex>
                  ))}
                </Scroller>
              )}
            </>
          )}
        </Flex>
      );
    };
    
    Carousel.displayName = "Carousel";
    export { Carousel };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Checkbox.tsx
    ```tsx
    "use client";
    
    import React, { useState, useEffect, forwardRef } from "react";
    import classNames from "classnames";
    import { Flex, Icon, InteractiveDetails, InteractiveDetailsProps } from ".";
    import styles from "./SharedInteractiveStyles.module.scss";
    
    interface CheckboxProps
      extends Omit<InteractiveDetailsProps, "onClick">,
        React.InputHTMLAttributes<HTMLInputElement> {
      isChecked?: boolean;
      isIndeterminate?: boolean;
      onToggle?: () => void;
    }
    
    const generateId = () => `checkbox-${Math.random().toString(36).substring(2, 9)}`;
    
    const Checkbox: React.FC<CheckboxProps> = forwardRef<HTMLInputElement, CheckboxProps>(
      (
        {
          style,
          className,
          isChecked: controlledIsChecked,
          isIndeterminate = false,
          onToggle,
          disabled,
          ...props
        },
        ref,
      ) => {
        const [isChecked, setIsChecked] = useState(controlledIsChecked || false);
        const [checkboxId] = useState(generateId());
    
        useEffect(() => {
          if (controlledIsChecked !== undefined) {
            setIsChecked(controlledIsChecked);
          }
        }, [controlledIsChecked]);
    
        const toggleItem = () => {
          if (disabled) return;
          if (onToggle) {
            onToggle();
          } else {
            setIsChecked(!isChecked);
          }
        };
    
        const handleKeyDown = (event: React.KeyboardEvent) => {
          if (disabled) return;
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            toggleItem();
          }
        };
    
        return (
          <Flex
            vertical="center"
            gap="16"
            className={classNames(styles.container, className, {
              [styles.disabled]: disabled,
            })}
            style={style}
          >
            <input
              type="checkbox"
              ref={ref}
              aria-checked={
                isIndeterminate
                  ? "mixed"
                  : controlledIsChecked !== undefined
                    ? controlledIsChecked
                    : isChecked
              }
              checked={controlledIsChecked !== undefined ? controlledIsChecked : isChecked}
              onChange={toggleItem}
              disabled={disabled}
              className={styles.hidden}
              tabIndex={-1}
            />
            <Flex
              style={{
                borderRadius: "min(var(--static-space-4), var(--radius-xs))",
              }}
              role="checkbox"
              position="relative"
              tabIndex={0}
              horizontal="center"
              vertical="center"
              radius="xs"
              aria-checked={
                isIndeterminate
                  ? "mixed"
                  : controlledIsChecked !== undefined
                    ? controlledIsChecked
                    : isChecked
              }
              aria-labelledby={checkboxId}
              onClick={toggleItem}
              onKeyDown={handleKeyDown}
              className={classNames(styles.element, {
                [styles.checked]:
                  controlledIsChecked !== undefined
                    ? controlledIsChecked || isIndeterminate
                    : isChecked,
                [styles.disabled]: disabled,
              })}
            >
              {(controlledIsChecked !== undefined ? controlledIsChecked : isChecked) &&
                !isIndeterminate && (
                  <Flex className={styles.icon}>
                    <Icon onSolid="brand-strong" name="check" size="xs" />
                  </Flex>
                )}
              {isIndeterminate && (
                <Flex className={styles.icon}>
                  <Icon onSolid="brand-strong" name="minus" size="xs" />
                </Flex>
              )}
            </Flex>
            {props.label && <InteractiveDetails id={checkboxId} {...props} onClick={toggleItem} />}
          </Flex>
        );
      },
    );
    
    Checkbox.displayName = "Checkbox";
    
    export { Checkbox };
    export type { CheckboxProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Chip.module.scss
    ```scss
    .chip {
        white-space: nowrap;
        user-select: none;
    
        &.selected {
            background: var(--brand-alpha-medium);
            color: var(--brand-on-background-medium);
    
            &:hover,
            &:focus {
                background: var(--brand-alpha-medium);
            }
    
            &:active {
                background: var(--brand-alpha-weak);
                color: var(--brand-on-background-weak);
            }
        }
    
        &.unselected {
            background: var(--neutral-alpha-weak);
            color: var(--neutral-on-background-medium);
    
            &:hover,
            &:focus {
                background: var(--neutral-alpha-medium);
            }
    
            &:active {
                background: var(--neutral-alpha-weak);
                color: var(--neutral-on-background-weak);
            }
        }
    
        &:disabled {
            background: var(--neutral-solid-weak);
            cursor: not-allowed;
        }
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Chip.tsx
    ```tsx
    "use client";
    
    import React, { ReactNode, MouseEventHandler, forwardRef } from "react";
    import classNames from "classnames";
    import { Text, Icon, IconButton, IconButtonProps, Flex } from ".";
    import styles from "./Chip.module.scss";
    import { IconName } from "../icons";
    
    interface ChipProps extends React.ComponentProps<typeof Flex> {
      label: string;
      selected?: boolean;
      prefixIcon?: IconName;
      onRemove?: () => void;
      onClick?: MouseEventHandler<HTMLDivElement>;
      children?: ReactNode;
      iconButtonProps?: Partial<IconButtonProps>;
      style?: React.CSSProperties;
      className?: string;
    }
    
    const Chip: React.FC<ChipProps> = forwardRef<HTMLDivElement, ChipProps>(
      (
        {
          label,
          selected = true,
          prefixIcon,
          onRemove,
          onClick,
          children,
          iconButtonProps = {},
          ...rest
        },
        ref
      ) => {
        const defaultIconButtonProps: IconButtonProps = {
          icon: "close",
          variant: "ghost",
          size: "s",
          tooltip: "Remove",
          onClick: (e) => {
            e.stopPropagation();
            if (onRemove) onRemove();
          },
        };
    
        const combinedIconButtonProps = {
          ...defaultIconButtonProps,
          ...iconButtonProps,
          onClick: (e: React.MouseEvent<HTMLButtonElement>) => {
            defaultIconButtonProps.onClick?.(e);
            iconButtonProps.onClick?.(e);
          },
        };
    
        const handleKeyDown: React.KeyboardEventHandler<HTMLDivElement> = (e) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            if (onClick) onClick(e as unknown as React.MouseEvent<HTMLDivElement>);
          }
        };
    
        return (
          <Flex
            ref={ref}
            fit
            vertical="center"
            radius="full"
            paddingX="8"
            paddingY="4"
            role="button"
            tabIndex={0}
            onClick={onClick}
            onKeyDown={handleKeyDown}
            aria-pressed={selected}
            cursor="interactive"
            transition="micro-medium"
            className={classNames(styles.chip, {
              [styles.selected]: selected,
              [styles.unselected]: !selected,
            })}
            {...rest}
          >
            {prefixIcon && <Icon name={prefixIcon} size="s" />}
            <Flex paddingX="8" paddingY="2">
              <Text variant="body-default-s">{label || children}</Text>
            </Flex>
            {onRemove && (
              <IconButton
                style={{
                  color: "inherit",
                }}
                {...combinedIconButtonProps}
              />
            )}
          </Flex>
        );
      }
    );
    
    Chip.displayName = "Chip";
    
    export { Chip };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ColorInput.tsx
    ```tsx
    "use client";
    
    import React, { useRef, forwardRef } from "react";
    import { Flex, Input, InputProps, IconButton, Icon } from ".";
    
    interface ColorInputProps extends Omit<InputProps, "onChange" | "value"> {
      value: string;
      onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    }
    
    const ColorInput = forwardRef<HTMLInputElement, ColorInputProps>(
      ({ label, id, value, onChange, ...props }, ref) => {
        const colorInputRef = useRef<HTMLInputElement>(null);
    
        const handleHexClick = () => {
          if (colorInputRef.current) {
            colorInputRef.current.click();
          }
        };
    
        const handleReset = () => {
          onChange({
            target: { value: "" },
          } as React.ChangeEvent<HTMLInputElement>);
        };
    
        return (
          <Input
            style={{ cursor: "pointer" }}
            id={id}
            ref={colorInputRef}
            label={label}
            type="color"
            value={value}
            {...props}
            hasPrefix={
              <Flex>
                <Flex
                  style={{
                    width: value ? "var(--static-space-0)" : "var(--static-space-20)",
                    transform: value ? "scale(0)" : "scale(1)",
                    opacity: value ? "0" : "1",
                    transition: "0.2s ease-in-out all",
                  }}
                >
                  <Flex padding="2">
                    <Icon size="xs" name="eyeDropper" onBackground="neutral-medium" />
                  </Flex>
                </Flex>
                <Flex
                  border="neutral-strong"
                  className={`prefix ${value ? "" : "hidden"}`}
                  onClick={handleHexClick}
                  height="20"
                  radius="xs"
                  style={{
                    backgroundColor: value,
                    cursor: "pointer",
                    width: value ? "var(--static-space-20)" : "var(--static-space-0)",
                    transform: value ? "scale(1)" : "scale(0)",
                    opacity: value ? "1" : "0",
                    transition: "0.2s ease-in-out all",
                  }}
                ></Flex>
              </Flex>
            }
            hasSuffix={
              <Flex
                className={`suffix ${value ? "" : "hidden"}`}
                position="absolute"
                style={{
                  left: "var(--static-space-48)",
                  cursor: "pointer",
                  width: "calc(100% - var(--static-space-48))",
                }}
              >
                <Flex
                  onClick={handleHexClick}
                  fillWidth
                  style={{
                    opacity: value ? "1" : "0",
                    transition: "opacity 0.2s ease-in-out",
                  }}
                >
                  {value}
                </Flex>
                {value && (
                  <IconButton
                    onClick={handleReset}
                    variant="secondary"
                    tooltip="Remove"
                    tooltipPosition="left"
                    icon="close"
                    style={{
                      position: "absolute",
                      right: "var(--static-space-12)",
                      transform: "translateY(-50%)",
                    }}
                  />
                )}
              </Flex>
            }
            onChange={onChange}
          />
        );
      },
    );
    
    ColorInput.displayName = "ColorInput";
    
    export { ColorInput };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Column.tsx
    ```tsx
    "use client";
    
    import { forwardRef } from "react";
    import { Flex } from ".";
    
    interface ColumnProps extends React.ComponentProps<typeof Flex> {
      children?: React.ReactNode;
    }
    
    const Column = forwardRef<HTMLDivElement, ColumnProps>(({ children, ...rest }, ref) => {
      return (
        <Flex direction="column" ref={ref} {...rest}>
          {children}
        </Flex>
      );
    });
    
    Column.displayName = "Column";
    export { Column };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/CompareImage.module.scss
    ```scss
    .hitArea {
      cursor: col-resize;
      transform: translateX(-50%);
    }
    
    .dragIcon {
      position: absolute;
      top: 50%;
      transform: translate(-50%, -50%);
      cursor: col-resize;
      z-index: 2;
      transition: none;
      pointer-events: auto;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DateInput.tsx
    ```tsx
    "use client";
    
    import React, { useState, useCallback, useEffect } from "react";
    import { Input, DropdownWrapper, Flex, DatePicker } from ".";
    
    interface DateInputProps extends Omit<React.ComponentProps<typeof Input>, "onChange" | "value"> {
      id: string;
      label: string;
      value?: Date;
      onChange?: (date: Date) => void;
      minHeight?: number;
      className?: string;
      style?: React.CSSProperties;
      timePicker?: boolean;
    }
    
    const formatDate = (date: Date, timePicker: boolean) => {
      const options: Intl.DateTimeFormatOptions = {
        year: "numeric",
        month: "short",
        day: "numeric",
        ...(timePicker && {
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
        }),
      };
    
      return date.toLocaleString("en-US", options);
    };
    
    export const DateInput: React.FC<DateInputProps> = ({
      id,
      label,
      value,
      onChange,
      error,
      minHeight,
      className,
      style,
      timePicker = false,
      ...rest
    }) => {
      const [isOpen, setIsOpen] = useState(false);
      const [inputValue, setInputValue] = useState(value ? formatDate(value, timePicker) : "");
    
      useEffect(() => {
        if (value) {
          setInputValue(formatDate(value, timePicker));
        }
      }, [value, timePicker]);
    
      const handleDateChange = useCallback(
        (date: Date) => {
          setInputValue(formatDate(date, timePicker));
          onChange?.(date);
          if (!timePicker) {
            setIsOpen(false);
          }
        },
        [onChange, timePicker],
      );
    
      const handleInputClick = useCallback(() => {
        setIsOpen(true);
      }, []);
    
      const trigger = (
        <Input
          className="cursor-interactive"
          style={{
            textOverflow: "ellipsis",
          }}
          id={id}
          label={label}
          value={inputValue}
          error={error}
          readOnly
          onClick={handleInputClick}
          {...rest}
        />
      );
    
      const dropdown = (
        <Flex padding="20">
          <DatePicker value={value} onChange={handleDateChange} timePicker={timePicker} />
        </Flex>
      );
    
      return (
        <DropdownWrapper
          fillWidth
          trigger={trigger}
          minHeight={minHeight}
          dropdown={dropdown}
          isOpen={isOpen}
          onOpenChange={setIsOpen}
          className={className}
          style={{ ...style }}
        />
      );
    };
    
    ```
    
    File: /Users/ttran/hookgen/src/app/favicon.ico
    ```ico
    âPNG
    
       
    IHDR         k¨XT   gAMA  ±è¸a   sRGB ÆŒÈ   	pHYs     öú  PLTEGpL0((+* ++*
    ++*,+*+**,,*,+,*,(+++*+**-+)
    )
    *
    -,,)()
    **
    *,*)**%***))+ˇˇˇ#8“”◊··Â·‚‰-2F-2E$8““◊KO`áäï•ßØñô¢imzilz¥∂ΩÚñò¢√≈ √ƒ ¥µΩKP`“”ÿ<ASim{x{áÒÚx{à¥∂ºx|á<@RzxÏ]   <tRNS   Ô`ﬂøﬂ_ø0@œêﬂÄÄoØÔœÄ@@pü†üèØêPppPOPØÄp@†`ü`êêP000`œ∞poˇ«9@  IDATx⁄Âùy{∑áe3±=^cb'%IöKZ V
    ›Ó’ÿ	õlP∏–ªÙ˚è&npΩÃxét~G£âœ_<<<ÿÔkÈhóîr•óáO€≠›JeuuUﬂƒ’+ï›V˚È„ó%uk£ÙÚik∑πÆSbΩπﬂ>||€ÿ7;ª´⁄(ö˚ù«∑£4îû∂ö⁄2ö≠√;9ˇÂ[´öÕù√úñÑRß≤Æ1Q©ÊÆ îÓV44*ù;π˙Ìµ@‰•l¬J˛|Ï˙_ÙÂËGQ˛óœ≈`≥´ƒŒcoÀævï™á¯+eÌ0 ’•∆˜NÅ{|Ø∏´˚^*®gÜ˚Y7ä•=ùqÏd™†≥Æ3èÎA∂•BAFÖ‡Æˆ&ÓfÒÛ7µG·æ‹’ûÖ€Bpß©ΩóÖ¿á‰?¡£•i˚ìbØ‡§¯óµ∑·¢T◊µ«à˜äæ“ûálkPz®Ωè˝¬rVâ†û~9õÎ:'ºIˇ:GÒh	”øpcê3~∏	˛ﬁ«œ√∑W1¸ˇ†Áª<ˇ«w˝h"˙Ô>@Û˜ÜˇâÊ‚¯ÏµØærÄ?R0Ù” òˇ„qî«gË`˛”haúb
     á/†_Ëu?Jâcl&ÿbè†˝ﬂ◊«Q‰÷@P˜i¸G·G‡çåJ√
    pÊf¡è6∞ÔIHÁG∞nW≤‚G®z– òÒÉ
    w2OÄ¶¸`Vâp/S~∞ÅΩl{¿6¸`è≤L v¸X∆i†ú=?÷@3≥Ä=?÷@€®¯¡è5Pœ§¯°öYT .?‘@€}‡ÛC
    ‘]W ?“@≈Ò√è4»È$äh †å	Ó{«4∞Á."˘Å“Û`◊G~úÅä£àÊ«ÿr“‚˘a*.
    Ä?Ã@Uæ »£î≈Ä? @U∏ »ÒÉîeÄ$?»@U¥ ¸/çíE íN˙í¸o ˚…í˙òcÄí0¸I}ÅMPw[Œ¿‘~¬-—a†ò¸ä9p&X∆¿‡~“∏yÅmÌ∑$Ï¸(≥
    |}—50≈ﬂ˚¿ÏÛ¸ﬂ≤˚?}I”¸}vèhúG˝?A≥¸Ï>aõo˙øbÊ˘πÊ¶GW ¸b‚¯π {Å„Ò¸L\
    òˇ	H‚gòÆˇÄç·í˘y⁄†07˛Xƒœ2P¡‘Äò˘®Å≈¸,D;ˇ4ê∆œ1 PÊø`“˘&Í@=ˇ2@·∑70—˙Ã2@„∑7∞≈,úˇ†Ú[hçlÃ≥
    –˘m
    îYç`Í¸?”Ä	ø≠Å#÷?XÃ¯-
    |#‡k°ıÜS~;-Î@\ˇ≤6`Œoe†i€ ØˇY∞·∑2P∞[1Xˇ¥2`«oc`Àj(l¥˛ka¿ñﬂ¬¿õ}aÜÎﬂ∆Ï˘Õ
    ÏZ‰@„ıC~cuÖd˘
    
    ¯ç
    Ls†’˛\~S?ˆ-˜øê
    ˘
    
    \˜€‚¸d~3-£FÄ±ˇâd √od`◊§`Ìˇ"@Òõ∏Ó‘Ã€ˇñj «?Ûa)À‰‰ë¿)sÇ?≈ íﬂ‡6ûÇ˙ë¯/œÿK<
    `˘£h@n7ùTÄ4h˛ËòX	æ°ÆâÀúâ‡¸Q4§v⁄Ú-@íÅã/˝œ]“ä@õ8vEx˙|ƒ˙˛\„˘©E†•û∏  ±
    ToiÊ/`€J.â=!“≤‡ ∑›gq›n,"55öÄ”»ç$?≠/PS§WQ°[ﬁí
    @˘£”¶D(N¢»ÖÅxse&`Ä˝b—˚¯èπ ÃÄ$ÄRN~≥ËL≤©]¸)≥°úuSã |ı&‡-˙´≈Uœ¯áºıX¿'˘D„∑Äò¸Ù«R	»YÄ'¡ÿ> o˛&¡œËØv˜)ÁËO˘/I@°ã¯è˘M>—¯—N:ˇu‚mWX˜]£
    CŒá√ãŒˇùd0v=!≤¯¸„â˚	⁄îÿ•Ô”Ã+8Gƒ)1⁄§ËPÑˇlî˜˚g"Œâì¢¥iÒìK<o‹Ï}8kvÙä8-Óra$q˝C‡¨yaÑ∏A‰‰Hê_¿ -\Ô§.é$˘ÒŒâX?π[OYˇ√0X'oê`~©‘ıO§j›#@ﬁ"ÛÍHíiÄÿ‹lëy¢ ≠£–˘ıØf«%¨
    ◊ˇ1¯GàMNçZ Ô@0·◊ﬂ\	¯QK0ÿˇ¡7`ƒ?:0`v`ƒ¬Ä—˛Æ3~=⁄-æ*k¿pˇœÄ!ˇ_áÜûhI∆˚ü8˘GçÄ˘ë#˚øÏ
    òÚﬂôih9V˚ﬂl
    Ûﬂö2?6G6`πˇœŒÄ9ˇó≥≥R¨˜?⁄∞‡o⁄ù%`Ïˇ47`¡?>:ksÉ¡ kˇ´©˛Q?–˙çTÃ˝øf¨¯uÒÀ´ÿ˚üMÿÒˇ˝ÓŒ◊n ∞ˇõn¿é_Ôå44⁄ dˇ;’Ä%ˇ8\%Å l ¥ˇüf¿ñÚ*)€ãî¿Œ?PXÛ◊ó…≈ ûˇH7`Õ?u«∫ÌUR±†Á_“ÿÛˇ›ÚÆ”õ3 >ˇ≥ÿ Éø6uü‡we ~˛iëˇÃ•¢ˆu`∆Ä¿˘Ød˛È¿ªTu¬Ä ≤mÊVY∆•¢D¯ì∞¯ÁﬁŸ∞ÌM‚è7¿„ü≠‹Á%Fƒ¯„0˘wÊÓohÆA˛yL˛âq¿8¶ÅI˛πS∑L˛0Ê}ÅÔ4.z,Ùë,¸3F@¡o~¨Å¢‡SãR¸H;±ØÃ4<Áÿí|h©'¯–»@-·•©ÜÔ¸(âØ≠ÖÄˇ¸"
    ƒck°Ës{Øé$˘π˝ü≈ S$
    @¯CÈ'7Â@¯ø∫˙l √:xvW∆ Ü?ÂŸ]P_@¬ à?Lyy‘ƒ Òß TÄ@ÒwS_üØk
    †¯„áÅ”Ò‹C0˛ùt~ÊÙ®àH( ¿∑7Q`¸ÈöQp¸!çñ1p¸∫H úÂ ÚﬂS‰hzc »“˘ÅïÄi »OØ ‡Eé$ˇ=eM ˘C3~U≤7Ä‰äÜ†Oë€@ÚÎmeœ36 Âˇ¡ú_¬L
    @˘√íÖ h06 Â7O »	B+P~Íh>÷≤2ÄÂøß¨£õç,ˇC{~l"$¿Ú€%¿q"Ã¿ òø®XQ\¿ÚL~‹æ™Å7P~˝B±⁄¶ﬁ∆s⁄É~⁄∂ƒ÷¿˘ÇBp4¿~÷=•<4†á	
    .á=/˘Ò^≈ï8>éo@Î¡ªÈÀ‘ﬁ
    ‡‰ó0p˝¿ Ô√∑W1¸<Ë	¸˜P~¢Êœù8?véL<~Vq‰?h(ë¿éå‰"¨+µÃ¬¢ãB◊˛á%%kKò˛gá^ß¬‡g%>'…Í?ëû˚ ˇCIπâm/´A∞≠úÖè’‡ó¢rﬁµk q¯U~©+˜±∂ƒ?ø_Ö†VWY≈J∏\…?¶‹_ö∂?QAwIKøı†÷P~D6
    ¬™Ú'‹+
    ﬂΩÔG
    jKW˜Áˆ8iªæ‚è≈m·ö¨ïîÁq WÇZCÂ!ä2Ÿ†÷)©‹D±vP[À=∫π˙Ì'£tpÉK_n5rJˇ• ¥¨%l¥VÚ
    ?.	çN◊–B˘Yßq;‡'∫IÌÓFÍÑz∞Ò¨µRømÏì•°ﬁXi∑û’jÂry¸sóÀµ⁄≥V{Â¿=˘ü
    _\xoE∫ã    IENDÆB`Ç
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DatePicker.module.scss
    ```scss
    .calendar {
        &.xs {
          --calendar-padding: var(--static-space-8);
          --calendar-gap: var(--static-space-4);
          --calendar-button-size: var(--static-space-24);
          --calendar-font-size: var(--font-size-xs);
        }
      
        &.s {
          --calendar-padding: var(--static-space-12);
          --calendar-gap: var(--static-space-8);
          --calendar-button-size: var(--static-space-28);
          --calendar-font-size: var(--font-size-s);
        }
      
        &.m {
          --calendar-padding: var(--static-space-16);
          --calendar-gap: var(--static-space-12);
          --calendar-button-size: var(--static-space-32);
          --calendar-font-size: var(--font-size-m);
        }
      
        &.l {
          --calendar-padding: var(--static-space-20);
          --calendar-gap: var(--static-space-16);
          --calendar-button-size: var(--static-space-36);
          --calendar-font-size: var(--font-size-l);
        }
      
        &.xl {
          --calendar-padding: var(--static-space-24);
          --calendar-gap: var(--static-space-20);
          --calendar-button-size: var(--static-space-40);
          --calendar-font-size: var(--font-size-xl);
        }
      }
      
      .monthButton {
      
          
          &:hover {
              transform: scale(1.10);
              background: var(--neutral-background-medium);
          }
          
          
          &:disabled {
              opacity: 0.5;
              cursor: not-allowed;
              transform: none;
          }
      }
      
      .dayButton {
        aspect-ratio: 1;
        width: var(--calendar-button-size);
        height: var(--calendar-button-size);
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: var(--calendar-font-size);
        transition: all 0.2s ease-in-out;
        border-radius: var(--radius-m);
        background-color: transparent;
        border: 0.5px solid var(--neutral-background-medium);
        color: var(--neutral-on-background-weak);
      
      
        &:hover {
          color: var(--neutral-background-weak);
          transform: scale(1.10);
          background: var(--neutral-background-strong);
        }
      
        &:active {
          background-color: var(--brand-background-strong);
          color: white;
          transform: scale(0.95);
        }
      
        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
          transform: none;
        }
      }
      
      .timeSelector {
        background: var(--neutral-background-medium);
        border-radius: var(--radius-m);
        border: 1px solid var(--neutral-background-medium);
        padding: var(--calendar-padding);
        font-size: var(--calendar-font-size);
      
        &:focus-within {
          border: 1px solid var(--neutral-border-strong);
        }
      }
      
      .timeInput {
        width: var(--static-space-40);
        height: var(--static-space-32);
        border: 1px solid var(--neutral-border-medium);
        border-radius: var(--radius-m);
        background: var(--neutral-background-strong);
        color: var(--neutral-on-background-strong);
        text-align: center;
        font-size: var(--calendar-font-size);
        outline: none;
        transition: all 0.2s ease-in-out;
        
        &:focus {
          border-color: var(--brand-border-medium);
          box-shadow: 0 0 0 2px var(--brand-alpha-weak);
        }
      
        &:invalid {
          border-color: var(--danger-border-medium);
        }
      
        &::-webkit-inner-spin-button,
        &::-webkit-outer-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }
      }
      
      .ampmSelector {
        min-width: var(--static-space-80);
        height: var(--static-space-32);
        font-size: var(--calendar-font-size);
      
        button {
          min-width: var(--static-space-40);
        }
      }
      
      .monthTransition {
        transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
      }
      
      .slideLeft {
        transform: translateX(-20px);
        opacity: 0;
      }
      
      .slideRight {
        transform: translateX(20px);
        opacity: 0;
      }
      
      .timeWrapper {
          &.vertical {
            align-items: flex-start;
          }
        }
        
        .verticalTimeLabel {
          writing-mode: vertical-lr;
          transform: rotate(180deg);
          margin-right: var(--static-space-8);
        }
        
        .timeSelector {
          &.vertical {
            flex-direction: column;
            align-items: flex-start;
          }
        }
        
        .ampmSelector {
          min-width: var(--static-space-80);
          height: var(--static-space-32);
          font-size: var(--calendar-font-size);
        
          &.vertical {
            min-width: var(--static-space-32);
            height: auto;
        
            button {
              min-width: var(--static-space-32);
              height: var(--static-space-40);
            }
          }
        }
      
      .grid {
        display: grid;
    
        > div {
          overflow: hidden;
        }
      }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/CompareImage.tsx
    ```tsx
    "use client";
    
    import { useState, useRef, useEffect } from "react";
    import { Flex, SmartImage, IconButton } from ".";
    import styles from "./CompareImage.module.scss";
    
    interface SideContent {
      src: string | React.ReactNode;
      alt?: string;
    }
    
    interface CompareImageProps extends React.ComponentProps<typeof Flex> {
      leftContent: SideContent;
      rightContent: SideContent;
    }
    
    const renderContent = (content: SideContent, clipPath: string) => {
      if (typeof content.src === "string") {
        return (
          <SmartImage
            src={content.src}
            alt={content.alt || ""}
            fill
            position="absolute"
            style={{ clipPath }}
          />
        );
      }
    
      return (
        <Flex fill position="absolute" style={{ clipPath }}>
          {content.src}
        </Flex>
      );
    };
    
    export const CompareImage = ({ leftContent, rightContent, ...rest }: CompareImageProps) => {
      const [position, setPosition] = useState(50);
      const containerRef = useRef<HTMLDivElement>(null);
      const isDragging = useRef(false);
    
      const handleMouseDown = () => {
        isDragging.current = true;
      };
    
      const handleMouseUp = () => {
        isDragging.current = false;
      };
    
      const updatePosition = (clientX: number) => {
        if (!isDragging.current || !containerRef.current) return;
    
        const rect = containerRef.current.getBoundingClientRect();
        const x = clientX - rect.left;
        const containerWidth = rect.width;
    
        // Calculate percentage (constrained between 0 and 100)
        const newPosition = Math.max(0, Math.min(100, (x / containerWidth) * 100));
        setPosition(newPosition);
      };
    
      const handleMouseMove = (e: MouseEvent) => {
        updatePosition(e.clientX);
      };
    
      const handleTouchMove = (e: TouchEvent) => {
        updatePosition(e.touches[0].clientX);
      };
    
      useEffect(() => {
        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);
        document.addEventListener("touchmove", handleTouchMove);
        document.addEventListener("touchend", handleMouseUp);
    
        return () => {
          document.removeEventListener("mousemove", handleMouseMove);
          document.removeEventListener("mouseup", handleMouseUp);
          document.removeEventListener("touchmove", handleTouchMove);
          document.removeEventListener("touchend", handleMouseUp);
        };
      }, []);
    
      return (
        <Flex
          position="relative"
          ref={containerRef}
          aspectRatio="16/9"
          fillWidth
          style={{ touchAction: "none" }}
          {...rest}
        >
          {renderContent(leftContent, `inset(0 ${100 - position}% 0 0)`)}
          {renderContent(rightContent, `inset(0 0 0 ${position}%)`)}
    
          {/* Hit area and visible line */}
          <Flex
            position="absolute"
            horizontal="center"
            width={3}
            className={styles.hitArea}
            top="0"
            bottom="0"
            style={{
              left: `${position}%`,
            }}
            onMouseDown={handleMouseDown}
            onTouchStart={handleMouseDown}
          >
            <Flex width="1" fillHeight background="neutral-strong" zIndex={2} />
          </Flex>
          <IconButton
            icon="chevronsLeftRight"
            variant="secondary"
            className={styles.dragIcon}
            style={{
              left: `${position}%`,
            }}
            onMouseDown={handleMouseDown}
            onTouchStart={handleMouseDown}
          />
        </Flex>
      );
    };
    
    CompareImage.displayName = "CompareImage";
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DateRangeInput.tsx
    ```tsx
    "use client";
    
    import React, {useState, useCallback, useEffect} from "react";
    import {Input, DropdownWrapper, Flex, DateRange, DateRangePicker, Row} from ".";
    
    interface DateRangeInputProps extends Omit<React.ComponentProps<typeof Input>, "onChange" | "value" | "label"> {
        id: string;
        startLabel: string;
        endLabel: string;
        value?: DateRange;
        onChange?: (range: DateRange) => void;
        minHeight?: number;
        className?: string;
        style?: React.CSSProperties;
    }
    
    interface LocalizedDateRange {
        startDate: string | null;
        endDate: string | null;
    }
    
    const formatDateRange = (range: DateRange): LocalizedDateRange => {
        const options: Intl.DateTimeFormatOptions = {
            year: "numeric",
            month: "short",
            day: "numeric",
        };
        return {
            startDate: range.startDate?.toLocaleDateString("en-US", options) || null,
            endDate: range.endDate?.toLocaleDateString("en-US", options) || null,
        };
    };
    
    export const DateRangeInput: React.FC<DateRangeInputProps> = ({
                                                                      id,
                                                                      startLabel = "Start",
                                                                      endLabel = "End",
                                                                      value,
                                                                      onChange,
                                                                      error,
                                                                      minHeight,
                                                                      className,
                                                                      style,
                                                                      ...rest
                                                                  }) => {
        const [isOpen, setIsOpen] = useState(false);
        const [inputValue, setInputValue] = useState(value ? formatDateRange(value) : {startDate: "", endDate: ""});
        useEffect(() => {
            if (value) {
                setInputValue(formatDateRange(value));
            }
        }, [value]);
    
        const handleDateChange = useCallback(
            (range: DateRange) => {
                setInputValue(formatDateRange(range));
                onChange?.(range);
                if (range.endDate != undefined) {
                    setIsOpen(false);
                }
            },
            [onChange],
        );
    
        const handleInputClick = useCallback(() => {
            setIsOpen(true);
        }, []);
    
        const trigger = (
            <Row fillWidth horizontal="center" gap="-1">
                <Input
                    className="cursor-interactive"
    
                    style={{
                        textOverflow: "ellipsis",
                    }}
                    radius={"left"}
                    id={id}
                    label={startLabel}
                    value={inputValue.startDate ?? ""}
                    error={error}
                    readOnly
                    onClick={handleInputClick}
                    {...rest}/>
                <Input
                    className="cursor-interactive"
                    style={{
                        textOverflow: "ellipsis",
                    }}
                    radius={"right"}
                    id={id}
                    label={endLabel}
                    value={inputValue.endDate ?? ""}
                    error={error}
                    readOnly
                    onClick={handleInputClick}
                    {...rest}
                />
            </Row>
        );
    
        const dropdown = (
            <Flex padding="20" center={true}>
                <DateRangePicker value={value} onChange={handleDateChange}/>
            </Flex>
        );
    
        return (
            <DropdownWrapper
                fillWidth
                trigger={trigger}
                minHeight={minHeight}
                dropdown={dropdown}
                isOpen={isOpen}
                closeAfterClick={false}
                className={className}
                style={{...style}}
                onOpenChange={
                    setIsOpen
                }
            />
        );
    };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DatePicker.tsx
    ```tsx
    "use client";
    
    import React, { useState, forwardRef, useEffect } from "react";
    import classNames from "classnames";
    import { Flex, Text, Button, Grid, SegmentedControl, IconButton, RevealFx, NumberInput } from ".";
    import styles from "./DatePicker.module.scss";
    
    export interface DatePickerProps extends Omit<React.ComponentProps<typeof Flex>, "onChange"> {
      value?: Date;
      onChange?: (date: Date) => void;
      minDate?: Date;
      maxDate?: Date;
      previousMonth?: boolean;
      nextMonth?: boolean;
      timePicker?: boolean;
      defaultDate?: Date;
      defaultTime?: {
        hours: number;
        minutes: number;
      };
      size?: "s" | "m" | "l";
      className?: string;
      style?: React.CSSProperties;
      currentMonth?: number;
      currentYear?: number;
      onMonthChange?: (increment: number) => void;
      range?: {
        startDate?: Date;
        endDate?: Date;
      };
      onHover?: (date: Date | null) => void;
    }
    
    const DatePicker = forwardRef<HTMLDivElement, DatePickerProps>(
      (
        {
          value,
          onChange,
          timePicker = false,
          previousMonth = true,
          nextMonth = true,
          minDate,
          maxDate,
          defaultDate,
          defaultTime,
          size = "m",
          className,
          style,
          currentMonth: propCurrentMonth,
          currentYear: propCurrentYear,
          onMonthChange,
          range,
          onHover,
          ...rest
        },
        ref,
      ) => {
        const today = new Date();
        const [selectedDate, setSelectedDate] = useState<Date | undefined>(value);
        const [selectedTime, setSelectedTime] = useState<
          | {
              hours: number;
              minutes: number;
            }
          | undefined
        >(defaultTime);
        const [isPM, setIsPM] = useState(defaultTime?.hours ? defaultTime.hours >= 12 : false);
        const [isTimeSelector, setIsTimeSelector] = useState(false);
        const [isTransitioning, setIsTransitioning] = useState(true);
    
        const [currentMonth, setCurrentMonth] = useState<number>(
          value ? value.getMonth() : today.getMonth(),
        );
        const [currentYear, setCurrentYear] = useState<number>(
          value ? value.getFullYear() : today.getFullYear(),
        );
    
        useEffect(() => {
          if (typeof propCurrentMonth === "number") {
            setCurrentMonth(propCurrentMonth);
          }
          if (typeof propCurrentYear === "number") {
            setCurrentYear(propCurrentYear);
          }
        }, [propCurrentMonth, propCurrentYear]);
    
        useEffect(() => {
          setSelectedDate(value);
          if (value) {
            setSelectedTime({
              hours: value.getHours(),
              minutes: value.getMinutes(),
            });
            setIsPM(value.getHours() >= 12);
          }
        }, [value]);
    
        useEffect(() => {
          const timer = setTimeout(() => {
            setIsTransitioning(true);
          }, 100);
    
          return () => clearTimeout(timer);
        }, []);
    
        const monthNames = [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December",
        ];
        const dayNames = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    
        const handleTimeToggle = (show: boolean) => {
          setIsTransitioning(false);
          setTimeout(() => {
            setIsTimeSelector(show);
            setIsTransitioning(true);
          }, 400);
        };
    
        const handleDateSelect = (date: Date) => {
          const newDate = new Date(date);
          if (timePicker && selectedDate && selectedTime) {
            newDate.setHours(selectedTime.hours);
            newDate.setMinutes(selectedTime.minutes);
          }
          setSelectedDate(newDate);
          if (timePicker) {
            handleTimeToggle(true);
          } else {
            onChange?.(newDate);
          }
        };
    
        const handleMonthChange = (increment: number) => {
          if (onMonthChange) {
            // Delegate to external handler
            onMonthChange(increment);
          } else {
            // Fallback to internal state management
            const newMonth = currentMonth + increment;
            if (newMonth < 0) {
              setCurrentMonth(11); // December
              setCurrentYear(currentYear - 1);
            } else if (newMonth > 11) {
              setCurrentMonth(0); // January
              setCurrentYear(currentYear + 1);
            } else {
              setCurrentMonth(newMonth);
            }
          }
        };
    
        const convert24to12 = (hour24: number) => {
          if (hour24 === 0) return 12;
          if (hour24 > 12) return hour24 - 12;
          return hour24;
        };
    
        const handleTimeChange = (hours: number, minutes: number, pm: boolean = isPM) => {
          if (!selectedDate) return;
    
          const newTime = {
            hours: pm ? (hours === 12 ? 12 : hours + 12) : hours === 12 ? 0 : hours,
            minutes,
          };
          setSelectedTime(newTime);
          setIsPM(pm);
    
          const newDate = new Date(selectedDate);
          newDate.setHours(newTime.hours);
          newDate.setMinutes(minutes);
          onChange?.(newDate);
        };
    
        const isInRange = (date: Date) => {
          if (!range?.startDate) return false;
          if (!range?.endDate) return false;
          return date >= range.startDate && date <= range.endDate;
        };
    
        const renderCalendarGrid = () => {
          const firstDay = new Date(currentYear, currentMonth, 1).getDay();
          const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
          const daysInPrevMonth = new Date(currentYear, currentMonth, 0).getDate();
    
          // Calculate total number of weeks needed
          const totalDaysShown = firstDay + daysInMonth;
          const numberOfWeeks = Math.ceil(totalDaysShown / 7);
          const totalGridSpots = numberOfWeeks * 7;
    
          const days = [];
    
          // Previous month's days
          for (let i = 0; i < firstDay; i++) {
            const prevMonthDay = daysInPrevMonth - firstDay + i + 1;
            days.push(
              <Flex
                paddingY="2"
                width="40"
                height="40"
                key={`prev-${currentYear}-${currentMonth}-${i}`}
              >
                <Button fillWidth weight="default" variant="tertiary" size="m" type="button" disabled>
                  {prevMonthDay}
                </Button>
              </Flex>,
            );
          }
    
          // Current month's days
          for (let day = 1; day <= daysInMonth; day++) {
            const currentDate = new Date(currentYear, currentMonth, day);
            const isSelected =
              (selectedDate?.getDate() === day &&
                selectedDate?.getMonth() === currentMonth &&
                selectedDate?.getFullYear() === currentYear) ||
              (value instanceof Date && value.getTime() === currentDate.getTime()) ||
              range?.startDate?.getTime() === currentDate.getTime() ||
              range?.endDate?.getTime() === currentDate.getTime();
    
            const isFirstInRange =
              range?.startDate && currentDate.getTime() === range.startDate.getTime();
            const isLastInRange = range?.endDate && currentDate.getTime() === range.endDate.getTime();
    
            // Check if the current date is out of the minDate and maxDate range
            const isDisabled = (minDate && currentDate < minDate) || (maxDate && currentDate > maxDate);
    
            days.push(
              <Flex paddingY="2" key={`day-${currentYear}-${currentMonth}-${day}`}>
                <Flex
                  width="40"
                  height="40"
                  background={isInRange(currentDate) ? "neutral-alpha-weak" : undefined}
                  borderTop={isInRange(currentDate) ? "neutral-alpha-weak" : "transparent"}
                  borderBottom={isInRange(currentDate) ? "neutral-alpha-weak" : "transparent"}
                  leftRadius={isFirstInRange ? "m" : undefined}
                  rightRadius={isLastInRange ? "m" : undefined}
                >
                  <Button
                    fillWidth
                    weight={isSelected ? "strong" : "default"}
                    variant={isSelected ? "primary" : "tertiary"}
                    size="m"
                    onClick={() => !isDisabled && handleDateSelect(currentDate)}
                    onMouseEnter={() => onHover?.(currentDate)}
                    onMouseLeave={() => onHover?.(null)}
                    disabled={isDisabled}
                  >
                    {day}
                  </Button>
                </Flex>
              </Flex>,
            );
          }
    
          const remainingDays = totalGridSpots - days.length;
    
          for (let i = 1; i <= remainingDays; i++) {
            days.push(
              <Flex
                marginTop="2"
                width="40"
                height="40"
                key={`next-${currentYear}-${currentMonth}-${i}`}
              >
                <Button fillWidth weight="default" variant="tertiary" size="m" type="button" disabled>
                  {i}
                </Button>
              </Flex>,
            );
          }
    
          return days;
        };
    
        return (
          <Flex
            ref={ref}
            className={classNames(styles.calendar, className)}
            style={style}
            direction="column"
            fillWidth
            horizontal="center"
            gap={size}
            {...rest}
          >
            <Flex fillWidth center>
              {isTimeSelector ? (
                <Flex horizontal="center" fillWidth direction="column" gap="8">
                  <Text variant={`label-default-${size}`} onBackground="neutral-strong">
                    {monthNames[currentMonth]} {currentYear}
                  </Text>
                  <Text
                    className="cursor-interactive"
                    variant="label-default-s"
                    onBackground="brand-weak"
                    onClick={() => handleTimeToggle(false)}
                  >
                    Back to calendar
                  </Text>
                </Flex>
              ) : (
                <>
                  {previousMonth && (
                    <IconButton
                      variant="tertiary"
                      size={size === "l" ? "l" : "m"}
                      icon="chevronLeft"
                      onClick={(event: any) => {
                        event.preventDefault();
                        event.stopPropagation();
                        handleMonthChange(-1);
                      }}
                    />
                  )}
                  <Flex fillWidth direction="column" horizontal="center" gap="8">
                    <Text variant={`body-default-${size}`} onBackground="neutral-strong">
                      {monthNames[currentMonth]} {currentYear}
                    </Text>
                    {timePicker && selectedTime && (
                      <Text variant="label-default-s" onBackground="neutral-weak">
                        {`${selectedTime.hours.toString().padStart(2, "0")}:${selectedTime.minutes.toString().padStart(2, "0")} ${isPM ? "PM" : "AM"}`}
                      </Text>
                    )}
                  </Flex>
                  {nextMonth && (
                    <IconButton
                      variant="tertiary"
                      size={size === "l" ? "l" : "m"}
                      icon="chevronRight"
                      onClick={(event: any) => {
                        event.preventDefault();
                        event.stopPropagation();
                        handleMonthChange(1);
                      }}
                    />
                  )}
                </>
              )}
            </Flex>
    
            <RevealFx
              fillWidth
              horizontal="center"
              vertical="center"
              key={isTimeSelector ? "time" : "date"}
              trigger={isTransitioning}
              speed="fast"
            >
              {isTimeSelector ? (
                <Flex
                  maxWidth={24}
                  horizontal="center"
                  vertical="center"
                  direction="column"
                  padding="32"
                  gap="32"
                >
                  <SegmentedControl
                    buttons={[
                      {
                        value: "AM",
                        label: "AM",
                      },
                      {
                        value: "PM",
                        label: "PM",
                      },
                    ]}
                    selected={isPM ? "PM" : "AM"}
                    onToggle={(value) =>
                      handleTimeChange(
                        selectedTime?.hours ?? 0,
                        selectedTime?.minutes ?? 0,
                        value === "PM",
                      )
                    }
                  />
                  <Flex fillWidth gap="16" vertical="center" data-scaling="110">
                    <NumberInput
                      id="hours"
                      label="Hours"
                      labelAsPlaceholder
                      min={1}
                      max={12}
                      value={selectedTime?.hours ? convert24to12(selectedTime.hours) : 12}
                      onChange={(value) => {
                        if (value >= 1 && value <= 12) {
                          handleTimeChange(value, selectedTime?.minutes ?? 0);
                        }
                      }}
                      aria-label="Hours"
                    />
                    :
                    <NumberInput
                      id="minutes"
                      label="Minutes"
                      labelAsPlaceholder
                      min={0}
                      max={59}
                      padStart={2}
                      value={selectedTime?.minutes ?? 0}
                      onChange={(value) => {
                        if (value >= 0 && value <= 59) {
                          handleTimeChange(selectedTime?.hours ?? 0, value);
                        }
                      }}
                      aria-label="Minutes"
                    />
                  </Flex>
                </Flex>
              ) : (
                <Grid fitWidth columns="7">
                  {dayNames.map((day) => (
                    <Text
                      marginBottom="16"
                      key={day}
                      variant="label-default-m"
                      onBackground="neutral-medium"
                      align="center"
                    >
                      {day}
                    </Text>
                  ))}
                  {renderCalendarGrid()}
                </Grid>
              )}
            </RevealFx>
          </Flex>
        );
      },
    );
    
    DatePicker.displayName = "DatePicker";
    export { DatePicker };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Dialog.module.scss
    ```scss
    .overlay {
        opacity: 0;
        visibility: hidden;
    
        &.open {
            opacity: 1;
            visibility: visible;
        }
    }
    
    .dialog {
        max-width: 40rem;
        max-height: 100%;
        transform: scale(0.2);
        opacity: 0;
    
        &.open {
            transform: scale(1);
            opacity: 1;
            visibility: visible;
        }
    
        @media (--m) {
            position: fixed;
            bottom: var(--static-space-8);
            left: var(--static-space-8);
            right: var(--static-space-8);
            max-width: calc(100% - var(--static-space-16)) !important;
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Dialog.tsx
    ```tsx
    "use client";
    
    import React, {
      ReactNode,
      useEffect,
      useCallback,
      useRef,
      forwardRef,
      useState,
      useContext,
    } from "react";
    import ReactDOM from "react-dom";
    import classNames from "classnames";
    import { Flex, Heading, IconButton, Text } from ".";
    import styles from "./Dialog.module.scss";
    
    interface DialogProps extends Omit<React.ComponentProps<typeof Flex>, "title"> {
      isOpen: boolean;
      onClose: () => void;
      title: ReactNode | string;
      description?: ReactNode;
      children: ReactNode;
      footer?: ReactNode;
      base?: boolean;
      stack?: boolean;
      onHeightChange?: (height: number) => void;
      minHeight?: number;
    }
    
    const DialogContext = React.createContext<{
      stackedDialogOpen: boolean;
      setStackedDialogOpen: (open: boolean) => void;
    }>({
      stackedDialogOpen: false,
      setStackedDialogOpen: () => {},
    });
    
    export const DialogProvider: React.FC<{
      children: React.ReactNode;
    }> = ({ children }) => {
      const [stackedDialogOpen, setStackedDialogOpen] = useState(false);
    
      return (
        <DialogContext.Provider
          value={{
            stackedDialogOpen,
            setStackedDialogOpen,
          }}
        >
          {children}
        </DialogContext.Provider>
      );
    };
    
    const Dialog: React.FC<DialogProps> = forwardRef<HTMLDivElement, DialogProps>(
      (
        {
          isOpen,
          onClose,
          title,
          description,
          children,
          stack,
          base,
          footer,
          onHeightChange,
          minHeight,
          ...rest
        },
        ref,
      ) => {
        const dialogRef = useRef<HTMLDivElement>(null);
        const [isVisible, setIsVisible] = useState(isOpen);
        const [isAnimating, setIsAnimating] = useState(false);
        const { stackedDialogOpen, setStackedDialogOpen } = useContext(DialogContext);
    
        useEffect(() => {
          if (stack) {
            setStackedDialogOpen(isOpen);
          }
        }, [stack, isOpen, setStackedDialogOpen]);
    
        useEffect(() => {
          if (dialogRef.current && isVisible) {
            const height = dialogRef.current.offsetHeight;
            onHeightChange?.(height);
          }
        }, [isVisible, onHeightChange]);
    
        useEffect(() => {
          if (isOpen) {
            setIsVisible(true);
            setTimeout(() => {
              setIsAnimating(true);
            }, 0);
          } else {
            setIsAnimating(false);
            setTimeout(() => {
              setIsVisible(false);
            }, 300);
          }
        }, [isOpen]);
    
        const handleKeyDown = useCallback(
          (event: KeyboardEvent) => {
            if (event.key === "Escape" && !base) {
              onClose();
            }
            if (event.key === "Tab" && dialogRef.current) {
              const focusableElements = dialogRef.current.querySelectorAll(
                'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
              );
    
              if (focusableElements.length > 0) {
                const firstElement = focusableElements[0] as HTMLElement;
                const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
    
                if (event.shiftKey && document.activeElement === firstElement) {
                  event.preventDefault();
                  lastElement.focus();
                } else if (!event.shiftKey && document.activeElement === lastElement) {
                  event.preventDefault();
                  firstElement.focus();
                }
              }
            }
          },
          [onClose, base],
        );
    
        useEffect(() => {
          if (isOpen) {
            document.addEventListener("keydown", handleKeyDown);
            return () => {
              document.removeEventListener("keydown", handleKeyDown);
            };
          }
        }, [isOpen, handleKeyDown]);
    
        useEffect(() => {
          if (isOpen) {
            document.body.style.overflow = "hidden";
            // Make everything outside the dialog inert
            document.body.childNodes.forEach((node) => {
              if (node instanceof HTMLElement && node !== document.getElementById("portal-root")) {
                node.inert = true;
              }
            });
    
            // If this is a stacked dialog, make the base dialog inert too
            if (stack) {
              const dialogs = document.querySelectorAll('[role="dialog"]');
              dialogs.forEach((dialog) => {
                if (dialog instanceof HTMLElement && !dialog.contains(dialogRef.current)) {
                  dialog.inert = true;
                }
              });
            }
          } else {
            // If this is a stacked dialog closing, restore interactivity to base dialog
            if (stack) {
              const dialogs = document.querySelectorAll('[role="dialog"]');
              dialogs.forEach((dialog) => {
                if (dialog instanceof HTMLElement) {
                  dialog.inert = false;
                }
              });
            } else {
              // If base dialog is closing, restore everything
              document.body.childNodes.forEach((node) => {
                if (node instanceof HTMLElement) {
                  node.inert = false;
                }
              });
              document.body.style.overflow = "unset";
            }
          }
        }, [isOpen, stack]);
    
        useEffect(() => {
          if (isOpen && dialogRef.current) {
            const focusableElements = dialogRef.current.querySelectorAll<HTMLElement>(
              'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
            );
            const firstElement = focusableElements[0];
            firstElement.focus();
          }
        }, [isOpen]);
    
        useEffect(() => {
          const handleClickOutside = (event: MouseEvent) => {
            if (!dialogRef.current?.contains(event.target as Node)) {
              if (stack || !base) {
                onClose();
              }
            }
          };
    
          if (isVisible) {
            document.addEventListener("mousedown", handleClickOutside);
            return () => {
              document.removeEventListener("mousedown", handleClickOutside);
            };
          }
        }, [isVisible, onClose, stack, base]);
    
        if (!isVisible) return null;
    
        return ReactDOM.createPortal(
          <Flex
            ref={ref}
            transition="macro-medium"
            background="overlay"
            position="fixed"
            zIndex={base ? 8 : 9}
            top="0"
            left="0"
            right="0"
            bottom="0"
            className={classNames(styles.overlay, {
              [styles.open]: isAnimating,
            })}
            center
            padding="l"
            role="dialog"
            aria-modal="true"
            aria-labelledby="dialog-title"
          >
            <Flex
              fill
              center
              transition="macro-medium"
              style={{
                transform: base ? "scale(0.94) translateY(-1.25rem)" : "",
              }}
            >
              <Flex
                className={classNames(styles.dialog, {
                  [styles.open]: isAnimating,
                })}
                style={{
                  minHeight: minHeight ? `${minHeight}px` : undefined,
                }}
                ref={dialogRef}
                fillWidth
                transition="macro-medium"
                shadow="xl"
                radius="xl"
                border="neutral-medium"
                background="neutral-weak"
                direction="column"
                tabIndex={-1}
                onKeyDown={(e) => {
                  if (e.key === "Tab") {
                    const focusableElements = Array.from(
                      dialogRef.current?.querySelectorAll(
                        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
                      ) || [],
                    );
    
                    if (focusableElements.length === 0) return;
    
                    const firstElement = focusableElements[0] as HTMLElement;
                    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
    
                    if (e.shiftKey && document.activeElement === firstElement) {
                      e.preventDefault();
                      lastElement.focus();
                    } else if (!e.shiftKey && document.activeElement === lastElement) {
                      e.preventDefault();
                      firstElement.focus();
                    }
                  }
                }}
                {...rest}
              >
                <Flex
                  as="header"
                  direction="column"
                  paddingX="24"
                  paddingTop="24"
                  paddingBottom="s"
                  gap="4"
                >
                  <Flex fillWidth horizontal="space-between" gap="8">
                    {typeof title === "string" ? (
                      <Heading id="dialog-title" variant="heading-strong-l">
                        {title}
                      </Heading>
                    ) : (
                      title
                    )}
                    <IconButton
                      icon="close"
                      size="m"
                      variant="tertiary"
                      tooltip="Close"
                      onClick={onClose}
                    />
                  </Flex>
                  {description && (
                    <Text variant="body-default-s" onBackground="neutral-weak">
                      {description}
                    </Text>
                  )}
                </Flex>
                <Flex
                  as="section"
                  paddingX="24"
                  paddingBottom="24"
                  flex={1}
                  overflowY="auto"
                  direction="column"
                >
                  {children}
                </Flex>
                {footer && (
                  <Flex borderTop="neutral-medium" as="footer" horizontal="end" padding="12" gap="8">
                    {footer}
                  </Flex>
                )}
              </Flex>
            </Flex>
          </Flex>,
          document.body,
        );
      },
    );
    
    Dialog.displayName = "Dialog";
    
    export { Dialog };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Dropdown.tsx
    ```tsx
    "use client";
    
    import React, { ReactNode, forwardRef, SyntheticEvent } from "react";
    import { Flex } from ".";
    
    interface DropdownProps extends Omit<React.ComponentProps<typeof Flex>, "onSelect"> {
      selectedOption?: string;
      children?: ReactNode;
      onEscape?: () => void;
      onSelect?: (event: string) => void;
    }
    
    const Dropdown = forwardRef<HTMLDivElement, DropdownProps>(
      ({ selectedOption, className, children, onEscape, onSelect, ...rest }, ref) => {
        const handleSelect = (event: SyntheticEvent<HTMLDivElement>) => {
          const value = event.currentTarget.getAttribute("data-value");
          if (onSelect && value) {
            onSelect(value);
          }
        };
    
        return (
          <Flex
            ref={ref}
            role="listbox"
            onClick={handleSelect}
            flex={1}
            border="neutral-medium"
            background="surface"
            overflow="hidden"
            {...rest}
          >
            <Flex flex={1} overflowY="auto" direction="column" gap="2">
              {children}
            </Flex>
          </Flex>
        );
      },
    );
    
    Dropdown.displayName = "Dropdown";
    
    export { Dropdown };
    export type { DropdownProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DropdownWrapper.module.scss
    ```scss
    @keyframes fadeIn {
      from {
          opacity: 0;
          transform: scale(0.9);
      }
      to {
          opacity: 1;
          transform: scale(1);
      }
    }
    
    .fadeIn {
      transform-origin: top right;
      animation: fadeIn var(--transition-duration-micro-medium) var(--transition-eased);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DropdownWrapper.tsx
    ```tsx
    "use client";
    
    import React, {
      useState,
      useRef,
      useEffect,
      ReactNode,
      forwardRef,
      useImperativeHandle,
      useCallback,
    } from "react";
    import {
      useFloating,
      shift,
      offset,
      flip,
      size,
      autoUpdate,
      Placement,
    } from "@floating-ui/react-dom";
    import { Flex, Dropdown } from ".";
    import styles from "./DropdownWrapper.module.scss";
    
    export interface DropdownWrapperProps {
      fillWidth?: boolean;
      minWidth?: number;
      maxWidth?: number;
      minHeight?: number;
      floatingPlacement?: Placement;
      trigger: ReactNode;
      dropdown: ReactNode;
      selectedOption?: string;
      style?: React.CSSProperties;
      className?: string;
      onSelect?: (value: string) => void;
      closeAfterClick?: boolean;
      isOpen?: boolean;
      onOpenChange?: (isOpen: boolean) => void;
    }
    
    const DropdownWrapper = forwardRef<HTMLDivElement, DropdownWrapperProps>(
      (
        {
          trigger,
          dropdown,
          selectedOption,
          minHeight,
          onSelect,
          closeAfterClick = true,
          isOpen: controlledIsOpen,
          onOpenChange,
          minWidth,
          maxWidth,
          fillWidth = false,
          floatingPlacement = "bottom-start",
          className,
          style,
        },
        ref,
      ) => {
        const wrapperRef = useRef<HTMLDivElement>(null);
        const dropdownRef = useRef<HTMLDivElement | null>(null);
        const [mounted, setMounted] = useState(false);
        const [internalIsOpen, setInternalIsOpen] = useState(false);
    
        const isControlled = controlledIsOpen !== undefined;
        const isOpen = isControlled ? controlledIsOpen : internalIsOpen;
    
        const handleOpenChange = useCallback(
          (newIsOpen: boolean) => {
            if (!isControlled) {
              setInternalIsOpen(newIsOpen);
            }
            onOpenChange?.(newIsOpen);
          },
          [onOpenChange, isControlled],
        );
    
        const { x, y, strategy, refs, update } = useFloating({
          placement: floatingPlacement,
          open: isOpen,
          middleware: [
            offset(4),
            minHeight ? undefined : flip(),
            shift(),
            size({
              apply({ availableWidth, availableHeight, elements }) {
                Object.assign(elements.floating.style, {
                  width: fillWidth ? "100%" : "auto",
                  minWidth: minWidth ? `${minWidth}rem` : undefined,
                  maxWidth: maxWidth ? `${maxWidth}rem` : `${availableWidth}px`,
                  minHeight: `${Math.min(minHeight || 0)}px`,
                  maxHeight: `${availableHeight}px`,
                });
              },
            }),
          ],
          whileElementsMounted: autoUpdate,
        });
    
        useImperativeHandle(ref, () => wrapperRef.current as HTMLDivElement);
    
        useEffect(() => {
          if (wrapperRef.current) {
            refs.setReference(wrapperRef.current);
          }
        }, [refs, mounted]);
    
        useEffect(() => {
          if (!mounted) {
            setMounted(true);
          }
        }, [mounted]);
    
        useEffect(() => {
          if (isOpen && mounted) {
            requestAnimationFrame(() => {
              if (dropdownRef.current) {
                refs.setFloating(dropdownRef.current);
                update();
              }
            });
          }
        }, [isOpen, mounted, refs, update]);
    
        const handleClickOutside = useCallback(
          (event: MouseEvent) => {
            if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
              handleOpenChange(false);
            }
          },
          [handleOpenChange, wrapperRef],
        );
    
        const handleFocusOut = useCallback(
          (event: FocusEvent) => {
            if (wrapperRef.current && !wrapperRef.current.contains(event.relatedTarget as Node)) {
              handleOpenChange(false);
            }
          },
          [handleOpenChange, wrapperRef],
        );
    
        useEffect(() => {
          const currentWrapperRef = wrapperRef.current;
    
          document.addEventListener("mousedown", handleClickOutside);
          currentWrapperRef?.addEventListener("focusout", handleFocusOut);
    
          return () => {
            document.removeEventListener("mousedown", handleClickOutside);
            currentWrapperRef?.removeEventListener("focusout", handleFocusOut);
          };
        }, [handleClickOutside, handleFocusOut]);
    
        return (
          <Flex
            fillWidth={fillWidth}
            direction="column"
            transition="macro-medium"
            style={{
              ...(minHeight && isOpen
                ? {
                    marginBottom: `${minHeight + 8}px`,
                  }
                : {}),
              ...style,
            }}
            className={className}
            ref={wrapperRef}
            onClick={() => {
                if (closeAfterClick) {
                    handleOpenChange(!isOpen);
                }
            }}
            onKeyDown={(e) => {
              if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                handleOpenChange(!isOpen);
              }
            }}
            tabIndex={-1}
            role="button"
            aria-haspopup="listbox"
            aria-expanded={isOpen}
          >
            {trigger}
            {isOpen && (
              <Flex
                zIndex={1}
                className={styles.fadeIn}
                minWidth={minWidth}
                ref={dropdownRef}
                style={{
                  position: strategy,
                  top: y ?? 0,
                  left: x ?? 0,
                }}
                role="listbox"
              >
                <Dropdown
                  minWidth={minWidth}
                  radius="l"
                  selectedOption={selectedOption}
                  onSelect={onSelect}
                >
                  {dropdown}
                </Dropdown>
              </Flex>
            )}
          </Flex>
        );
      },
    );
    
    DropdownWrapper.displayName = "DropdownWrapper";
    export { DropdownWrapper };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ElementType.tsx
    ```tsx
    import Link from "next/link";
    import React, { ReactNode, forwardRef } from "react";
    import { Flex } from "./Flex";
    
    interface ElementTypeProps {
      href?: string;
      onClick?: () => void;
      onLinkClick?: () => void;
      children: ReactNode;
      className?: string;
      style?: React.CSSProperties;
      [key: string]: any;
    }
    
    const isExternalLink = (url: string) => /^https?:\/\//.test(url);
    
    const ElementType = forwardRef<HTMLElement, ElementTypeProps>(
      ({ href, type, onClick, onLinkClick, children, className, style, ...props }, ref) => {
        if (href) {
          const isExternal = isExternalLink(href);
          if (isExternal) {
            return (
              <a
                href={href}
                target="_blank"
                rel="noreferrer"
                ref={ref as React.Ref<HTMLAnchorElement>}
                className={className}
                style={style}
                onClick={() => onLinkClick?.()}
                {...(props as React.AnchorHTMLAttributes<HTMLAnchorElement>)}
              >
                {children}
              </a>
            );
          }
          return (
            <Link
              href={href}
              ref={ref as React.Ref<HTMLAnchorElement>}
              className={className}
              style={style}
              onClick={() => onLinkClick?.()}
              {...(props as React.AnchorHTMLAttributes<HTMLAnchorElement>)}
            >
              {children}
            </Link>
          );
        }
    
        if (onClick || type === "submit" || type === "button") {
          return (
            <button
              ref={ref as React.Ref<HTMLButtonElement>}
              className={className}
              onClick={onClick}
              style={style}
              {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}
            >
              {children}
            </button>
          );
        }
    
        return (
          <Flex
            ref={ref as React.Ref<HTMLDivElement>}
            className={className}
            style={style}
            {...(props as React.HTMLAttributes<HTMLDivElement>)}
          >
            {children}
          </Flex>
        );
      },
    );
    
    ElementType.displayName = "ElementType";
    export { ElementType };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Fade.module.scss
    ```scss
    .mask {
        backdrop-filter: blur(0.5rem);
        background: linear-gradient(var(--gradient-direction), var(--base-color), transparent);
        mask-image: linear-gradient(var(--gradient-direction), black 20%, transparent 100%);
        mask-size: 100% 100%;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Fade.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import styles from "./Fade.module.scss";
    
    import { Flex } from ".";
    import { ColorScheme, ColorWeight, SpacingToken } from "../types";
    
    type BaseColor =
      | `${ColorScheme}-${ColorWeight}`
      | `${ColorScheme}-alpha-${ColorWeight}`
      | "surface"
      | "overlay"
      | "page";
    
    interface FadeProps extends React.ComponentProps<typeof Flex> {
      className?: string;
      to?: "bottom" | "top" | "left" | "right";
      base?: BaseColor;
      blur?: number;
      pattern?: {
        display?: boolean;
        size?: SpacingToken;
      };
      style?: React.CSSProperties;
      children?: ReactNode;
    }
    
    const Fade = forwardRef<HTMLDivElement, FadeProps>(
      (
        {
          to = "bottom",
          base = "page",
          pattern = {
            display: false,
            size: "4",
          },
          blur = 0.5,
          children,
          ...rest
        },
        ref,
      ) => {
        const getBaseVar = (base: BaseColor) => {
          if (base === "page") return "var(--page-background)";
          if (base === "surface") return "var(--surface-background)";
          if (base === "overlay") return "var(--backdrop)";
    
          const [scheme, weight] = base.includes("alpha") ? base.split("-alpha-") : base.split("-");
    
          return base.includes("alpha")
            ? `var(--${scheme}-alpha-${weight})`
            : `var(--${scheme}-background-${weight})`;
        };
    
        return (
          <Flex
            ref={ref}
            fillWidth
            style={
              {
                "--base-color": getBaseVar(base),
                "--gradient-direction":
                  to === "top"
                    ? "0deg"
                    : to === "right"
                      ? "90deg"
                      : to === "bottom"
                        ? "180deg"
                        : "270deg",
                ...(pattern.display && {
                  backgroundImage: `linear-gradient(var(--gradient-direction), var(--base-color), transparent), radial-gradient(transparent 1px, var(--base-color) 1px)`,
                  backgroundSize: `100% 100%, var(--static-space-${pattern.size}) var(--static-space-${pattern.size})`,
                  backdropFilter: `blur(${blur}rem)`,
                }),
              } as React.CSSProperties
            }
            className={styles.mask}
            {...rest}
          >
            {children}
          </Flex>
        );
      },
    );
    
    Fade.displayName = "Fade";
    export { Fade };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Feedback.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import { IconButton, Button, Icon, Flex, Text } from ".";
    
    interface FeedbackProps extends Omit<React.ComponentProps<typeof Flex>, "title"> {
      variant?: "info" | "danger" | "warning" | "success";
      icon?: boolean;
      title?: string;
      description?: string;
      showCloseButton?: boolean;
      onClose?: () => void;
      actionButtonProps?: React.ComponentProps<typeof Button>;
      children?: ReactNode;
    }
    
    const variantIconMap: {
      [key in "info" | "danger" | "warning" | "success"]: string;
    } = {
      info: "infoCircle",
      danger: "errorCircle",
      warning: "warningTriangle",
      success: "checkCircle",
    };
    
    const Feedback = forwardRef<HTMLDivElement, FeedbackProps>(
      (
        {
          variant = "info",
          icon,
          title,
          description,
          showCloseButton = false,
          onClose,
          actionButtonProps,
          children,
          ...rest
        },
        ref,
      ) => {
        return (
          <Flex
            fillWidth
            radius="l"
            ref={ref}
            border={`${variant}-medium`}
            background={`${variant}-medium`}
            vertical="start"
            role="alert"
            aria-live="assertive"
            {...rest}
          >
            {icon && (
              <Flex paddingY="16" paddingLeft="16">
                <Icon
                  padding="4"
                  radius="m"
                  border={`${variant}-medium`}
                  onBackground={`${variant}-medium`}
                  name={variantIconMap[variant]}
                  aria-hidden="true"
                />
              </Flex>
            )}
            <Flex fillWidth padding="16" gap="24" vertical="center" direction="column">
              {(title || description) && (
                <Flex direction="column" fillWidth gap="4">
                  {title && (
                    <Flex fillWidth gap="16">
                      <Flex fillWidth paddingY="4">
                        <Text
                          variant="heading-strong-m"
                          onBackground={`${variant}-medium`}
                          role="heading"
                          aria-level={2}
                        >
                          {title}
                        </Text>
                      </Flex>
                      {showCloseButton && (
                        <IconButton
                          onClick={onClose}
                          icon="close"
                          size="m"
                          tooltip="Hide"
                          tooltipPosition="top"
                          variant="ghost"
                          aria-label="Close alert"
                        />
                      )}
                    </Flex>
                  )}
                  {description && (
                    <Flex fillWidth>
                      <Text variant="body-default-s" onBackground={`${variant}-strong`}>
                        {description}
                      </Text>
                    </Flex>
                  )}
                </Flex>
              )}
              {children}
              {actionButtonProps && (
                <Flex paddingBottom="4" gap="8">
                  <Button {...actionButtonProps} />
                </Flex>
              )}
            </Flex>
          </Flex>
        );
      },
    );
    
    Feedback.displayName = "Feedback";
    export { Feedback };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Flex.tsx
    ```tsx
    "use client";
    
    import classNames from "classnames";
    import { CSSProperties, forwardRef } from "react";
    
    import {
      CommonProps,
      ConditionalProps,
      DisplayProps,
      FlexProps,
      SizeProps,
      SpacingProps,
      StyleProps,
    } from "../interfaces";
    import { ColorScheme, ColorWeight, SpacingToken, TextVariant } from "../types";
    
    interface ComponentProps
      extends FlexProps,
        SpacingProps,
        SizeProps,
        StyleProps,
        CommonProps,
        DisplayProps,
        ConditionalProps {}
    
    const Flex = forwardRef<HTMLDivElement, ComponentProps>(
      (
        {
          as: Component = "div",
          inline,
          dark,
          light,
          direction,
          tabletDirection,
          mobileDirection,
          wrap = false,
          horizontal,
          vertical,
          flex,
          textVariant,
          textSize,
          textWeight,
          textType,
          onBackground,
          onSolid,
          align,
          top,
          right,
          bottom,
          left,
          padding,
          paddingLeft,
          paddingRight,
          paddingTop,
          paddingBottom,
          paddingX,
          paddingY,
          margin,
          marginLeft,
          marginRight,
          marginTop,
          marginBottom,
          marginX,
          marginY,
          gap,
          position = "relative",
          center,
          width,
          height,
          maxWidth,
          minWidth,
          minHeight,
          maxHeight,
          fit = false,
          fitWidth = false,
          fitHeight = false,
          fill = false,
          fillWidth = false,
          fillHeight = false,
          aspectRatio,
          hide,
          show,
          transition,
          background,
          solid,
          opacity,
          pointerEvents,
          border,
          borderTop,
          borderRight,
          borderBottom,
          borderLeft,
          borderStyle,
          borderWidth,
          radius,
          topRadius,
          rightRadius,
          bottomRadius,
          leftRadius,
          topLeftRadius,
          topRightRadius,
          bottomLeftRadius,
          bottomRightRadius,
          overflow,
          overflowX,
          overflowY,
          zIndex,
          shadow,
          cursor,
          className,
          style,
          children,
          ...rest
        },
        ref,
      ) => {
        if (onBackground && onSolid) {
          console.warn(
            "You cannot use both 'onBackground' and 'onSolid' props simultaneously. Only one will be applied.",
          );
        }
    
        if (background && solid) {
          console.warn(
            "You cannot use both 'background' and 'solid' props simultaneously. Only one will be applied.",
          );
        }
    
        const getVariantClasses = (variant: TextVariant) => {
          const [fontType, weight, size] = variant.split("-");
          return [`font-${fontType}`, `font-${weight}`, `font-${size}`];
        };
    
        const sizeClass = textSize ? `font-${textSize}` : "";
        const weightClass = textWeight ? `font-${textWeight}` : "";
    
        const variantClasses = textVariant ? getVariantClasses(textVariant) : [sizeClass, weightClass];
    
        let colorClass = "";
        if (onBackground) {
          const [scheme, weight] = onBackground.split("-") as [ColorScheme, ColorWeight];
          colorClass = `${scheme}-on-background-${weight}`;
        } else if (onSolid) {
          const [scheme, weight] = onSolid.split("-") as [ColorScheme, ColorWeight];
          colorClass = `${scheme}-on-solid-${weight}`;
        }
    
        const generateDynamicClass = (type: string, value: string | undefined) => {
          if (!value) return undefined;
    
          if (value === "transparent") {
            return `transparent-border`;
          }
    
          if (["surface", "page", "overlay"].includes(value)) {
            return `${value}-${type}`;
          }
    
          const parts = value.split("-");
          if (parts.includes("alpha")) {
            const [scheme, , weight] = parts;
            return `${scheme}-${type}-alpha-${weight}`;
          }
    
          const [scheme, weight] = value.split("-") as [ColorScheme, ColorWeight];
          return `${scheme}-${type}-${weight}`;
        };
    
        const classes = classNames(
          inline ? "display-inline-flex" : "display-flex",
          padding && `p-${padding}`,
          paddingLeft && `pl-${paddingLeft}`,
          paddingRight && `pr-${paddingRight}`,
          paddingTop && `pt-${paddingTop}`,
          paddingBottom && `pb-${paddingBottom}`,
          paddingX && `px-${paddingX}`,
          paddingY && `py-${paddingY}`,
          margin && `m-${margin}`,
          marginLeft && `ml-${marginLeft}`,
          marginRight && `mr-${marginRight}`,
          marginTop && `mt-${marginTop}`,
          marginBottom && `mb-${marginBottom}`,
          marginX && `mx-${marginX}`,
          marginY && `my-${marginY}`,
          gap === "-1"
            ? direction === "column" || direction === "column-reverse"
              ? "g-vertical--1"
              : "g-horizontal--1"
            : gap && `g-${gap}`,
          top && `top-${top}`,
          right && `right-${right}`,
          bottom && `bottom-${bottom}`,
          left && `left-${left}`,
          generateDynamicClass("background", background),
          generateDynamicClass("solid", solid),
          generateDynamicClass(
            "border",
            border || borderTop || borderRight || borderBottom || borderLeft,
          ),
          (border || borderTop || borderRight || borderBottom || borderLeft) &&
            !borderStyle &&
            "border-solid",
          border && !borderWidth && "border-1",
          (borderTop || borderRight || borderBottom || borderLeft) && "border-reset",
          borderTop && "border-top-1",
          borderRight && "border-right-1",
          borderBottom && "border-bottom-1",
          borderLeft && "border-left-1",
          borderWidth && `border-${borderWidth}`,
          borderStyle && `border-${borderStyle}`,
          radius === "full" ? "radius-full" : radius && `radius-${radius}`,
          topRadius && `radius-${topRadius}-top`,
          rightRadius && `radius-${rightRadius}-right`,
          bottomRadius && `radius-${bottomRadius}-bottom`,
          leftRadius && `radius-${leftRadius}-left`,
          topLeftRadius && `radius-${topLeftRadius}-top-left`,
          topRightRadius && `radius-${topRightRadius}-top-right`,
          bottomLeftRadius && `radius-${bottomLeftRadius}-bottom-left`,
          bottomRightRadius && `radius-${bottomRightRadius}-bottom-right`,
          direction && `flex-${direction}`,
          tabletDirection && `m-flex-${tabletDirection}`,
          mobileDirection && `s-flex-${mobileDirection}`,
          pointerEvents && `pointer-events-${pointerEvents}`,
          transition && `transition-${transition}`,
          hide && `${hide}-flex-hide`,
          show && `${show}-flex-show`,
          opacity && `opacity-${opacity}`,
          wrap && "flex-wrap",
          overflow && `overflow-${overflow}`,
          overflowX && `overflow-x-${overflowX}`,
          overflowY && `overflow-y-${overflowY}`,
          flex && `flex-${flex}`,
          horizontal &&
            (direction === "row" || direction === "row-reverse" || direction === undefined
              ? `justify-${horizontal}`
              : `align-${horizontal}`),
          vertical &&
            (direction === "row" || direction === "row-reverse" || direction === undefined
              ? `align-${vertical}`
              : `justify-${vertical}`),
          center && "center",
          fit && "fit",
          fitWidth && "fit-width",
          fitHeight && "fit-height",
          fill && "fill",
          fillWidth && !minWidth && "min-width-0",
          fillHeight && !minHeight && "min-height-0",
          fill && "min-height-0",
          fill && "min-width-0",
          (fillWidth || maxWidth) && "fill-width",
          (fillHeight || maxHeight) && "fill-height",
          shadow && `shadow-${shadow}`,
          position && `position-${position}`,
          zIndex && `z-index-${zIndex}`,
          textType && `font-${textType}`,
          cursor && `cursor-${cursor}`,
          dark && "dark-flex",
          light && "light-flex",
          colorClass,
          className,
          ...variantClasses,
        );
    
        const parseDimension = (
          value: number | SpacingToken | undefined,
          type: "width" | "height",
        ): string | undefined => {
          if (value === undefined) return undefined;
          if (typeof value === "number") return `${value}rem`;
          if (
            [
              "0",
              "1",
              "2",
              "4",
              "8",
              "12",
              "16",
              "20",
              "24",
              "32",
              "40",
              "48",
              "56",
              "64",
              "80",
              "104",
              "128",
              "160",
            ].includes(value)
          ) {
            return `var(--static-space-${value})`;
          }
          if (["xs", "s", "m", "l", "xl"].includes(value)) {
            return `var(--responsive-${type}-${value})`;
          }
          return undefined;
        };
    
        const combinedStyle: CSSProperties = {
          maxWidth: parseDimension(maxWidth, "width"),
          minWidth: parseDimension(minWidth, "width"),
          minHeight: parseDimension(minHeight, "height"),
          maxHeight: parseDimension(maxHeight, "height"),
          width: parseDimension(width, "width"),
          height: parseDimension(height, "height"),
          aspectRatio: aspectRatio,
          textAlign: align,
          ...style,
        };
    
        return (
          <Component ref={ref} className={classes} style={combinedStyle} {...rest}>
            {children}
          </Component>
        );
      },
    );
    
    Flex.displayName = "Flex";
    export { Flex };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/GlitchFx.module.scss
    ```scss
    .glitchLayer {
        pointer-events: none;
    }
    
    .blueShift {
        filter: hue-rotate(260deg);
        animation: glitch-blue 2.5s infinite;
        z-index: 1;
    }
    
    .redShift {
        filter: hue-rotate(120deg);
        animation: glitch-red 2.5s infinite;
        z-index: 1;
    }
    
    @keyframes glitch-blue {
        6%, 14%, 70%, 78% {
            transform: none;
            opacity: 0.25;
            clip-path: inset(0 0 0 0);
        }
        10%, 12% {
            transform: translate(-5px, -3px) skew(1deg, -2deg);
            opacity: 0.5;
            clip-path: inset(50% 0 25% 0);
        }
        11%, 13% {
            transform: translate(4px, -7px) skew(-1deg) scaleX(1.5) scaleY(1.25);
            opacity: 0.7;
            clip-path: inset(0 35% 40% 0);
        }
        14%, 82% {
            transform: translate(-5px, -3px) skew(1deg, -1deg);
            opacity: 0.3;
            clip-path: inset(30% 5% 25% 40%);
        }
        75%, 83% {
            transform: translate(-9px, 2px) skew(-1deg, 0);
            opacity: 0.2;
            clip-path: inset(0 35% 45% 10%);
        }
    }
    
    @keyframes glitch-red {
        6%, 14%, 70%, 78% {
            transform: none;
            opacity: 0;
            clip-path: inset(0 0 0 0);
        }
        10%, 12% {
            transform: translate(6px, 4px) skew(1deg);
            opacity: 0.5;
            clip-path: inset(5% 0 10% 0);
        }
        11%, 13% {
            transform: translate(-4px, 5px) skew(0, -1deg);
            opacity: 0.7;
            clip-path: inset(5% 0 10% 0);
        }
        14%, 82% {
            transform: translate(-7px, -4px) skew(1deg, -1deg);
            opacity: 0.2;
            clip-path: inset(50% 25% 25% 0);
        }
        75%, 80% {
            transform: translate(4px, -6px) skew(-1deg) scaleX(2) scaleY(1.25);
            opacity: 0.3;
            clip-path: inset(0 0 20% 50%);
        }
    }
    
    .slow {
        animation-duration: 3.5s;
    }
    
    .medium {
        animation-duration: 2.5s;
    }
    
    .fast {
        animation-duration: 1.5s;
    }
    
    .active .blueShift, .active .redShift {
        animation-play-state: running;
    }
    
    .glitchFx:not(.active) .blueShift,
    .glitchFx:not(.active) .redShift {
        animation-play-state: paused;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/GlitchFx.tsx
    ```tsx
    "use client";
    
    import React, { useEffect, useState, forwardRef, useCallback } from "react";
    import styles from "./GlitchFx.module.scss";
    import { Flex } from "./Flex";
    import classNames from "classnames";
    
    interface GlitchFxProps extends React.ComponentProps<typeof Flex> {
      children: React.ReactNode;
      speed?: "slow" | "medium" | "fast";
      interval?: number;
      trigger?: "instant" | "hover" | "custom";
      continuous?: boolean;
    }
    
    const GlitchFx = forwardRef<HTMLDivElement, GlitchFxProps>(
      (
        {
          children,
          speed = "medium",
          interval = 2500,
          trigger = "instant",
          continuous = true,
          ...rest
        },
        ref,
      ) => {
        const [isGlitching, setIsGlitching] = useState(continuous || trigger === "instant");
    
        useEffect(() => {
          if (continuous || trigger === "instant") {
            setIsGlitching(true);
          }
        }, [continuous, trigger]);
    
        const handleMouseEnter = () => {
          if (trigger === "hover") {
            setIsGlitching(true);
          }
        };
    
        const handleMouseLeave = () => {
          if (trigger === "hover") {
            setIsGlitching(false);
          }
        };
    
        const triggerGlitch = useCallback(() => {
          if (trigger === "custom") {
            setIsGlitching(true);
            setTimeout(() => setIsGlitching(false), 500);
          }
        }, [trigger]);
    
        useEffect(() => {
          if (trigger === "custom") {
            const glitchInterval = setInterval(triggerGlitch, interval);
            return () => clearInterval(glitchInterval);
          }
        }, [trigger, interval, triggerGlitch]);
    
        const speedClass = styles[speed];
    
        return (
          <Flex
            ref={ref}
            position="relative"
            inline
            zIndex={0}
            className={classNames(speedClass, isGlitching && styles.active)}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
            {...rest}
          >
            <Flex fillWidth inline zIndex={1}>
              {children}
            </Flex>
    
            <Flex
              inline
              position="absolute"
              top="0"
              left="0"
              fill
              zIndex={0}
              opacity={50}
              className={classNames(styles.glitchLayer, styles.blueShift)}
            >
              {children}
            </Flex>
    
            <Flex
              inline
              position="absolute"
              top="0"
              left="0"
              fill
              zIndex={0}
              opacity={50}
              className={classNames(styles.glitchLayer, styles.redShift)}
            >
              {children}
            </Flex>
          </Flex>
        );
      },
    );
    
    GlitchFx.displayName = "GlitchFx";
    export { GlitchFx };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Grid.tsx
    ```tsx
    "use client";
    
    import React, { CSSProperties, forwardRef } from "react";
    import classNames from "classnames";
    
    import {
      GridProps,
      SpacingProps,
      SizeProps,
      StyleProps,
      CommonProps,
      DisplayProps,
      ConditionalProps,
    } from "../interfaces";
    import { SpacingToken, ColorScheme, ColorWeight } from "../types";
    
    interface ComponentProps
      extends GridProps,
        SpacingProps,
        SizeProps,
        StyleProps,
        CommonProps,
        DisplayProps,
        ConditionalProps {}
    
    const Grid = forwardRef<HTMLDivElement, ComponentProps>(
      (
        {
          as: Component = "div",
          inline,
          columns,
          gap,
          position = "relative",
          aspectRatio,
          align,
          textVariant,
          textSize,
          textWeight,
          textType,
          tabletColumns,
          mobileColumns,
          padding,
          paddingLeft,
          paddingRight,
          paddingTop,
          paddingBottom,
          paddingX,
          paddingY,
          margin,
          marginLeft,
          marginRight,
          marginTop,
          marginBottom,
          marginX,
          marginY,
          dark,
          light,
          width,
          height,
          maxWidth,
          minWidth,
          minHeight,
          maxHeight,
          top,
          right,
          bottom,
          left,
          fit,
          fill,
          fillWidth = false,
          fillHeight = false,
          fitWidth,
          fitHeight,
          hide,
          show,
          background,
          solid,
          opacity,
          transition,
          pointerEvents,
          border,
          borderTop,
          borderRight,
          borderBottom,
          borderLeft,
          borderStyle,
          borderWidth,
          radius,
          topRadius,
          rightRadius,
          bottomRadius,
          leftRadius,
          topLeftRadius,
          topRightRadius,
          bottomLeftRadius,
          bottomRightRadius,
          overflow,
          overflowX,
          overflowY,
          cursor,
          zIndex,
          shadow,
          className,
          style,
          children,
          ...rest
        },
        ref,
      ) => {
        const generateDynamicClass = (type: string, value: string | "-1" | undefined) => {
          if (!value) return undefined;
    
          if (value === "transparent") {
            return `transparent-border`;
          }
    
          if (value === "surface" || value === "page" || value === "transparent") {
            return `${value}-${type}`;
          }
    
          const parts = value.split("-");
          if (parts.includes("alpha")) {
            const [scheme, , weight] = parts;
            return `${scheme}-${type}-alpha-${weight}`;
          }
    
          const [scheme, weight] = value.split("-") as [ColorScheme, ColorWeight];
          return `${scheme}-${type}-${weight}`;
        };
    
        const parseDimension = (
          value: number | SpacingToken | undefined,
          type: "width" | "height",
        ): string | undefined => {
          if (value === undefined) return undefined;
          if (typeof value === "number") return `${value}rem`;
          if (
            [
              "0",
              "1",
              "2",
              "4",
              "8",
              "12",
              "16",
              "20",
              "24",
              "32",
              "40",
              "48",
              "56",
              "64",
              "80",
              "104",
              "128",
              "160",
            ].includes(value)
          ) {
            return `var(--static-space-${value})`;
          }
          if (["xs", "s", "m", "l", "xl"].includes(value)) {
            return `var(--responsive-${type}-${value})`;
          }
          return undefined;
        };
    
        const classes = classNames(
          inline ? "display-inline-grid" : "display-grid",
          fit && "fit",
          fitWidth && "fit-width",
          fitHeight && "fit-height",
          fill && "fill",
          (fillWidth || maxWidth) && "fill-width",
          (fillHeight || maxHeight) && "fill-height",
          columns && `columns-${columns}`,
          tabletColumns && `tablet-columns-${tabletColumns}`,
          mobileColumns && `mobile-columns-${mobileColumns}`,
          overflow && `overflow-${overflow}`,
          overflowX && `overflow-x-${overflowX}`,
          overflowY && `overflow-y-${overflowY}`,
          padding && `p-${padding}`,
          paddingLeft && `pl-${paddingLeft}`,
          paddingRight && `pr-${paddingRight}`,
          paddingTop && `pt-${paddingTop}`,
          paddingBottom && `pb-${paddingBottom}`,
          paddingX && `px-${paddingX}`,
          paddingY && `py-${paddingY}`,
          margin && `m-${margin}`,
          marginLeft && `ml-${marginLeft}`,
          marginRight && `mr-${marginRight}`,
          marginTop && `mt-${marginTop}`,
          marginBottom && `mb-${marginBottom}`,
          marginX && `mx-${marginX}`,
          marginY && `my-${marginY}`,
          gap && `g-${gap}`,
          top && `top-${top}`,
          right && `right-${right}`,
          bottom && `bottom-${bottom}`,
          left && `left-${left}`,
          generateDynamicClass("background", background),
          generateDynamicClass("solid", solid),
          generateDynamicClass(
            "border",
            border || borderTop || borderRight || borderBottom || borderLeft,
          ),
          (border || borderTop || borderRight || borderBottom || borderLeft) &&
            !borderStyle &&
            "border-solid",
          border && !borderWidth && `border-1`,
          (borderTop || borderRight || borderBottom || borderLeft) && "border-reset",
          borderTop && "border-top-1",
          borderRight && "border-right-1",
          borderBottom && "border-bottom-1",
          borderLeft && "border-left-1",
          borderWidth && `border-${borderWidth}`,
          borderStyle && `border-${borderStyle}`,
          radius === "full" ? "radius-full" : radius && `radius-${radius}`,
          topRadius && `radius-${topRadius}-top`,
          rightRadius && `radius-${rightRadius}-right`,
          bottomRadius && `radius-${bottomRadius}-bottom`,
          leftRadius && `radius-${leftRadius}-left`,
          topLeftRadius && `radius-${topLeftRadius}-top-left`,
          topRightRadius && `radius-${topRightRadius}-top-right`,
          bottomLeftRadius && `radius-${bottomLeftRadius}-bottom-left`,
          bottomRightRadius && `radius-${bottomRightRadius}-bottom-right`,
          hide === "s" && `${hide}-grid-hide`,
          show === "s" && `${show}-grid-show`,
          pointerEvents && `pointer-events-${pointerEvents}`,
          transition && `transition-${transition}`,
          shadow && `shadow-${shadow}`,
          position && `position-${position}`,
          zIndex && `z-index-${zIndex}`,
          textType && `font-${textType}`,
          cursor && `cursor-${cursor}`,
          dark && "dark-grid",
          light && "light-grid",
          className,
        );
    
        const combinedStyle: CSSProperties = {
          maxWidth: parseDimension(maxWidth, "width"),
          minWidth: parseDimension(minWidth, "width"),
          minHeight: parseDimension(minHeight, "height"),
          maxHeight: parseDimension(maxHeight, "height"),
          width: parseDimension(width, "width"),
          height: parseDimension(height, "height"),
          aspectRatio: aspectRatio,
          textAlign: align,
          ...style,
        };
    
        return (
          <Component ref={ref} className={classes} style={combinedStyle} {...rest}>
            {children}
          </Component>
        );
      },
    );
    
    Grid.displayName = "Grid";
    
    export { Grid };
    export type { GridProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Heading.tsx
    ```tsx
    "use client";
    
    import React, { ElementType, ComponentPropsWithoutRef } from "react";
    import classNames from "classnames";
    
    import { TextProps, CommonProps, SpacingProps } from "../interfaces";
    import { ColorScheme, ColorWeight, TextVariant, SpacingToken } from "../types";
    
    type HeadingProps<T extends ElementType> = TextProps<T> &
      CommonProps &
      SpacingProps &
      ComponentPropsWithoutRef<T>;
    
    const Heading = <T extends ElementType = "h1">({
      as,
      variant,
      size,
      weight,
      onBackground,
      onSolid,
      align,
      wrap = "balance",
      padding,
      paddingLeft,
      paddingRight,
      paddingTop,
      paddingBottom,
      paddingX,
      paddingY,
      margin,
      marginLeft,
      marginRight,
      marginTop,
      marginBottom,
      marginX,
      marginY,
      children,
      style,
      className,
      ...props
    }: HeadingProps<T>) => {
      const Component = as || "h1";
    
      if (variant && (size || weight)) {
        console.warn("When 'variant' is set, 'size' and 'weight' are ignored.");
      }
    
      if (onBackground && onSolid) {
        console.warn(
          "You cannot use both 'onBackground' and 'onSolid' props simultaneously. Only one will be applied.",
        );
      }
    
      const getVariantClasses = (variant: TextVariant) => {
        const [fontType, weight, size] = variant.split("-");
        return [`font-${fontType}`, `font-${weight}`, `font-${size}`];
      };
    
      const sizeClass = size ? `font-${size}` : "font-m";
      const weightClass = weight ? `font-${weight}` : "font-strong";
    
      const classes = variant ? getVariantClasses(variant) : [sizeClass, weightClass];
    
      let colorClass = "neutral-on-background-strong";
      if (onBackground) {
        const [scheme, weight] = onBackground.split("-") as [ColorScheme, ColorWeight];
        colorClass = `${scheme}-on-background-${weight}`;
      } else if (onSolid) {
        const [scheme, weight] = onSolid.split("-") as [ColorScheme, ColorWeight];
        colorClass = `${scheme}-on-solid-${weight}`;
      }
    
      const generateClassName = (prefix: string, token: SpacingToken | undefined) => {
        return token ? `${prefix}-${token}` : undefined;
      };
    
      const combinedClasses = classNames(
        ...classes,
        colorClass,
        className,
        generateClassName("p", padding),
        generateClassName("pl", paddingLeft),
        generateClassName("pr", paddingRight),
        generateClassName("pt", paddingTop),
        generateClassName("pb", paddingBottom),
        generateClassName("px", paddingX),
        generateClassName("py", paddingY),
        generateClassName("m", margin),
        generateClassName("ml", marginLeft),
        generateClassName("mr", marginRight),
        generateClassName("mt", marginTop),
        generateClassName("mb", marginBottom),
        generateClassName("mx", marginX),
        generateClassName("my", marginY),
      );
    
      return (
        <Component
          className={combinedClasses}
          style={{
            textAlign: align,
            textWrap: wrap,
            ...style,
          }}
          {...props}
        >
          {children}
        </Component>
      );
    };
    
    Heading.displayName = "Heading";
    
    export { Heading };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/HeadingLink.module.scss
    ```scss
    .control {
        cursor: pointer;
    
        &:hover {
            .visibility {
                opacity: 1;
            }
    
            .text {
                text-decoration-line: underline;
            }
        }
    }
    
    .text {
        text-decoration-thickness: 1px;
        text-underline-offset: 0.25em;
        text-decoration-color: var(--neutral-border-strong);
    }
    
    .visibility {
        opacity: 0;
        transform: scale(0.875);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/HeadingLink.tsx
    ```tsx
    "use client";
    
    import React from "react";
    import { Heading, Flex, IconButton, useToast } from "@/once-ui/components";
    
    import styles from "./HeadingLink.module.scss";
    
    interface HeadingLinkProps {
      id: string;
      as: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
      children: React.ReactNode;
      style?: React.CSSProperties;
    }
    
    export const HeadingLink: React.FC<HeadingLinkProps> = ({ id, as, children, style }) => {
      const { addToast } = useToast();
    
      const copyURL = (id: string): void => {
        const url = `${window.location.origin}${window.location.pathname}#${id}`;
        navigator.clipboard.writeText(url).then(
          () => {
            addToast({
              variant: "success",
              message: "Link copied to clipboard.",
            });
          },
          () => {
            addToast({
              variant: "danger",
              message: "Failed to copy link.",
            });
          },
        );
      };
    
      const variantMap = {
        h1: "display-strong-xs",
        h2: "heading-strong-xl",
        h3: "heading-strong-l",
        h4: "heading-strong-m",
        h5: "heading-strong-s",
        h6: "heading-strong-xs",
      } as const;
    
      const variant = variantMap[as];
    
      return (
        <Flex
          style={style}
          onClick={() => copyURL(id)}
          className={styles.control}
          vertical="center"
          gap="8"
        >
          <Heading className={styles.text} id={id} variant={variant} as={as}>
            {children}
          </Heading>
          <IconButton
            className={styles.visibility}
            size="m"
            icon="openLink"
            variant="secondary"
            tooltip="Copy"
            tooltipPosition="right"
          />
        </Flex>
      );
    };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/HoloFx.module.scss
    ```scss
    .overlay {
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        pointer-events: none;
    }
    
    .holoFx {
        isolation: isolate;
        z-index: 0;
    
        &:hover {
            .burn {
                transform: translateX(1px) translateY(1px);
                opacity: var(--burn-opacity);
                z-index: 1;
            }
    
            .shine {
                transform: translateX(-1px) translateY(-1px);
                opacity: var(--light-opacity);
                z-index: 2;
            }
    
            .texture {
                opacity: var(--texture-opacity);
                transform: translateX(calc(var(--gradient-pos-x) / 50)) scale(1.1);
                background-size: 150% 150%;
                background-position: center;
                z-index: 3;
            }
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/HeadingNav.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, useEffect, useState, useRef, useCallback } from "react";
    import { Column, Flex, Row, SmartLink, Text } from "@/once-ui/components";
    import { useHeadingLinks } from "@/once-ui/hooks/generateHeadingLinks";
    
    interface props extends React.ComponentProps<typeof Flex> {}
    
    const HeadingNav = forwardRef<HTMLDivElement, props>(({ className, style, ...rest }, ref) => {
      const [activeHeadingId, setActiveHeadingId] = useState<string | null>(null);
      const [activeIndex, setActiveIndex] = useState(0);
      const indicatorRef = useRef<HTMLDivElement>(null);
      const headings = useHeadingLinks();
      const observerRef = useRef<IntersectionObserver | null>(null);
      const lastUpdateTimeRef = useRef<number>(0);
      const pendingUpdateRef = useRef<string | null>(null);
      const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
      const isUpdatingRef = useRef<boolean>(false);
    
      const updateActiveHeadingInternal = useCallback(
        (id: string) => {
          const index = headings.findIndex((h) => h.id === id);
          if (index !== -1) {
            setActiveHeadingId(id);
            setActiveIndex(index);
    
            if (indicatorRef.current) {
              indicatorRef.current.style.top = `calc(${index} * var(--static-space-32))`;
            }
    
            lastUpdateTimeRef.current = Date.now();
            isUpdatingRef.current = false;
          }
        },
        [headings],
      );
    
      useEffect(() => {
        if (headings.length === 0) return;
    
        setActiveHeadingId(headings[0]?.id || null);
    
        const headingElements = headings
          .map((heading) => document.getElementById(heading.id))
          .filter(Boolean) as HTMLElement[];
    
        const headingPositions = new Map<string, number>();
    
        const calculateHeadingPositions = () => {
          headingElements.forEach((el) => {
            if (el) {
              headingPositions.set(el.id, el.getBoundingClientRect().top + window.scrollY - 150);
            }
          });
        };
    
        calculateHeadingPositions();
    
        const debouncedUpdateActiveHeading = (id: string) => {
          const now = Date.now();
    
          if (isUpdatingRef.current) {
            pendingUpdateRef.current = id;
            return;
          }
    
          if (now - lastUpdateTimeRef.current < 200) {
            pendingUpdateRef.current = id;
    
            if (scrollTimeoutRef.current) {
              clearTimeout(scrollTimeoutRef.current);
            }
    
            scrollTimeoutRef.current = setTimeout(() => {
              if (pendingUpdateRef.current) {
                isUpdatingRef.current = true;
                updateActiveHeadingInternal(pendingUpdateRef.current);
                pendingUpdateRef.current = null;
              }
            }, 200);
    
            return;
          }
    
          isUpdatingRef.current = true;
          updateActiveHeadingInternal(id);
        };
    
        const findActiveHeading = () => {
          const scrollPosition = window.scrollY;
    
          let activeId = headings[0]?.id;
          let closestPosition = -Infinity;
    
          headingPositions.forEach((position, id) => {
            if (position <= scrollPosition && position > closestPosition) {
              closestPosition = position;
              activeId = id;
            }
          });
    
          if (activeId) {
            debouncedUpdateActiveHeading(activeId);
          }
        };
    
        let ticking = false;
        const handleScroll = () => {
          if (!ticking) {
            window.requestAnimationFrame(() => {
              findActiveHeading();
              ticking = false;
            });
            ticking = true;
          }
        };
    
        window.addEventListener("scroll", handleScroll, { passive: true });
    
        observerRef.current = new IntersectionObserver(
          (entries) => {
            if (Date.now() - lastUpdateTimeRef.current > 400) {
              const enteringEntries = entries.filter((entry) => entry.isIntersecting);
    
              if (enteringEntries.length > 0) {
                enteringEntries.sort((a, b) => {
                  const aRect = a.boundingClientRect;
                  const bRect = b.boundingClientRect;
                  return aRect.top - bRect.top;
                });
    
                debouncedUpdateActiveHeading(enteringEntries[0].target.id);
              }
            }
          },
          {
            rootMargin: "-150px 0px -30% 0px",
            threshold: [0, 0.1, 0.5, 1],
          },
        );
    
        headingElements.forEach((element) => {
          if (element && observerRef.current) {
            observerRef.current.observe(element);
          }
        });
    
        window.addEventListener("resize", calculateHeadingPositions);
    
        findActiveHeading();
    
        return () => {
          if (observerRef.current) {
            headingElements.forEach((element) => {
              if (element) observerRef.current?.unobserve(element);
            });
          }
          window.removeEventListener("scroll", handleScroll);
          window.removeEventListener("resize", calculateHeadingPositions);
    
          if (scrollTimeoutRef.current) {
            clearTimeout(scrollTimeoutRef.current);
          }
        };
      }, [headings, updateActiveHeadingInternal]);
    
      const handleHeadingClick = (id: string, index: number) => {
        setActiveHeadingId(id);
        setActiveIndex(index);
    
        if (indicatorRef.current) {
          indicatorRef.current.style.top = `calc(${index} * var(--static-space-32))`;
        }
    
        lastUpdateTimeRef.current = Date.now();
      };
    
      return (
        <Row paddingLeft="8" gap="12" className={className} style={style} ref={ref} {...rest}>
          <Row width="2" background="neutral-alpha-medium" radius="full" overflow="hidden">
            <Row
              ref={indicatorRef}
              height="32"
              paddingY="4"
              fillWidth
              position="absolute"
              style={{
                top: `calc(${activeIndex} * var(--static-space-32))`,
                transition: "top 0.3s ease",
              }}
            >
              <Row fillWidth solid="brand-strong" radius="full" />
            </Row>
          </Row>
          <Column fillWidth>
            {headings.map((heading, index) => {
              const indent = heading.level - 2;
              const isActive = heading.id === activeHeadingId;
    
              return (
                <Flex key={heading.id} fillWidth height="32" paddingX="4">
                  <SmartLink
                    fillWidth
                    href={"#" + heading.id}
                    onClick={(e) => {
                      e.preventDefault();
                      const target = document.getElementById(heading.id);
                      if (target) {
                        const targetPosition =
                          target.getBoundingClientRect().top + window.scrollY - 150;
                        window.scrollTo({
                          top: targetPosition,
                          behavior: "smooth",
                        });
    
                        handleHeadingClick(heading.id, index);
                      }
                    }}
                    style={{
                      paddingLeft: `calc(${indent} * var(--static-space-8))`,
                      color: isActive
                        ? "var(--neutral-on-background-strong)"
                        : "var(--neutral-on-background-weak)",
                      transition: "color 0.2s ease",
                    }}
                  >
                    <Text
                      variant={isActive ? "body-strong-s" : "body-default-s"}
                      style={{
                        overflow: "hidden",
                        textOverflow: "ellipsis",
                        whiteSpace: "nowrap",
                        transition: "font-weight 0.2s ease",
                      }}
                    >
                      {heading.text}
                    </Text>
                  </SmartLink>
                </Flex>
              );
            })}
          </Column>
        </Row>
      );
    });
    
    HeadingNav.displayName = "HeadingNav";
    export { HeadingNav };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/HoloFx.tsx
    ```tsx
    "use client";
    
    import React, { useEffect, useRef } from "react";
    import styles from "./HoloFx.module.scss";
    import { Flex } from ".";
    import { CSSProperties } from "react";
    import classNames from "classnames";
    
    interface MaskOptions {
      maskPosition?: string;
    }
    
    interface HoloFxProps extends React.ComponentProps<typeof Flex> {
      children: React.ReactNode;
      shine?: {
        opacity?: number;
        filter?: string;
        blending?: CSSProperties["mixBlendMode"];
        mask?: MaskOptions;
      };
      burn?: {
        opacity?: number;
        filter?: string;
        blending?: CSSProperties["mixBlendMode"];
        mask?: MaskOptions;
      };
      texture?: {
        opacity?: number;
        filter?: string;
        blending?: CSSProperties["mixBlendMode"];
        image?: string;
        mask?: MaskOptions;
      };
    }
    
    const formatMask = (maskPosition: string = "100 200"): string => {
      const [x, y] = maskPosition.split(" ");
      const formattedX = `${x}%`;
      const formattedY = `${y ? y : x}%`;
      return `radial-gradient(ellipse ${formattedX} ${formattedY} at var(--gradient-pos-x, 50%) var(--gradient-pos-y, 50%), black 50%, transparent 100%)`;
    };
    
    const getMaskStyle = (mask?: MaskOptions): string => {
      return mask?.maskPosition ? formatMask(mask.maskPosition) : formatMask();
    };
    
    const HoloFx: React.FC<HoloFxProps> = ({ children, shine, burn, texture, ...rest }) => {
      const ref = useRef<HTMLDivElement>(null);
      const lastCallRef = useRef<number>(0);
    
      const shineDefaults = {
        opacity: 30,
        blending: "color-dodge" as CSSProperties["mixBlendMode"],
        mask: getMaskStyle(shine?.mask),
        ...shine,
      };
    
      const burnDefaults = {
        opacity: 30,
        filter: "brightness(0.2) contrast(2)",
        blending: "color-dodge" as CSSProperties["mixBlendMode"],
        mask: getMaskStyle(burn?.mask),
        ...burn,
      };
    
      const textureDefaults = {
        opacity: 10,
        blending: "color-dodge" as CSSProperties["mixBlendMode"],
        image:
          "repeating-linear-gradient(-45deg, var(--static-white) 0, var(--static-white) 1px, transparent 3px, transparent 2px)",
        mask: getMaskStyle(texture?.mask),
        ...texture,
      };
    
      useEffect(() => {
        const handleMouseMove = (event: MouseEvent) => {
          const now = Date.now();
          if (now - lastCallRef.current < 16) return;
          lastCallRef.current = now;
    
          const element = ref.current;
          if (!element) return;
    
          const rect = element.getBoundingClientRect();
          const offsetX = event.clientX - rect.left;
          const offsetY = event.clientY - rect.top;
    
          const centerX = rect.width / 2;
          const centerY = rect.height / 2;
    
          const deltaX = ((offsetX - centerX) / centerX) * 100;
          const deltaY = ((offsetY - centerY) / centerY) * 100;
    
          element.style.setProperty("--gradient-pos-x", `${deltaX}%`);
          element.style.setProperty("--gradient-pos-y", `${deltaY}%`);
        };
    
        document.addEventListener("mousemove", handleMouseMove);
    
        return () => {
          document.removeEventListener("mousemove", handleMouseMove);
        };
      }, []);
    
      return (
        <Flex overflow="hidden" className={styles.holoFx} ref={ref} {...rest}>
          <Flex fill className={styles.base}>
            {children}
          </Flex>
          <Flex
            hide="m"
            position="absolute"
            fill
            pointerEvents="none"
            className={classNames(styles.overlay, styles.burn)}
            style={{
              ["--burn-opacity" as any]: burnDefaults.opacity + "%",
              filter: burnDefaults.filter,
              mixBlendMode: burnDefaults.blending,
              maskImage: burnDefaults.mask as string,
            }}
          >
            {children}
          </Flex>
          <Flex
            hide="m"
            position="absolute"
            fill
            pointerEvents="none"
            className={classNames(styles.overlay, styles.shine)}
            style={{
              ["--shine-opacity" as any]: shineDefaults.opacity + "%",
              filter: shineDefaults.filter,
              mixBlendMode: shineDefaults.blending,
              maskImage: shineDefaults.mask as string,
            }}
          >
            {children}
          </Flex>
          <Flex
            hide="m"
            position="absolute"
            fill
            pointerEvents="none"
            className={classNames(styles.overlay, styles.texture)}
            style={{
              ["--texture-opacity" as any]: textureDefaults.opacity + "%",
              backgroundImage: textureDefaults.image,
              filter: textureDefaults.filter,
              mixBlendMode: textureDefaults.blending,
              maskImage: textureDefaults.mask as string,
            }}
          ></Flex>
        </Flex>
      );
    };
    
    HoloFx.displayName = "HoloFx";
    export { HoloFx };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Icon.module.scss
    ```scss
    .xs { 
        font-size: var(--static-space-16)
    }
    
    .s { 
        font-size: var(--static-space-20)
    }
    
    .m { 
        font-size: var(--static-space-24)
    }
    
    .l { 
        font-size: var(--static-space-32)
    }
    
    .xl { 
        font-size: var(--static-space-40)
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Icon.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, useState, useEffect, ReactNode } from "react";
    import classNames from "classnames";
    import { IconType, } from "react-icons";
    import { iconLibrary, IconName } from "../icons"; 
    import { ColorScheme, ColorWeight } from "../types";
    import { Flex, Tooltip } from ".";
    import styles from "./Icon.module.scss";
    import iconStyles from "./IconButton.module.scss";
    
    interface IconProps extends React.ComponentProps<typeof Flex> {
      name: IconName;
      onBackground?: `${ColorScheme}-${ColorWeight}`;
      onSolid?: `${ColorScheme}-${ColorWeight}`;
      size?: "xs" | "s" | "m" | "l" | "xl";
      decorative?: boolean;
      tooltip?: ReactNode;
      tooltipPosition?: "top" | "bottom" | "left" | "right";
    }
    
    const Icon = forwardRef<HTMLDivElement, IconProps>(
      (
        {
          name,
          onBackground,
          onSolid,
          size = "m",
          decorative = true,
          tooltip,
          tooltipPosition = "top",
          ...rest
        },
        ref,
      ) => {
        const IconComponent: IconType | undefined = iconLibrary[name];
        const [isTooltipVisible, setTooltipVisible] = useState(false);
        const [isHover, setIsHover] = useState(false);
        
        let colorClass = "";
        
        if (onBackground) {
          const [scheme, weight] = onBackground.split("-") as [ColorScheme, ColorWeight];
          colorClass = `${scheme}-on-background-${weight}`;
        } else if (onSolid) {
          const [scheme, weight] = onSolid.split("-") as [ColorScheme, ColorWeight];
          colorClass = `${scheme}-on-solid-${weight}`;
        }
    
        useEffect(() => {
          let timer: NodeJS.Timeout;
          if (isHover) {
            timer = setTimeout(() => {
              setTooltipVisible(true);
            }, 400);
          } else {
            setTooltipVisible(false);
          }
    
          return () => clearTimeout(timer);
        }, [isHover]);
    
        if (!IconComponent) {
          console.warn(`Icon "${name}" does not exist in the library.`);
          return null;
        }
    
        if (onBackground && onSolid) {
          console.warn(
            "You cannot use both 'onBackground' and 'onSolid' props simultaneously. Only one will be applied.",
          );
        }
    
        return (
          <Flex
            inline
            fit
            as="span"
            ref={ref}
            className={classNames(colorClass, styles.icon, styles[size])}
            role={decorative ? "presentation" : undefined}
            aria-hidden={decorative ? "true" : undefined}
            aria-label={decorative ? undefined : name}
            onMouseEnter={() => setIsHover(true)}
            onMouseLeave={() => setIsHover(false)}
            {...rest}
          >
            <IconComponent />
            {tooltip && isTooltipVisible && (
              <Flex position="absolute" zIndex={1} className={iconStyles[tooltipPosition]}>
                <Tooltip label={tooltip} />
              </Flex>
            )}
          </Flex>
        );
      },
    );
    
    Icon.displayName = "Icon";
    
    export { Icon };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/IconButton.module.scss
    ```scss
    .top {
        bottom: calc(100% + var(--static-space-2));
        left: 50%;
        transform: translateX(-50%);
    }
    
    .bottom {
        top: calc(100% + var(--static-space-2));
        left: 50%;
        transform: translateX(-50%);
    }
    
    .left {
        right: calc(100% + var(--static-space-2));
        top: 50%;
        transform: translateY(-50%);
    }
    
    .right {
        left: calc(100% + var(--static-space-2));
        top: 50%;
        transform: translateY(-50%);
    }
    
    .s {
        min-height: var(--static-space-24);
        min-width: var(--static-space-24);
        height: var(--static-space-24);
        width: var(--static-space-24);
    }
    
    .m {
        min-height: var(--static-space-32);
        min-width: var(--static-space-32);
        height: var(--static-space-32);
        width: var(--static-space-32);
    }
    
    .l {
        min-height: var(--static-space-40);
        min-width: var(--static-space-40);
        height: var(--static-space-40);
        width: var(--static-space-40);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/IconButton.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, useState, useEffect, ReactNode } from "react";
    import { ElementType } from "./ElementType";
    import { Flex, Icon, Tooltip } from ".";
    import buttonStyles from "./Button.module.scss";
    import iconStyles from "./IconButton.module.scss";
    import classNames from "classnames";
    import { IconName } from "../icons";
    
    interface CommonProps {
      icon?: IconName;
      id?: string;
      size?: "s" | "m" | "l";
      radius?:
        | "none"
        | "top"
        | "right"
        | "bottom"
        | "left"
        | "top-left"
        | "top-right"
        | "bottom-right"
        | "bottom-left";
      tooltip?: string;
      tooltipPosition?: "top" | "bottom" | "left" | "right";
      variant?: "primary" | "secondary" | "tertiary" | "danger" | "ghost";
      className?: string;
      style?: React.CSSProperties;
      href?: string;
      children?: ReactNode;
    }
    
    export type IconButtonProps = CommonProps &
      React.ButtonHTMLAttributes<HTMLButtonElement>;
    type AnchorProps = CommonProps & React.AnchorHTMLAttributes<HTMLAnchorElement>;
    
    const IconButton = forwardRef<HTMLButtonElement, IconButtonProps | AnchorProps>(
      (
        {
          icon = "refresh",
          size = "m",
          id,
          radius,
          tooltip,
          tooltipPosition = "top",
          variant = "primary",
          href,
          children,
          className,
          style,
          ...props
        },
        ref
      ) => {
        const [isTooltipVisible, setTooltipVisible] = useState(false);
        const [isHover, setIsHover] = useState(false);
    
        useEffect(() => {
          let timer: NodeJS.Timeout;
          if (isHover) {
            timer = setTimeout(() => {
              setTooltipVisible(true);
            }, 400);
          } else {
            setTooltipVisible(false);
          }
    
          return () => clearTimeout(timer);
        }, [isHover]);
    
        const content = (
          <>
            {children ? children : <Icon name={icon} size="s" />}
            {tooltip && isTooltipVisible && (
              <Flex
                position="absolute"
                zIndex={1}
                className={iconStyles[tooltipPosition]}
              >
                <Tooltip label={tooltip} />
              </Flex>
            )}
          </>
        );
    
        const radiusSize = size === "s" || size === "m" ? "m" : "l";
    
        return (
          <ElementType
            id={id}
            href={href}
            ref={ref}
            className={classNames(
              buttonStyles.button,
              buttonStyles[variant],
              iconStyles[size],
              className,
              radius === "none"
                ? "radius-none"
                : radius
                ? `radius-${radiusSize}-${radius}`
                : `radius-${radiusSize}`,
              "text-decoration-none",
              "button",
              "cursor-interactive",
              className
            )}
            style={style}
            onMouseEnter={() => setIsHover(true)}
            onMouseLeave={() => setIsHover(false)}
            aria-label={tooltip || icon}
            {...props}
          >
            <Flex fill center>
              {content}
            </Flex>
          </ElementType>
        );
      }
    );
    
    IconButton.displayName = "IconButton";
    export { IconButton };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/index.ts
    ```ts
    export * from "./Accordion";
    export * from "./AccordionGroup";
    export * from "./Arrow";
    export * from "./Avatar";
    export * from "./AvatarGroup";
    export * from "./Badge";
    export * from "./Background";
    export * from "./Button";
    export * from "./Carousel";
    export * from "./Card";
    export * from "./Column";
    export * from "./Checkbox";
    export * from "./Chip";
    export * from "./ColorInput";
    export * from "./CompareImage";
    export * from "./DateInput";
    export * from "./DatePicker";
    export * from "./DateRangeInput";
    export * from "./DateRangePicker";
    export * from "./Dialog";
    export * from "./Dropdown";
    export * from "./DropdownWrapper";
    export * from "./Fade";
    export * from "./Feedback";
    export * from "./Flex";
    export * from "./GlitchFx";
    export * from "./Grid";
    export * from "./Heading";
    export * from "./HeadingLink";
    export * from "./HeadingNav";
    export * from "./HoloFx";
    export * from "./Icon";
    export * from "./IconButton";
    export * from "./InlineCode";
    export * from "./Input";
    export * from "./InteractiveDetails";
    export * from "./Kbar";
    export * from "./Kbd";
    export * from "./LetterFx";
    export * from "./Line";
    export * from "./Logo";
    export * from "./LogoCloud";
    export * from "./MegaMenu";
    export * from "./NavIcon";
    export * from "./NumberInput";
    export * from "./Option";
    export * from "./OTPInput";
    export * from "./PasswordInput";
    export * from "./RadioButton";
    export * from "./RevealFx";
    export * from "./Row";
    export * from "./Scroller";
    export * from "./SegmentedControl";
    export * from "./Select";
    export * from "./Skeleton";
    export * from "./SmartImage";
    export * from "./SmartLink";
    export * from "./Spinner";
    export * from "./StatusIndicator";
    export * from "./StylePanel";
    export * from "./StyleOverlay";
    export * from "./Switch";
    export * from "./Table";
    export * from "./Tag";
    export * from "./TagInput";
    export * from "./Text";
    export * from "./Textarea";
    export * from "./TiltFx";
    export * from "./Toast";
    export * from "./Toaster";
    export * from "./ToastProvider";
    export * from "./ToggleButton";
    export * from "./Tooltip";
    export * from "./ThemeSwitcher";
    export * from "./ThemeProvider";
    export * from "./User";
    export * from "./UserMenu";
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/InlineCode.module.scss
    ```scss
    .inlineCode {
        font-size: 80%;
        line-height: 125%;
        vertical-align: middle;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/InlineCode.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import styles from "./InlineCode.module.scss";
    import { Flex } from "./Flex";
    
    interface InlineCodeProps extends React.ComponentProps<typeof Flex> {
      children: ReactNode;
    }
    
    const InlineCode = forwardRef<HTMLDivElement, InlineCodeProps>(({ children, ...rest }, ref) => {
      return (
        <Flex
          as="span"
          inline
          fit
          ref={ref}
          radius="s"
          vertical="center"
          paddingX="4"
          paddingY="1"
          textType="code"
          background="neutral-alpha-weak"
          border="neutral-alpha-medium"
          className={styles.inlineCode}
          {...rest}
        >
          {children}
        </Flex>
      );
    });
    
    InlineCode.displayName = "InlineCode";
    
    export { InlineCode };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Input.module.scss
    ```scss
    .base {
        backdrop-filter: var(--backdrop-filter);
        min-height: var(--static-space-56);
    
        &.focused, &.filled {
            background-color: var(--neutral-background-strong);
            border-color: var(--neutral-border-medium);
        }
    
        &:focus-within, &:hover:not(:has(.suffix:hover)) {
            background-color: var(--neutral-alpha-medium);
        }
    
        &:has(.labelAsPlaceholder) {
            min-height: var(--static-space-48);
        }
    }
    
    .textareaBase {
        &::after {
            pointer-events: none;
            content: '';
            position: absolute;
            right: 0;
            bottom: 0;
            width: var(--static-space-32);
            height: var(--static-space-32);
            border: 1px solid var(--neutral-border-strong);
            transform: translateX(50%) translateY(50%) rotate(45deg);
            background-color: var(--neutral-alpha-weak);
        }
    
        ::-webkit-resizer {
            display: none;
        }
    }
    
    .label {
        position: absolute;
        left: var(--static-space-16);
        transition: transform 0.3s, top 0.3s, left 0.3s;
        color: var(--neutral-on-background-medium);
        pointer-events: none;
        transform-origin: left;
    }
    
    .inputLabel {
        top: 50%;
        transform: translateY(-50%);
    
        &.floating {
            transform: scale(0.75);
        }
    }
    
    .textareaLabel {
        top: var(--static-space-16);
    
        &.floating {
            transform: scale(0.75) translateY(calc(-1 * var(--static-space-16)));
        }
    }
    
    .s {
        min-height: var(--static-space-48);
    
        &:has(.labelAsPlaceholder) {
            min-height: var(--static-space-40);
        }
    
        .label {
            &.floating {
                top: var(--static-space-4);
            }
        }
    }
    
    .m {
        .label {
            &.floating {
                top: calc(var(--static-space-8) - var(--static-space-2));
            }
        }
    }
    
    .input {
        width: 100%;
        height: 100%;
        border: none;
        background: none;
        color: var(--neutral-on-background-strong);
        padding: 0 var(--static-space-16);
        outline: none;
    
        &.labelAsPlaceholder {
            padding-top: 0;
        }
    
        &.textarea.labelAsPlaceholder {
            padding-top: var(--static-space-12);
        }
    
        &:not(.labelAsPlaceholder) {
            padding-top: var(--static-space-16);
        }
    
        &.labelAsPlaceholder.hasChildren {
            padding-top: var(--static-space-16);
        }
    
        &::placeholder {
            color: var(--neutral-on-background-weak);
        }
    
        &:disabled {
            background-color: var(--neutral-solid-strong);
            color: var(--neutral-on-solid-weak);
        }
    
        &:autofill, &:-webkit-autofill {
            background-color: var(--static-transparent) !important;
            -webkit-box-shadow: 0 0 0 var(--static-space-32) var(--neutral-background-medium) inset !important;
            -webkit-text-fill-color: var(--neutral-on-background-strong) !important;
        }
    }
    
    .error {
        .base {
            background-color: var(--danger-background-medium);
            border-color: var(--danger-border-medium);
        }
    
        .input, .prefix, .suffix {
            color: var(--danger-on-background-medium);
        }
    
        .label {
            color: var(--danger-on-background-weak);
        }
    }
    
    .prefix, .suffix {
        align-self: center;
    }
    
    .input[type="color"] {
        opacity: 0;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Input.tsx
    ```tsx
    "use client";
    
    import React, {
      useState,
      useEffect,
      forwardRef,
      InputHTMLAttributes,
      useCallback,
      ReactNode,
    } from "react";
    import classNames from "classnames";
    import { Flex, Text } from ".";
    import styles from "./Input.module.scss";
    import useDebounce from "../hooks/useDebounce";
    
    interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
      id: string;
      label: string;
      height?: "s" | "m";
      error?: boolean;
      errorMessage?: ReactNode;
      description?: ReactNode;
      radius?:
        | "none"
        | "top"
        | "right"
        | "bottom"
        | "left"
        | "top-left"
        | "top-right"
        | "bottom-right"
        | "bottom-left";
      className?: string;
      style?: React.CSSProperties;
      hasPrefix?: ReactNode;
      hasSuffix?: ReactNode;
      labelAsPlaceholder?: boolean;
      validate?: (value: ReactNode) => ReactNode | null;
    }
    
    const Input = forwardRef<HTMLInputElement, InputProps>(
      (
        {
          id,
          label,
          height = "m",
          error = false,
          errorMessage,
          description,
          radius,
          className,
          style,
          hasPrefix,
          hasSuffix,
          labelAsPlaceholder = false,
          children,
          onFocus,
          onBlur,
          validate,
          ...props
        },
        ref,
      ) => {
        const [isFocused, setIsFocused] = useState(false);
        const [isFilled, setIsFilled] = useState(!!props.value);
        const [validationError, setValidationError] = useState<ReactNode | null>(null);
        const debouncedValue = useDebounce(props.value, 1000);
    
        const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {
          setIsFocused(true);
          if (onFocus) onFocus(event);
        };
    
        const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {
          setIsFocused(false);
          if (event.target.value) {
            setIsFilled(true);
          } else {
            setIsFilled(false);
          }
          if (onBlur) onBlur(event);
        };
    
        useEffect(() => {
          setIsFilled(!!props.value);
        }, [props.value]);
    
        const validateInput = useCallback(() => {
          if (!debouncedValue) {
            setValidationError(null);
            return;
          }
    
          if (validate) {
            const error = validate(debouncedValue);
            if (error) {
              setValidationError(error);
            } else {
              setValidationError(errorMessage || null);
            }
          } else {
            setValidationError(null);
          }
        }, [debouncedValue, validate, errorMessage]);
    
        useEffect(() => {
          validateInput();
        }, [debouncedValue, validateInput]);
    
        const displayError = validationError || errorMessage;
    
        const inputClassNames = classNames(styles.input, "font-body", "font-default", "font-m", {
          [styles.filled]: isFilled,
          [styles.focused]: isFocused,
          [styles.withPrefix]: hasPrefix,
          [styles.withSuffix]: hasSuffix,
          [styles.labelAsPlaceholder]: labelAsPlaceholder,
          [styles.hasChildren]: children,
          [styles.error]: displayError && debouncedValue !== "",
        });
    
        return (
          <Flex
            direction="column"
            gap="8"
            style={style}
            fillWidth
            fitHeight
            className={classNames(className, {
              [styles.error]: (error || (displayError && debouncedValue !== "")) && props.value !== "",
            })}
          >
            <Flex
              transition="micro-medium"
              border="neutral-medium"
              background="neutral-alpha-weak"
              overflow="hidden"
              vertical="stretch"
              className={classNames(
                styles.base,
                {
                  [styles.s]: height === "s",
                },
                {
                  [styles.m]: height === "m",
                },
                radius === "none" ? "radius-none" : radius ? `radius-l-${radius}` : "radius-l",
              )}
            >
              {hasPrefix && (
                <Flex paddingLeft="12" className={styles.prefix} position="static">
                  {hasPrefix}
                </Flex>
              )}
              <Flex fillWidth direction="column">
                <input
                  {...props}
                  ref={ref}
                  id={id}
                  placeholder={labelAsPlaceholder ? label : props.placeholder}
                  onFocus={handleFocus}
                  onBlur={handleBlur}
                  className={inputClassNames}
                  aria-describedby={displayError ? `${id}-error` : undefined}
                  aria-invalid={!!displayError}
                />
                {!labelAsPlaceholder && (
                  <Text
                    as="label"
                    variant="label-default-m"
                    htmlFor={id}
                    className={classNames(styles.label, styles.inputLabel, {
                      [styles.floating]: isFocused || isFilled,
                    })}
                  >
                    {label}
                  </Text>
                )}
                {children}
              </Flex>
              {hasSuffix && (
                <Flex paddingRight="12" className={styles.suffix} position="static">
                  {hasSuffix}
                </Flex>
              )}
            </Flex>
            {displayError && errorMessage !== false && (
              <Flex paddingX="16">
                <Text as="span" id={`${id}-error`} variant="body-default-s" onBackground="danger-weak">
                  {validationError || errorMessage}
                </Text>
              </Flex>
            )}
            {description && (
              <Flex paddingX="16">
                <Text
                  as="span"
                  id={`${id}-description`}
                  variant="body-default-s"
                  onBackground="neutral-weak"
                >
                  {description}
                </Text>
              </Flex>
            )}
          </Flex>
        );
      },
    );
    
    Input.displayName = "Input";
    
    export { Input };
    export type { InputProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/InteractiveDetails.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import { Text, Flex, IconButton, IconButtonProps } from ".";
    
    interface InteractiveDetailsProps {
      label?: React.ReactNode;
      description?: React.ReactNode;
      iconButtonProps?: IconButtonProps;
      onClick: () => void;
      className?: string;
      id?: string;
    }
    
    const InteractiveDetails: React.FC<InteractiveDetailsProps> = forwardRef<
      HTMLDivElement,
      InteractiveDetailsProps
    >(({ label, description, iconButtonProps, onClick, className, id }, ref) => {
      return (
        <Flex ref={ref} direction="column" className={className} onClick={onClick} id={id}>
          <Flex gap="4" vertical="center">
            <Text as="span" variant="label-default-m" onBackground="neutral-strong">
              {label}
            </Text>
            {iconButtonProps?.tooltip && (
              <div onClick={(e) => e.stopPropagation()}>
                <IconButton size="s" variant="ghost" icon="helpCircle" {...iconButtonProps} />
              </div>
            )}
          </Flex>
          {description && (
            <Text as="span" variant="body-default-s" onBackground="neutral-weak">
              {description}
            </Text>
          )}
        </Flex>
      );
    });
    
    InteractiveDetails.displayName = "InteractiveDetails";
    
    export { InteractiveDetails };
    export type { InteractiveDetailsProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Kbar.module.scss
    ```scss
    .overlay {
      animation: fadeIn 0.2s ease-out forwards;
      backdrop-filter: var(--backdrop-filter);
    
      &.closing {
        animation: fadeOut 0.2s ease-out forwards;
      }
    }
    
    .content {
      animation: scaleIn 0.2s ease-out forwards;
    
      &.closing {
        animation: scaleOut 0.2s ease-out forwards;
      }
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
        backdrop-filter: blur(0);
      }
      to {
        opacity: 1;
        backdrop-filter: var(--backdrop-filter);
      }
    }
    
    @keyframes fadeOut {
      from {
        opacity: 1;
        backdrop-filter: var(--backdrop-filter);
      }
      to {
        opacity: 0;
        backdrop-filter: blur(0);
      }
    }
    
    @keyframes scaleIn {
      from {
        opacity: 0;
        transform: scale(0.9);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }
    
    @keyframes scaleOut {
      from {
        opacity: 1;
        transform: scale(1);
      }
      to {
        opacity: 0;
        transform: scale(0.9);
      }
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Kbd.tsx
    ```tsx
    "use client";
    
    import React, { ReactNode, forwardRef } from "react";
    
    import { Flex, Text } from ".";
    
    interface KbdProps extends React.ComponentProps<typeof Flex> {
      label?: string;
      children?: ReactNode;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const Kbd = forwardRef<HTMLDivElement, KbdProps>(
      ({ label, children, className, style, ...rest }, ref) => (
        <Flex
          as="kbd"
          ref={ref}
          horizontal="center"
          minWidth="32"
          background="neutral-strong"
          radius="s"
          paddingX="4"
          paddingY="2"
          onBackground="neutral-medium"
          border="neutral-strong"
          className={className}
          style={style}
          {...rest}
        >
          <Text as="span" variant="label-default-s">
            {label || children}
          </Text>
        </Flex>
      ),
    );
    
    Kbd.displayName = "Kbd";
    
    export { Kbd };
    export type { KbdProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Kbar.tsx
    ```tsx
    "use client";
    
    import React, { useState, useEffect, useRef, useCallback, useMemo, ReactNode } from "react";
    import { Flex, Text, Icon, Column, Input, Option, Row } from ".";
    import { createPortal } from "react-dom";
    import { useRouter, usePathname } from "next/navigation";
    import styles from "./Kbar.module.scss";
    
    export interface KbarItem {
      id: string;
      name: string;
      section: string;
      shortcut: string[];
      keywords: string;
      href?: string;
      perform?: () => void;
      icon?: string;
      description?: ReactNode;
    }
    
    const SectionHeader: React.FC<{ label: string }> = ({ label }) => (
      <Flex 
        paddingX="12"
        paddingBottom="8"
        paddingTop="12"
        textVariant="label-default-s"
        onBackground="neutral-weak"
      >
        {label}
      </Flex>
    );
    
    interface KbarTriggerProps {
      onClick?: () => void;
      children: React.ReactNode;
      [key: string]: any; // Allow any additional props
    }
    
    export const KbarTrigger: React.FC<KbarTriggerProps> = ({ onClick, children, ...rest }) => {
      return (
        <Flex onClick={onClick} {...rest}>
          {children}
        </Flex>
      );
    };
    
    interface KbarContentProps {
      isOpen: boolean;
      onClose: () => void;
      items: KbarItem[];
    }
    
    export const KbarContent: React.FC<KbarContentProps> = ({ isOpen, onClose, items }) => {
      const [searchQuery, setSearchQuery] = useState("");
      const [highlightedIndex, setHighlightedIndex] = useState<number | null>(null);
      const containerRef = useRef<HTMLDivElement>(null);
      const inputRef = useRef<HTMLInputElement>(null);
      const scrollContainerRef = useRef<HTMLDivElement>(null);
      const optionRefs = useRef<(HTMLDivElement | null)[]>([]);
      const router = useRouter();
      const [isClosing, setIsClosing] = useState(false);
    
      const handleClose = useCallback(() => {
        setIsClosing(true);
        // Add a small delay to allow animations to complete
        requestAnimationFrame(() => {
          onClose();
        });
      }, [onClose]);
    
      // Filter items based on search query
      const filteredItems = useMemo(() => {
        return items.filter((item) => {
          if (!searchQuery) return true;
          
          const searchLower = searchQuery.toLowerCase();
          return (
            item.name.toLowerCase().includes(searchLower) ||
            (item.keywords ? item.keywords.toLowerCase().includes(searchLower) : false) ||
            (item.section ? item.section.toLowerCase().includes(searchLower) : false)
          );
        });
      }, [items, searchQuery]);
    
      // Group items by section
      const groupedItems = useMemo(() => {
        const sections = new Set(filteredItems.map((item) => item.section));
        const result = [];
    
        for (const section of sections) {
          // Add section header
          result.push({
            value: `section-${section}`,
            label: <SectionHeader label={section} />,
            isCustom: true,
          });
    
          // Add items for this section
          const sectionItems = filteredItems.filter(
            (item) => item.section === section
          );
    
          for (const item of sectionItems) {
            result.push({
              value: item.id,
              label: item.name,
              hasPrefix: item.icon ? <Icon name={item.icon} size="xs" onBackground="neutral-weak" /> : undefined,
              hasSuffix: item.shortcut && item.shortcut.length > 0 ? (
                <Row gap="4">
                  {item.shortcut.map((key, i) => (
                    <Text key={i} variant="label-default-xs" onBackground="neutral-weak">
                      {key}
                    </Text>
                  ))}
                </Row>
              ) : undefined,
              description: item.description,
              href: item.href,
              onClick: item.perform ? () => {
                item.perform?.();
                onClose();
              } : undefined,
            });
          }
        }
    
        return result;
      }, [filteredItems, onClose]);
    
      // Get non-custom options for highlighting
      const nonCustomOptions = useMemo(() => {
        return groupedItems.filter(item => !item.isCustom);
      }, [groupedItems]);
    
      // Reset optionRefs when nonCustomOptions change
      useEffect(() => {
        optionRefs.current = Array(nonCustomOptions.length).fill(null);
      }, [nonCustomOptions.length]);
    
      // Reset highlighted index when search query changes
      useEffect(() => {
        setHighlightedIndex(nonCustomOptions.length > 0 ? 0 : null);
      }, [searchQuery, nonCustomOptions.length]);
    
      // Handle keyboard navigation
      const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
        if (!nonCustomOptions.length) return;
        
        switch (e.key) {
          case "ArrowDown":
            e.preventDefault();
            setHighlightedIndex(prevIndex => {
              if (prevIndex === null) return 0;
              return (prevIndex + 1) % nonCustomOptions.length;
            });
            break;
          case "ArrowUp":
            e.preventDefault();
            setHighlightedIndex(prevIndex => {
              if (prevIndex === null) return nonCustomOptions.length - 1;
              return (prevIndex - 1 + nonCustomOptions.length) % nonCustomOptions.length;
            });
            break;
          case "Enter":
            e.preventDefault();
            if (highlightedIndex !== null && highlightedIndex < nonCustomOptions.length) {
              const selectedOption = nonCustomOptions[highlightedIndex];
              if (selectedOption) {
                // Find the original item to get the perform function or href
                const originalItem = items.find(item => item.id === selectedOption.value);
                if (originalItem) {
                  if (originalItem.href) {
                    router.push(originalItem.href);
                    onClose();
                  } else if (originalItem.perform) {
                    originalItem.perform();
                    onClose();
                  }
                }
              }
            }
            break;
        }
      }, [nonCustomOptions, items, router, onClose, highlightedIndex]);
    
      // Scroll highlighted element into view
      useEffect(() => {
        if (isOpen && highlightedIndex !== null && nonCustomOptions.length > 0) {
          // Use requestAnimationFrame to ensure the DOM has updated
          requestAnimationFrame(() => {
            const highlightedElement = optionRefs.current[highlightedIndex];
            const scrollContainer = scrollContainerRef.current;
            
            if (highlightedElement && scrollContainer) {
              const elementRect = highlightedElement.getBoundingClientRect();
              const containerRect = scrollContainer.getBoundingClientRect();
              
              // Check if the element is not fully visible
              if (elementRect.bottom > containerRect.bottom) {
                // Element is below the visible area - scroll just enough to show it
                const scrollAmount = elementRect.bottom - containerRect.bottom + 8; // Add a small buffer
                scrollContainer.scrollTop += scrollAmount;
              } else if (elementRect.top < containerRect.top) {
                // Element is above the visible area - scroll just enough to show it
                const scrollAmount = containerRect.top - elementRect.top + 8; // Add a small buffer
                scrollContainer.scrollTop -= scrollAmount;
              }
            }
          });
        }
      }, [highlightedIndex, isOpen, nonCustomOptions.length]);
    
      // Handle escape key
      useEffect(() => {
        const handleEscapeKey = (e: KeyboardEvent) => {
          if (e.key === "Escape") {
            handleClose();
          }
        };
    
        if (isOpen) {
          document.addEventListener("keydown", handleEscapeKey);
        }
    
        return () => {
          document.removeEventListener("keydown", handleEscapeKey);
        };
      }, [isOpen, handleClose]);
    
      // Lock body scroll when kbar is open
      useEffect(() => {
        if (isOpen) {
          // Prevent body scrolling when kbar is open
          document.body.style.overflow = "hidden";
        } else {
          // Restore body scrolling when kbar is closed
          document.body.style.overflow = "unset";
        }
        
        return () => {
          // Cleanup function to ensure body scroll is restored
          document.body.style.overflow = "unset";
        };
      }, [isOpen]);
    
      // Clear search query when kbar is closed
      useEffect(() => {
        if (!isOpen) {
          setSearchQuery("");
          setHighlightedIndex(null);
        } else {
          // Set the first item as highlighted when opened
          if (nonCustomOptions.length > 0) {
            setHighlightedIndex(0);
          }
        }
      }, [isOpen, nonCustomOptions]);
    
      // Focus search input when kbar is opened
      useEffect(() => {
        if (isOpen && inputRef.current) {
          // Use a small timeout to ensure the component is fully rendered
          const timer = setTimeout(() => {
            inputRef.current?.focus();
          }, 50);
          
          return () => clearTimeout(timer);
        }
      }, [isOpen]);
    
      // Handle search input change
      const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchQuery(e.target.value);
      };
    
      // Render nothing if not open
      if (!isOpen) return null;
    
      // Create portal for the kbar
      return (
        <Flex
          position="fixed"
          top="0"
          left="0"
          right="0"
          bottom="0"
          zIndex={10}
          center
          background="overlay"
          className={`${styles.overlay} ${isClosing ? styles.closing : ''}`}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              handleClose();
            }
          }}
        >
          <Column
            ref={containerRef}
            maxHeight={32}
            fitHeight
            maxWidth="xs"
            background="surface"
            radius="l"
            border="neutral-alpha-medium"
            overflow="hidden"
            shadow="l"
            className={`${styles.content} ${isClosing ? styles.closing : ''}`}
            onClick={(e) => e.stopPropagation()}
          >
            <Flex fillWidth position="relative">
              <Input
                id="kbar-search"
                label="Search docs..."
                labelAsPlaceholder
                value={searchQuery}
                onChange={handleSearchChange}
                onKeyDown={handleKeyDown}
                ref={inputRef}
                hasPrefix={<Icon name="search" size="xs" />}
                radius="none"
                autoComplete="off"
                style={{
                  marginTop: "-1px",
                  marginLeft: "-1px",
                  width: "calc(100% + 2px)",
                }}
              />
            </Flex>
            <Column 
              ref={scrollContainerRef}
              fillWidth 
              padding="4" 
              gap="2" 
              overflowY="auto"
            >
              {groupedItems.map((option, index) => {
                if (option.isCustom) {
                  return (
                    <React.Fragment key={option.value}>
                      {option.label}
                    </React.Fragment>
                  );
                }
                
                // Find the index in the non-custom options array
                const optionIndex = nonCustomOptions.findIndex(item => item.value === option.value);
                const isHighlighted = optionIndex === highlightedIndex;
                
                return (
                  <Option
                    ref={(el) => {
                      if (optionIndex >= 0 && optionIndex < optionRefs.current.length) {
                        optionRefs.current[optionIndex] = el;
                      }
                    }}
                    key={option.value}
                    label={option.label}
                    value={option.value}
                    hasPrefix={option.hasPrefix}
                    hasSuffix={option.hasSuffix}
                    description={option.description}
                    {...(option.href 
                      ? { href: option.href, onClick: undefined, onLinkClick: onClose } 
                      : { onClick: option.onClick }
                    )}
                    highlighted={isHighlighted}
                  />
                );
              })}
              {searchQuery && filteredItems.length === 0 && (
                <Flex
                  fillWidth
                  center
                  paddingX="16"
                  paddingY="64"
                >
                  <Text variant="body-default-m" onBackground="neutral-weak">
                    No results found
                  </Text>
                </Flex>
              )}
            </Column>
          </Column>
        </Flex>
      );
    };
    
    export interface KbarProps {
      items: KbarItem[];
      children: React.ReactNode;
      [key: string]: any; // Allow any additional props
    }
    
    export const Kbar: React.FC<KbarProps> = ({ items, children, ...rest }) => {
      const [isOpen, setIsOpen] = useState(false);
      const router = useRouter();
      const pathname = usePathname();
    
      const handleOpen = () => {
        setIsOpen(true);
      };
    
      const handleClose = () => {
        setIsOpen(false);
      };
    
      // Close Kbar when pathname changes
      useEffect(() => {
        if (isOpen) {
          handleClose();
        }
      }, [pathname]);
    
      // Add keyboard shortcut listener
      useEffect(() => {
        const handleKeyDown = (e: KeyboardEvent) => {
          // Check for Command+K (Mac) or Control+K (Windows/Linux)
          if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
            e.preventDefault(); // Prevent default browser behavior
            setIsOpen(prev => !prev); // Toggle Kbar open/close
          }
        };
    
        // Add the event listener
        document.addEventListener('keydown', handleKeyDown);
    
        // Clean up the event listener on component unmount
        return () => {
          document.removeEventListener('keydown', handleKeyDown);
        };
      }, []);
    
      return (
        <>
          <KbarTrigger onClick={handleOpen} {...rest}>
            {children}
          </KbarTrigger>
          {isOpen && createPortal(
            <KbarContent 
              isOpen={isOpen} 
              onClose={handleClose} 
              items={items} 
            />,
            document.body
          )}
        </>
      );
    };
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/LetterFx.tsx
    ```tsx
    "use client";
    
    import React, { useState, useRef, useCallback, useEffect, forwardRef, ReactNode } from "react";
    import classNames from "classnames";
    
    const defaultCharset = ["X", "$", "@", "a", "H", "z", "o", "0", "y", "#", "?", "*", "0", "1", "+"];
    
    function getRandomCharacter(charset: string[]): string {
      const randomIndex = Math.floor(Math.random() * charset.length);
      return charset[randomIndex];
    }
    
    function createEventHandler(
      originalText: string,
      setText: React.Dispatch<React.SetStateAction<string>>,
      inProgress: boolean,
      setInProgress: React.Dispatch<React.SetStateAction<boolean>>,
      speed: "fast" | "medium" | "slow",
      charset: string[],
      setHasAnimated?: React.Dispatch<React.SetStateAction<boolean>>,
    ) {
      const speedSettings = {
        fast: {
          BASE_DELAY: 10,
          REVEAL_DELAY: 10,
          INITIAL_RANDOM_DURATION: 100,
        },
        medium: {
          BASE_DELAY: 30,
          REVEAL_DELAY: 30,
          INITIAL_RANDOM_DURATION: 300,
        },
        slow: {
          BASE_DELAY: 60,
          REVEAL_DELAY: 60,
          INITIAL_RANDOM_DURATION: 600,
        },
      };
    
      const { BASE_DELAY, REVEAL_DELAY, INITIAL_RANDOM_DURATION } = speedSettings[speed];
    
      const generateRandomText = () =>
        originalText
          .split("")
          .map((char) => (char === " " ? " " : getRandomCharacter(charset)))
          .join("");
    
      return async () => {
        if (inProgress) return;
    
        setInProgress(true);
    
        let randomizedText = generateRandomText();
        const endTime = Date.now() + INITIAL_RANDOM_DURATION;
    
        while (Date.now() < endTime) {
          setText(randomizedText);
          await new Promise((resolve) => setTimeout(resolve, BASE_DELAY));
          randomizedText = generateRandomText();
        }
    
        for (let i = 0; i < originalText.length; i++) {
          await new Promise((resolve) => setTimeout(resolve, REVEAL_DELAY));
          setText(`${originalText.substring(0, i + 1)}${randomizedText.substring(i + 1)}`);
        }
    
        setInProgress(false);
        if (setHasAnimated) {
          setHasAnimated(true);
        }
      };
    }
    
    type LetterFxProps = {
      children: ReactNode;
      trigger?: "hover" | "instant" | "custom";
      speed?: "fast" | "medium" | "slow";
      charset?: string[];
      onTrigger?: (triggerFn: () => void) => void;
      className?: string;
      style?: React.CSSProperties;
    };
    
    const LetterFx = forwardRef<HTMLSpanElement, LetterFxProps>(
      (
        {
          children,
          trigger = "hover",
          speed = "medium",
          charset = defaultCharset,
          onTrigger,
          className,
          style,
        },
        ref,
      ) => {
        const [text, setText] = useState<string>(typeof children === "string" ? children : "");
        const [inProgress, setInProgress] = useState<boolean>(false);
        const [hasAnimated, setHasAnimated] = useState<boolean>(false);
        const originalText = useRef<string>(typeof children === "string" ? children : "");
    
        const eventHandler = useCallback(() => {
          createEventHandler(
            originalText.current,
            setText,
            inProgress,
            setInProgress,
            speed,
            charset,
            trigger === "instant" ? setHasAnimated : undefined,
          )();
        }, [inProgress, speed, charset, trigger, setHasAnimated]);
    
        useEffect(() => {
          if (typeof children === "string") {
            setText(children);
            originalText.current = children;
    
            if (trigger === "instant" && !hasAnimated) {
              eventHandler();
            }
          }
        }, [children, trigger, eventHandler, hasAnimated]);
    
        useEffect(() => {
          if (trigger === "custom" && onTrigger) {
            onTrigger(eventHandler);
          }
        }, [trigger, onTrigger, eventHandler]);
    
        return (
          <span
            ref={ref}
            className={classNames(className)}
            style={style}
            onMouseOver={trigger === "hover" ? eventHandler : undefined}
          >
            {text}
          </span>
        );
      },
    );
    
    LetterFx.displayName = "LetterFx";
    
    export { LetterFx };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Logo.module.scss
    ```scss
    .type {
        content: var(--type);
    }
    
    .icon {
        content: var(--icon);
    }
    
    .type, .icon {
        user-select: none;
        display: block;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Logo.tsx
    ```tsx
    "use client";
    
    import React, { useEffect } from "react";
    import Link from "next/link";
    import classNames from "classnames";
    import styles from "./Logo.module.scss";
    import { SpacingToken } from "../types";
    import { Flex } from ".";
    
    const sizeMap: Record<string, SpacingToken> = {
      xs: "20",
      s: "24",
      m: "32",
      l: "40",
      xl: "48",
    };
    
    interface LogoProps extends React.AnchorHTMLAttributes<HTMLAnchorElement> {
      className?: string;
      size?: "xs" | "s" | "m" | "l" | "xl";
      style?: React.CSSProperties;
      wordmark?: boolean;
      icon?: boolean;
      iconSrc?: string;
      wordmarkSrc?: string;
      href?: string;
    }
    
    const Logo: React.FC<LogoProps> = ({
      size = "m",
      wordmark = true,
      icon = true,
      href,
      iconSrc,
      wordmarkSrc,
      className,
      style,
      ...props
    }) => {
      useEffect(() => {
        if (!icon && !wordmark) {
          console.warn(
            "Both 'icon' and 'wordmark' props are set to false. The logo will not render any content.",
          );
        }
      }, [icon, wordmark]);
    
      const content = (
        <>
          {icon && !iconSrc && (
            <div
              style={{
                height: `var(--static-space-${sizeMap[size]})`,
              }}
              className={styles.icon}
            />
          )}
          {iconSrc && (
            // @ts-ignore
            <img
              style={{
                height: `var(--static-space-${sizeMap[size]})`,
                width: "auto",
              }}
              alt="Trademark"
              src={iconSrc}
            />
          )}
          {wordmark && !wordmarkSrc && (
            <div
              style={{
                height: `var(--static-space-${sizeMap[size]})`,
              }}
              className={styles.type}
            />
          )}
          {wordmarkSrc && (
            // @ts-ignore
            <img
              style={{
                height: `var(--static-space-${sizeMap[size]})`,
                width: "auto",
              }}
              alt="Trademark"
              src={wordmarkSrc}
            />
          )}
        </>
      );
    
      return href ? (
        <Link
          className={classNames("radius-l", "display-flex", "fit-height", className)}
          style={style}
          href={href}
          aria-label="Trademark"
          {...props}
        >
          {content}
        </Link>
      ) : (
        <Flex
          className={classNames(className)}
          radius="l"
          fitHeight
          style={style}
          aria-label="Trademark"
        >
          {content}
        </Flex>
      );
    };
    
    Logo.displayName = "Logo";
    export { Logo };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/LogoCloud.module.scss
    ```scss
    .logo {
        animation: fadeInOut 5s ease-out both;
        will-change: opacity, filter, transform;
        transform-origin: center;
    }
    
    @keyframes fadeInOut {
        0% {
            opacity: 0;
            filter: blur(1.5rem);
            transform: scale(0.2);
        }
        4%, 96% {
            opacity: 1;
            filter: blur(0);
            transform: scale(1);
        }
        100% {
            opacity: 0;
            filter: blur(1.5rem);
            transform: scale(0.2);
        }
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/LogoCloud.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, useState, useEffect } from "react";
    import classNames from "classnames";
    import { Grid } from "./Grid";
    import { Logo } from "./Logo";
    import styles from "./LogoCloud.module.scss";
    import type { ComponentProps } from "react";
    import { Flex } from "./Flex";
    
    type LogoProps = ComponentProps<typeof Logo>;
    
    interface LogoCloudProps extends React.ComponentProps<typeof Grid> {
      logos: LogoProps[];
      className?: string;
      style?: React.CSSProperties;
      limit?: number;
      rotationInterval?: number;
    }
    
    const ANIMATION_DURATION = 5000;
    const STAGGER_DELAY = 25;
    
    const LogoCloud = forwardRef<HTMLDivElement, LogoCloudProps>(
      ({ logos, className, style, limit = 6, rotationInterval = ANIMATION_DURATION, ...rest }, ref) => {
        const [visibleLogos, setVisibleLogos] = useState<LogoProps[]>(() => logos.slice(0, limit));
        const [key, setKey] = useState(0);
    
        useEffect(() => {
          if (logos.length <= limit) {
            setVisibleLogos(logos);
            return;
          }
    
          const interval = setInterval(
            () => {
              setVisibleLogos((currentLogos) => {
                const currentIndices = currentLogos.map((logo) => logos.findIndex((l) => l === logo));
    
                const nextIndices = currentIndices
                  .map((index) => (index + 1) % logos.length)
                  .sort((a, b) => a - b);
    
                const nextLogos = nextIndices.map((index) => logos[index]);
                setKey((k) => k + 1);
                return nextLogos;
              });
            },
            rotationInterval + STAGGER_DELAY * limit,
          );
    
          return () => clearInterval(interval);
        }, [logos, limit, rotationInterval]);
    
        return (
          <Grid ref={ref} className={classNames(styles.container, className)} style={style} {...rest}>
            {visibleLogos.map((logo, index) => (
              <Flex
                key={`${key}-${index}`}
                vertical="center"
                horizontal="center"
                paddingX="24"
                paddingY="20"
                radius="l"
              >
                <Logo
                  className={styles.logo}
                  style={{
                    ...logo.style,
                    animationDelay: `${index * STAGGER_DELAY}ms`,
                  }}
                  {...logo}
                />
              </Flex>
            ))}
          </Grid>
        );
      },
    );
    
    LogoCloud.displayName = "LogoCloud";
    export { LogoCloud };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/MegaMenu.module.scss
    ```scss
    @keyframes fadeInDropdown {
      from {
        opacity: 0;
        transform: translateY(-1rem) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }
    
    .dropdown {
      animation: fadeInDropdown 0.2s ease-out forwards;
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/MegaMenu.tsx
    ```tsx
    "use client";
    
    import React, { useState, useRef, useEffect } from "react";
    import { usePathname } from "next/navigation";
    import { Flex, Row, Column, Text, Icon, ToggleButton } from ".";
    import styles from "./MegaMenu.module.scss";
    
    
    export interface MenuLink {
      label: string;
      href: string;
      icon?: string;
      description?: string;
      selected?: boolean;
    }
    
    export interface MenuSection {
      title?: string;
      links: MenuLink[];
    }
    
    export interface MenuGroup {
      label: string;
      suffixIcon?: string;
      href?: string;
      selected?: boolean;
      sections?: MenuSection[];
    }
    
    export interface MegaMenuProps extends React.ComponentProps<typeof Flex> {
      menuGroups: MenuGroup[];
      className?: string;
    }
    
    export const MegaMenu: React.FC<MegaMenuProps> = ({ menuGroups, className, ...rest }) => {
      const pathname = usePathname();
      const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
      const [dropdownPosition, setDropdownPosition] = useState({ left: 0, width: 0 });
      const [isFirstAppearance, setIsFirstAppearance] = useState(true);
      
      const dropdownRef = useRef<HTMLDivElement>(null);
      const buttonRefs = useRef<Record<string, HTMLDivElement | null>>({});
      const contentRefs = useRef<Record<string, HTMLDivElement | null>>({});
    
      useEffect(() => {
        if (activeDropdown && buttonRefs.current[activeDropdown]) {
          const buttonElement = buttonRefs.current[activeDropdown];
          if (buttonElement) {
            const rect = buttonElement.getBoundingClientRect();
            const parentRect = buttonElement.parentElement?.getBoundingClientRect() || { left: 0 };
            
            // Set initial position
            setDropdownPosition({
              left: rect.left - parentRect.left,
              width: 300 // Default width that will be updated
            });
            
            // Measure content after render
            requestAnimationFrame(() => {
              const contentElement = contentRefs.current[activeDropdown];
              if (contentElement) {
                const contentWidth = contentElement.scrollWidth;
                setDropdownPosition(prev => ({
                  ...prev,
                  width: contentWidth + 40 // Add padding
                }));
              }
            });
          }
        } else {
          // Reset first appearance flag when dropdown is closed
          setIsFirstAppearance(true);
        }
      }, [activeDropdown]);
    
      // Reset animation flag after animation completes
      useEffect(() => {
        if (activeDropdown !== null) {
          const timer = setTimeout(() => {
            setIsFirstAppearance(false);
          }, 300); // Match animation duration
          
          return () => clearTimeout(timer);
        }
      }, [activeDropdown]);
    
      // Close dropdown when pathname changes (navigation occurs)
      useEffect(() => {
        setActiveDropdown(null);
      }, [pathname]);
    
      // Check if a menu item should be selected based on the current path
      const isSelected = (href?: string) => {
        if (!href || !pathname) return false;
        return pathname.startsWith(href);
      };
    
      // Filter groups to only show those with sections in the dropdown
      const dropdownGroups = menuGroups.filter(group => group.sections);
    
      // Add click handler to close dropdown when clicking on links
      const handleLinkClick = (href: string) => {
        setActiveDropdown(null);
        // Let the default navigation happen
      };
    
      return (
        <Flex gap="4" flex={1} className={className} {...rest}>
          {menuGroups.map((group, index) => (
            <Row 
              key={`menu-group-${index}`}
              ref={(el) => {
                buttonRefs.current[group.label] = el;
              }}
              onMouseEnter={() => group.sections && setActiveDropdown(group.label)}
              onMouseLeave={(e) => {
                // Check if we're not hovering over the dropdown
                const dropdownElement = dropdownRef.current;
                if (dropdownElement) {
                  const rect = dropdownElement.getBoundingClientRect();
                  if (
                    e.clientX >= rect.left &&
                    e.clientX <= rect.right &&
                    e.clientY >= rect.top &&
                    e.clientY <= rect.bottom
                  ) {
                    // We're hovering over the dropdown, don't hide it
                    return;
                  }
                }
                // Only hide if activeDropdown is this group
                if (activeDropdown === group.label) {
                  setActiveDropdown(null);
                }
              }}
            >
              <ToggleButton
                selected={group.selected !== undefined ? group.selected : isSelected(group.href)}
                href={group.href}
              >
                {group.label}
                {(group.sections && group.suffixIcon) && <Icon marginLeft="8" name={group.suffixIcon} size="xs" />}
              </ToggleButton>
            </Row>
          ))}
    
          {activeDropdown && (
            <Row
              paddingTop="8"
              ref={dropdownRef}
              position="absolute"
              pointerEvents="auto"
              opacity={100}
              top="32"
              className={isFirstAppearance ? styles.dropdown : ''}
              style={{
                left: `${dropdownPosition.left}px`,
                width: `${dropdownPosition.width}px`,
                transition: 'left 0.3s ease, width 0.3s ease',
                visibility: 'visible',
              }}
              onMouseEnter={() => {
                // Keep the current active dropdown when hovering over it
              }}
              onMouseLeave={() => {
                // Hide dropdown when mouse leaves it
                setActiveDropdown(null);
              }}
            >
              <Row
                background="surface" 
                radius="l" 
                border="neutral-alpha-weak" 
                shadow="xl" 
                padding="12"
                gap="32"
              >
                {dropdownGroups.map((group, groupIndex) => (
                  activeDropdown === group.label && group.sections && (
                    <Row 
                      key={`dropdown-content-${groupIndex}`}
                      gap="16" 
                      ref={(el) => {
                        contentRefs.current[group.label] = el;
                      }}
                    >
                      {group.sections.map((section, sectionIndex) => (
                        <Column key={`section-${sectionIndex}`} minWidth={10} gap="4">
                          {section.title && (
                            <Text marginLeft="16" marginBottom="12" marginTop="12" onBackground="neutral-weak" variant="label-default-s">
                              {section.title}
                            </Text>
                          )}
                          {section.links.map((link, linkIndex) => (
                            <ToggleButton 
                              key={`link-${linkIndex}`}
                              className="fit-height p-4 pr-12"
                              fillWidth 
                              justifyContent="start" 
                              href={link.href}
                              onClick={() => handleLinkClick(link.href)}
                            >
                              {link.description ? (
                                <Row gap="12">
                                  {link.icon && (
                                    <Icon name={link.icon} size="s" padding="8" radius="s" border="neutral-alpha-weak"/>
                                  )}
                                  <Column gap="4">
                                    <Text onBackground="neutral-strong" variant="label-strong-s">{link.label}</Text>
                                    <Text onBackground="neutral-weak">{link.description}</Text>
                                  </Column>
                                </Row>
                              ) : (
                                link.label
                              )}
                            </ToggleButton>
                          ))}
                        </Column>
                      ))}
                    </Row>
                  )
                ))}
              </Row>
            </Row>
          )}
        </Flex>
      );
    };
    
    MegaMenu.displayName = "MegaMenu";
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/NavIcon.module.scss
    ```scss
    .line {
        background-color: var(--neutral-on-background-strong);
        height: 1px;
        width: var(--static-space-24);
        transition: transform 0.3s ease;
        position: absolute;
        left: 50%;
        top: 50%;
    
        &:first-child {
            transform: translateX(-50%) translateY(calc(-1 * var(--static-space-4)));
        }
        
        &:last-child {
            transform: translateX(-50%) translateY(var(--static-space-4));
        }    
    }
    
    .active:first-child {
        transform: translateX(-50%) translateY(0) rotate(45deg);
    }
    
    .active:last-child {
        transform: translateX(-50%) translateY(0) rotate(-45deg);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/NavIcon.tsx
    ```tsx
    import React, { forwardRef } from "react";
    import styles from "./NavIcon.module.scss";
    import { Flex } from ".";
    import classNames from "classnames";
    
    interface NavIconProps extends React.ComponentProps<typeof Flex> {
      className?: string;
      style?: React.CSSProperties;
      onClick?: () => void;
      isActive: boolean;
    }
    
    const NavIcon = forwardRef<HTMLDivElement, Partial<NavIconProps>>(
      ({ className, isActive, style, onClick, ...rest }, ref) => {
        return (
          <Flex
            ref={ref}
            tabIndex={0}
            radius="m"
            cursor="interactive"
            width="40"
            height="40"
            minHeight="40"
            minWidth="40"
            className={className}
            style={style}
            onClick={onClick}
            {...rest}
          >
            <div className={classNames(styles.line, isActive && styles.active)} />
            <div className={classNames(styles.line, isActive && styles.active)} />
          </Flex>
        );
      },
    );
    
    NavIcon.displayName = "NavIcon";
    
    export { NavIcon };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/NumberInput.module.scss
    ```scss
    .numberInput {
      input[type="number"]::-webkit-inner-spin-button,
      input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    
      input[type="number"] {
        -moz-appearance: textfield;
      }
    }
    
    .stepper {
      pointer-events: visibleFill;
      &:hover {
        background-color: var(--neutral-alpha-medium);
      }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/NumberInput.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, useState } from "react";
    import { Input } from ".";
    import { Flex } from ".";
    import { IconButton } from ".";
    import styles from "./NumberInput.module.scss";
    import classNames from "classnames";
    
    interface NumberInputProps
      extends Omit<React.ComponentProps<typeof Input>, "type" | "value" | "onChange"> {
      value?: number;
      onChange?: (value: number) => void;
      min?: number;
      max?: number;
      step?: number;
      padStart?: number;
    }
    
    const NumberInput = forwardRef<HTMLInputElement, NumberInputProps>(
      ({ value, onChange, min, max, step = 1, padStart, ...props }, ref) => {
        const [localValue, setLocalValue] = useState<string>(
          padStart && value !== undefined
            ? value.toString().padStart(padStart, "0")
            : (value?.toString() ?? ""),
        );
    
        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
          const newValue = e.target.value;
          setLocalValue(newValue);
    
          const numValue = parseFloat(newValue);
          if (!isNaN(numValue) && onChange) {
            onChange(numValue);
          }
        };
    
        const updateValue = (newValue: number) => {
          const formattedValue = padStart
            ? newValue.toString().padStart(padStart, "0")
            : newValue.toString();
          setLocalValue(formattedValue);
          onChange?.(newValue);
        };
    
        const increment = () => {
          const currentValue = parseFloat(localValue) || 0;
          const newValue = currentValue + step;
          if (max === undefined || newValue <= max) {
            updateValue(newValue);
          }
        };
    
        const decrement = () => {
          const currentValue = parseFloat(localValue) || 0;
          const newValue = currentValue - step;
          if (min === undefined || newValue >= min) {
            updateValue(newValue);
          }
        };
    
        return (
          <Input
            {...props}
            ref={ref}
            type="number"
            value={localValue}
            onChange={handleChange}
            min={min}
            max={max}
            step={step}
            hasSuffix={
              <>
                <Flex position="static" minWidth={1.25}></Flex>
                <Flex
                  position="absolute"
                  right="0"
                  top="0"
                  direction="column"
                  borderLeft="neutral-medium"
                  fillHeight
                  background="neutral-alpha-weak"
                >
                  <Flex
                    fillHeight
                    position="static"
                    borderBottom="neutral-medium"
                    paddingX="4"
                    className={classNames(styles.stepper, "transition-micro-medium")}
                  >
                    <IconButton
                      icon="chevronUp"
                      variant="ghost"
                      size="s"
                      onClick={increment}
                      aria-label="Increment value"
                    />
                  </Flex>
                  <Flex
                    fillHeight
                    position="static"
                    paddingX="4"
                    className={classNames(styles.stepper, "transition-micro-medium")}
                  >
                    <IconButton
                      icon="chevronDown"
                      variant="ghost"
                      size="s"
                      onClick={decrement}
                      aria-label="Decrement value"
                    />
                  </Flex>
                </Flex>
              </>
            }
            className={styles.numberInput}
          />
        );
      },
    );
    
    NumberInput.displayName = "NumberInput";
    export { NumberInput };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Option.module.scss
    ```scss
    .option {
        border-color: var(--static-transparent);
      
        &:hover, &:focus {
            background: var(--neutral-alpha-weak);
            border-color: var(--neutral-alpha-medium);
        }
        
        &.selected {
            background: var(--neutral-alpha-medium);
            border-color: var(--neutral-alpha-medium);
        }
      
        &.highlighted {
            background: var(--static-transparent);
            border-color: var(--neutral-alpha-medium);
        }
      
        &.danger {
            color: var(--danger-on-background-medium);
      
            &:hover, &:focus {
                background: var(--danger-solid-strong);
                color: var(--danger-on-solid-strong);
                border-color: var(--danger-border-strong);
            }
        }
      }
      
      .focused {
        background: var(--neutral-background-strong);
      }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Option.tsx
    ```tsx
    import classNames from "classnames";
    import { Flex, Text } from ".";
    import styles from "./Option.module.scss";
    import { ElementType } from "./ElementType";
    import React, { forwardRef } from "react";
    
    export interface OptionProps {
      label: React.ReactNode;
      href?: string;
      value: string;
      hasPrefix?: React.ReactNode;
      hasSuffix?: React.ReactNode;
      description?: React.ReactNode;
      danger?: boolean;
      selected?: boolean;
      highlighted?: boolean;
      tabIndex?: number;
      onClick?: (value: string) => void;
      onLinkClick?: () => void;
    }
    
    const Option = forwardRef<HTMLDivElement, OptionProps>(
      (
        {
          label,
          value,
          href,
          hasPrefix,
          hasSuffix,
          description,
          danger,
          selected,
          highlighted,
          tabIndex,
          onClick,
          onLinkClick,
          ...props
        },
        ref,
      ) => {
        if (href && onClick) {
          console.warn("Option should not have both `href` and `onClick` props.");
        }
    
        return (
          <ElementType
            tabIndex={tabIndex}
            ref={ref}
            href={href}
            className="reset-button-styles fill-width"
            onLinkClick={onLinkClick}
          >
            <Flex
              {...props}
              fillWidth
              vertical="center"
              paddingX="12"
              paddingY="8"
              gap="12"
              radius="m"
              role="option"
              aria-selected={selected}
              tabIndex={-1}
              borderWidth={1}
              borderStyle="solid"
              cursor="interactive"
              transition="micro-medium"
              onClick={() => onClick?.(value)}
              className={classNames(styles.option, {
                [styles.danger]: danger,
                [styles.selected]: selected,
                [styles.highlighted]: highlighted,
              })}
              data-value={value}
            >
              {hasPrefix && <Flex className={styles.prefix}>{hasPrefix}</Flex>}
              <Flex
                horizontal="start"
                style={{
                  whiteSpace: "nowrap",
                }}
                fillWidth
                direction="column"
              >
                <Text onBackground="neutral-strong" variant="label-default-s">
                  {label}
                </Text>
                {description && (
                  <Text variant="body-default-xs" onBackground="neutral-weak">
                    {description}
                  </Text>
                )}
              </Flex>
              {hasSuffix && <Flex className={styles.suffix}>{hasSuffix}</Flex>}
            </Flex>
          </ElementType>
        );
      },
    );
    
    Option.displayName = "Option";
    export { Option };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/OTPInput.module.scss
    ```scss
    .inputs {
      font-size: var(--font-size-heading-xl);
      transition: border-color 0.2s, box-shadow 0.2s;
      width: var(--static-space-48);
      max-width: var(--static-space-48);
    
      input {
        text-align: center;
      }
    
      &:focus-within {
        animation: focusAnimation 0.3s forwards;
      }
    }
      
    @keyframes focusAnimation {
      0% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
      100% {
        transform: scale(1);
      }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/OTPInput.tsx
    ```tsx
    "use client";
    
    import React, { useState, useRef, forwardRef, useEffect } from "react";
    import { Flex, Input, Text } from ".";
    import styles from "./OTPInput.module.scss";
    
    interface OTPInputProps extends React.HTMLAttributes<HTMLDivElement> {
      length?: number;
      onComplete?: (code: string) => void;
      error?: boolean;
      errorMessage?: React.ReactNode;
      disabled?: boolean;
      autoFocus?: boolean;
    }
    
    const OTPInput = forwardRef<HTMLDivElement, OTPInputProps>((
      { 
        length = 4, 
        onComplete,
        error = false,
        errorMessage,
        disabled = false,
        autoFocus = false,
        className,
        ...props
      }, 
      ref
    ) => {
      const [values, setValues] = useState<string[]>(Array(length).fill(""));
      const inputsRef = useRef<Array<HTMLInputElement | null>>([]);
    
      useEffect(() => {
        if (autoFocus && inputsRef.current[0]) {
          inputsRef.current[0].focus();
        }
      }, [autoFocus]);
    
      const handleChange = (index: number, value: string) => {
        if (disabled) return;
    
        if (value === "" || /^[0-9]$/.test(value)) {
          const newValues = [...values];
          newValues[index] = value;
          setValues(newValues);
    
          if (value && index < length - 1) {
            inputsRef.current[index + 1]?.focus();
          }
    
          if (newValues.every((val) => val !== "") && onComplete) {
            onComplete(newValues.join(""));
          }
        }
      };
    
      const handleKeyDown = (
        index: number,
        event: React.KeyboardEvent<HTMLInputElement>,
      ) => {
        if (disabled) return;
    
        if (event.key === "Backspace") {
          event.preventDefault();
          if (values[index]) {
            const newValues = [...values];
            newValues[index] = "";
            setValues(newValues);
          } else if (index > 0) {
            inputsRef.current[index - 1]?.focus();
            const newValues = [...values];
            newValues[index - 1] = "";
            setValues(newValues);
          }
        } else if (event.key === "ArrowLeft" && index > 0) {
          event.preventDefault();
          inputsRef.current[index - 1]?.focus();
        } else if (event.key === "ArrowRight" && index < length - 1) {
          event.preventDefault();
          inputsRef.current[index + 1]?.focus();
        }
      };
    
      const handleContainerClick = () => {
        if (disabled) return;
    
        if (values.every(val => val !== "")) return;
    
        const firstEmptyIndex = values.findIndex(val => val === "");
        if (firstEmptyIndex >= 0) {
          inputsRef.current[firstEmptyIndex]?.focus();
        }
      };
    
      return (
        <Flex
          direction="column"
          gap="8"
          ref={ref}
        >
          <Flex gap="8" center onClick={handleContainerClick}>
            {Array.from({ length }, (_, index) => (
              <Input
                key={index}
                ref={(el) => {
                  inputsRef.current[index] = el;
                }}
                id={`otp-${index}`}
                label=""
                labelAsPlaceholder
                type="text"
                inputMode="numeric"
                maxLength={1}
                value={values[index]}
                onChange={(e) => handleChange(index, e.target.value)}
                onKeyDown={(e) => handleKeyDown(index, e)}
                aria-label={`OTP digit ${index + 1} of ${length}`}
                className={styles.inputs}
                {...props}
              />
            ))}
          </Flex>
          {error && errorMessage && (
            <Flex paddingX="8">
              <Text as="span" variant="body-default-s" onBackground="danger-weak">
                {errorMessage}
              </Text>
            </Flex>
          )}
    
        </Flex>
      );
    });
    
    OTPInput.displayName = "OTPInput";
    
    export { OTPInput };
    export type { OTPInputProps };
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/PasswordInput.tsx
    ```tsx
    "use client";
    
    import React, { useState, forwardRef } from "react";
    import { Input, InputProps, IconButton } from ".";
    
    export const PasswordInput = forwardRef<HTMLInputElement, InputProps>((props, ref) => {
      const [showPassword, setShowPassword] = useState(false);
    
      return (
        <Input
          {...props}
          ref={ref}
          type={showPassword ? "text" : "password"}
          hasSuffix={
            <IconButton
              onClick={() => {
                setShowPassword(!showPassword);
              }}
              variant="ghost"
              icon={showPassword ? "eyeOff" : "eye"}
              size="s"
              type="button"
            />
          }
        />
      );
    });
    
    PasswordInput.displayName = "PasswordInput";
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/RadioButton.tsx
    ```tsx
    "use client";
    
    import React, { useState, useEffect, forwardRef } from "react";
    import classNames from "classnames";
    import { Flex, InteractiveDetails, InteractiveDetailsProps } from ".";
    import styles from "./SharedInteractiveStyles.module.scss";
    
    interface RadioButtonProps
      extends Omit<InteractiveDetailsProps, "onClick">,
        React.InputHTMLAttributes<HTMLInputElement> {
      style?: React.CSSProperties;
      className?: string;
      isChecked?: boolean;
      name?: string;
      value?: string;
      disabled?: boolean;
      onToggle?: () => void;
    }
    
    const generateId = () => `radio-${Math.random().toString(36).substring(2, 9)}`;
    
    const RadioButton: React.FC<RadioButtonProps> = forwardRef<HTMLInputElement, RadioButtonProps>(
      (
        { style, className, isChecked: controlledIsChecked, name, value, onToggle, disabled, ...props },
        ref,
      ) => {
        const [isChecked, setIsChecked] = useState(controlledIsChecked || false);
        const [radioId] = useState(generateId());
    
        useEffect(() => {
          if (controlledIsChecked !== undefined) {
            setIsChecked(controlledIsChecked);
          }
        }, [controlledIsChecked]);
    
        const toggleItem = () => {
          if (disabled) return;
          if (onToggle) {
            onToggle();
          } else {
            setIsChecked(!isChecked);
          }
        };
    
        const handleKeyDown = (event: React.KeyboardEvent) => {
          if (disabled) return;
          if (event.key === "Enter" || event.key === " ") {
            event.preventDefault();
            toggleItem();
          }
        };
    
        return (
          <Flex
            vertical="center"
            gap="16"
            zIndex={1}
            className={classNames(styles.container, className, {
              [styles.disabled]: disabled,
            })}
            style={style}
          >
            <input
              type="radio"
              ref={ref}
              name={name}
              value={value}
              checked={controlledIsChecked !== undefined ? controlledIsChecked : isChecked}
              onChange={toggleItem}
              disabled={disabled}
              className={styles.hidden}
              tabIndex={-1}
            />
            <Flex
              role="radio"
              aria-checked={controlledIsChecked !== undefined ? controlledIsChecked : isChecked}
              aria-labelledby={radioId}
              aria-disabled={disabled}
              position="relative"
              horizontal="center"
              vertical="center"
              radius="full"
              onClick={toggleItem}
              onKeyDown={handleKeyDown}
              tabIndex={disabled ? -1 : 0}
              className={classNames(styles.element, {
                [styles.checked]: controlledIsChecked !== undefined ? controlledIsChecked : isChecked,
                [styles.disabled]: disabled,
              })}
            >
              {(controlledIsChecked !== undefined ? controlledIsChecked : isChecked) && (
                <Flex
                  style={{
                    backgroundColor: "var(--neutral-on-solid-strong)",
                  }}
                  radius="full"
                  width="12"
                  height="12"
                  className={styles.icon}
                />
              )}
            </Flex>
            {props.label && <InteractiveDetails id={radioId} {...props} onClick={toggleItem} />}
          </Flex>
        );
      },
    );
    
    RadioButton.displayName = "RadioButton";
    
    export { RadioButton };
    export type { RadioButtonProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/RevealFx.module.scss
    ```scss
    .revealFx {
        mask-image: linear-gradient(to right, black 0%, black 25%, transparent 50%);
        mask-size: 300% 100%;
        transition: all ease-in-out;
      
        &.hidden {
          mask-position: 100% 0;
          filter: blur(0.5rem);
        }
      
        &.revealed {
          mask-position: 0 0;
          filter: blur(0);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/RevealFx.tsx
    ```tsx
    "use client";
    
    import React, { useState, useEffect, forwardRef } from "react";
    import { SpacingToken } from "../types";
    import styles from "./RevealFx.module.scss";
    import { Flex } from ".";
    
    interface RevealFxProps extends React.ComponentProps<typeof Flex> {
      children: React.ReactNode;
      speed?: "slow" | "medium" | "fast";
      delay?: number;
      revealedByDefault?: boolean;
      translateY?: number | SpacingToken;
      trigger?: boolean;
      style?: React.CSSProperties;
      className?: string;
    }
    
    const RevealFx = forwardRef<HTMLDivElement, RevealFxProps>(
      (
        {
          children,
          speed = "medium",
          delay = 0,
          revealedByDefault = false,
          translateY,
          trigger,
          style,
          className,
          ...rest
        },
        ref,
      ) => {
        const [isRevealed, setIsRevealed] = useState(revealedByDefault);
    
        useEffect(() => {
          const timer = setTimeout(() => {
            setIsRevealed(true);
          }, delay * 1000);
    
          return () => clearTimeout(timer);
        }, [delay]);
    
        useEffect(() => {
          if (trigger !== undefined) {
            setIsRevealed(trigger);
          }
        }, [trigger]);
    
        const getSpeedDuration = () => {
          switch (speed) {
            case "fast":
              return "1s";
            case "medium":
              return "2s";
            case "slow":
              return "3s";
            default:
              return "2s";
          }
        };
    
        const getTranslateYValue = () => {
          if (typeof translateY === "number") {
            return `${translateY}rem`;
          } else if (typeof translateY === "string") {
            return `var(--static-space-${translateY})`;
          }
          return undefined;
        };
    
        const translateValue = getTranslateYValue();
    
        const revealStyle: React.CSSProperties = {
          transitionDuration: getSpeedDuration(),
          transform: isRevealed ? "translateY(0)" : `translateY(${translateValue})`,
          ...style,
        };
    
        return (
          <Flex
            fillWidth
            horizontal="center"
            ref={ref}
            style={revealStyle}
            className={`${styles.revealFx} ${isRevealed ? styles.revealed : styles.hidden} ${className || ""}`}
            {...rest}
          >
            {children}
          </Flex>
        );
      },
    );
    
    RevealFx.displayName = "RevealFx";
    export { RevealFx };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Row.tsx
    ```tsx
    "use client";
    
    import { forwardRef } from "react";
    import { Flex } from ".";
    
    interface RowProps extends React.ComponentProps<typeof Flex> {
      children?: React.ReactNode;
    }
    
    const Row = forwardRef<HTMLDivElement, RowProps>(({ children, ...rest }, ref) => {
      return (
        <Flex ref={ref} {...rest}>
          {children}
        </Flex>
      );
    });
    
    Row.displayName = "Row";
    export { Row };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Scroller.module.scss
    ```scss
    .container {
        isolation: isolate;
    }
    
    .scroller {
        scrollbar-width: none;
        isolation: isolate;
      
        &::-webkit-scrollbar {
            display: none;
        }
    }
      
    .row {
        overflow-x: auto;
    }
      
    .column {
        overflow-y: auto;
    }
    
    .scrollButton {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        z-index: 2;
    }
    
    .scrollButtonPrev {
        left: var(--static-space-4);
    }
    
    .scrollButtonNext {
        right: var(--static-space-4);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Scroller.tsx
    ```tsx
    "use client";
    
    import React, { useEffect, useRef, useState } from "react";
    import classNames from "classnames";
    import { Flex, IconButton } from ".";
    import styles from "./Scroller.module.scss";
    import { Fade } from "./Fade";
    
    interface ScrollerProps extends React.ComponentProps<typeof Flex> {
      children?: React.ReactNode;
      direction?: "row" | "column";
      onItemClick?: (index: number) => void;
    }
    
    interface ScrollableChildProps {
      onClick?: (e: React.MouseEvent) => void;
      onKeyDown?: (e: React.KeyboardEvent) => void;
    }
    
    const Scroller: React.FC<ScrollerProps> = ({
      children,
      direction = "row",
      className,
      style,
      onItemClick,
      ...rest
    }) => {
      const scrollerRef = useRef<HTMLDivElement>(null);
      const [showPrevButton, setShowPrevButton] = useState<boolean>(false);
      const [showNextButton, setShowNextButton] = useState<boolean>(false);
    
      useEffect(() => {
        const scroller = scrollerRef.current;
        const handleScroll = () => {
          if (scroller) {
            const scrollPosition = direction === "row" ? scroller.scrollLeft : scroller.scrollTop;
            const maxScrollPosition =
              direction === "row"
                ? scroller.scrollWidth - scroller.clientWidth
                : scroller.scrollHeight - scroller.clientHeight;
            setShowPrevButton(scrollPosition > 0);
            setShowNextButton(scrollPosition < maxScrollPosition - 1);
          }
        };
    
        if (
          scroller &&
          (direction === "row"
            ? scroller.scrollWidth > scroller.clientWidth
            : scroller.scrollHeight > scroller.clientHeight)
        ) {
          handleScroll();
          scroller.addEventListener("scroll", handleScroll);
          return () => scroller.removeEventListener("scroll", handleScroll);
        }
      }, [direction]);
    
      const handleScrollNext = () => {
        const scroller = scrollerRef.current;
        if (scroller) {
          const scrollAmount =
            direction === "row" ? scroller.clientWidth / 2 : scroller.clientHeight / 2;
          scroller.scrollBy({
            [direction === "row" ? "left" : "top"]: scrollAmount,
            behavior: "smooth",
          });
        }
      };
    
      const handleScrollPrev = () => {
        const scroller = scrollerRef.current;
        if (scroller) {
          const scrollAmount =
            direction === "row" ? scroller.clientWidth / 2 : scroller.clientHeight / 2;
          scroller.scrollBy({
            [direction === "row" ? "left" : "top"]: -scrollAmount,
            behavior: "smooth",
          });
        }
      };
    
      const wrappedChildren = React.Children.map(children, (child, index) => {
        if (React.isValidElement<ScrollableChildProps>(child)) {
          const { onClick: childOnClick, onKeyDown: childOnKeyDown, ...otherProps } = child.props;
    
          return React.cloneElement(child, {
            ...otherProps,
            onClick: (e: React.MouseEvent) => {
              childOnClick?.(e);
              onItemClick?.(index);
            },
            onKeyDown: (e: React.KeyboardEvent) => {
              childOnKeyDown?.(e);
              if (e.key === "Enter" || e.key === " ") {
                childOnClick?.(e as any);
                onItemClick?.(index);
              }
            },
          });
        }
        return child;
      });
    
      return (
        <Flex fillWidth className={classNames(styles.container, className)} style={style} {...rest}>
          {showPrevButton && (
            <Fade to="right" width={4} fillHeight position="absolute" left="0" zIndex={1}>
              <IconButton
                icon={direction === "row" ? "chevronLeft" : "chevronUp"}
                onClick={handleScrollPrev}
                onKeyDown={(e: React.KeyboardEvent) => {
                  if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    handleScrollPrev();
                  }
                }}
                size="s"
                variant="secondary"
                className={classNames(styles.scrollButton, styles.scrollButtonPrev)}
                aria-label="Scroll Previous"
              />
            </Fade>
          )}
          <Flex
            fillWidth
            zIndex={0}
            radius="m"
            direction={direction}
            className={classNames(styles.scroller, styles[direction])}
            ref={scrollerRef}
          >
            {wrappedChildren}
          </Flex>
          {showNextButton && (
            <Fade to="left" width={4} fillHeight position="absolute" right="0" zIndex={1}>
              <IconButton
                icon={direction === "row" ? "chevronRight" : "chevronDown"}
                onClick={handleScrollNext}
                onKeyDown={(e: React.KeyboardEvent) => {
                  if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    handleScrollNext();
                  }
                }}
                size="s"
                variant="secondary"
                className={classNames(styles.scrollButton, styles.scrollButtonNext)}
                aria-label="Scroll Next"
              />
            </Fade>
          )}
        </Flex>
      );
    };
    
    Scroller.displayName = "Scroller";
    
    export { Scroller };
    export type { ScrollerProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Line.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import { Flex } from ".";
    
    interface LineProps extends React.ComponentProps<typeof Flex> {
      vert?: boolean;
      style?: React.CSSProperties;
    }
    
    const Line = forwardRef<HTMLDivElement, LineProps>(({ vert, className, style, ...rest }, ref) => {
      return (
        <Flex
          ref={ref}
          minWidth={(vert && "1") || undefined}
          minHeight={(!vert && "1") || undefined}
          width={(vert && "1") || undefined}
          height={(!vert && "1") || undefined}
          fillWidth={!vert}
          fillHeight={vert}
          background="neutral-strong"
          direction={vert ? "column" : "row"}
          className={className}
          style={style}
          {...rest}
        />
      );
    });
    
    Line.displayName = "Line";
    export { Line };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ScrollToTop.module.scss
    ```scss
    .scrollToTop {
      opacity: 0;
      visibility: hidden;
      transition: opacity 200ms ease-in-out, visibility 0ms linear 200ms;
    
      &[data-visible="true"] {
        opacity: 1;
        visibility: visible;
        transition: opacity 200ms ease-in-out, visibility 0ms linear;
      }
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ScrollToTop.tsx
    ```tsx
    import { useState, useEffect } from "react";
    import { Flex } from "@/once-ui/components";
    import styles from "./ScrollToTop.module.scss";
    import classNames from "classnames";
    
    interface ScrollToTopProps extends React.ComponentProps<typeof Flex> {
      offset?: number;
    }
    
    export const ScrollToTop = ({
      children,
      offset = 300,
      className,
      ...rest
    }: ScrollToTopProps) => {
      const [isVisible, setIsVisible] = useState(false);
    
      const handleScroll = () => {
        setIsVisible(window.scrollY > offset);
      };
    
      const scrollToTop = () => {
        window.scrollTo({
          top: 0,
          behavior: "smooth",
        });
      };
    
      useEffect(() => {
        window.addEventListener("scroll", handleScroll);
        return () => window.removeEventListener("scroll", handleScroll);
      }, []);
    
      return (
        <Flex
          onClick={scrollToTop}
          aria-hidden={!isVisible}
          position="fixed"
          bottom="16"
          right="16"
          className={classNames(styles.scrollToTop, className)}
          data-visible={isVisible}
          tabIndex={isVisible ? 0 : -1}
          zIndex={isVisible ? 8 : 0}
          cursor="pointer"
          {...rest}
        >
          {children}
        </Flex>
      );
    };
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Select.tsx
    ```tsx
    "use client";
    
    import React, { useState, useRef, useEffect, forwardRef, ReactNode } from "react";
    import classNames from "classnames";
    import { DropdownWrapper, Flex, Icon, IconButton, Input, InputProps, Option } from ".";
    import inputStyles from "./Input.module.scss";
    import type { OptionProps } from "./Option";
    import type { DropdownWrapperProps } from "./DropdownWrapper";
    import { Placement } from "@floating-ui/react-dom";
    
    type SelectOptionType = Omit<OptionProps, "selected">;
    
    interface SelectProps
      extends Omit<InputProps, "onSelect" | "value">,
        Pick<DropdownWrapperProps, "minHeight" | "minWidth" | "maxWidth"> {
      options: SelectOptionType[];
      value?: string;
      emptyState?: ReactNode;
      onSelect?: (value: string) => void;
      floatingPlacement?: Placement;
      searchable?: boolean;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const Select = forwardRef<HTMLDivElement, SelectProps>(
      (
        {
          options,
          value = "",
          onSelect,
          searchable = false,
          emptyState = "No results",
          minHeight,
          minWidth,
          maxWidth,
          floatingPlacement,
          className,
          style,
          ...rest
        },
        ref,
      ) => {
        const [isFocused, setIsFocused] = useState(false);
        const [isFilled, setIsFilled] = useState(!!value);
        const [isDropdownOpen, setIsDropdownOpen] = useState(false);
        const [highlightedIndex, setHighlightedIndex] = useState<number | null>(() => {
          if (!options?.length || !value) return null;
          return options.findIndex((option) => option.value === value);
        });
        const [searchQuery, setSearchQuery] = useState("");
        const selectRef = useRef<HTMLDivElement | null>(null);
        const clearButtonRef = useRef<HTMLButtonElement>(null);
    
        const handleFocus = () => {
          setIsFocused(true);
        };
    
        const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {
          if (selectRef.current && !selectRef.current.contains(event.relatedTarget as Node)) {
            setIsFocused(false);
            setIsDropdownOpen(false);
          }
        };
    
        const handleSelect = (value: string) => {
          if (onSelect) onSelect(value);
          setIsDropdownOpen(false);
          setIsFilled(true);
        };
    
        const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
          if (!isFocused && event.key !== "Enter") return;
    
          switch (event.key) {
            case "Escape":
              setIsDropdownOpen(false);
              break;
            case "ArrowDown":
              if (!isDropdownOpen) {
                setIsDropdownOpen(true);
                break;
              }
              event.preventDefault();
              setHighlightedIndex((prevIndex) => {
                const newIndex =
                  prevIndex === null || prevIndex === options.length - 1 ? 0 : prevIndex + 1;
                return newIndex;
              });
              break;
    
            case "ArrowUp":
              event.preventDefault();
              setHighlightedIndex((prevIndex) => {
                const newIndex =
                  prevIndex === null || prevIndex === 0 ? options.length - 1 : prevIndex - 1;
                return newIndex;
              });
              break;
    
            case "Enter":
              event.preventDefault();
              if (highlightedIndex !== null && isDropdownOpen) {
                handleSelect(options[highlightedIndex].value);
              } else {
                setIsDropdownOpen(true);
              }
              break;
    
            default:
              break;
          }
        };
    
        const handleClearSearch = (e: React.MouseEvent) => {
          e.preventDefault();
          e.stopPropagation();
          setSearchQuery("");
          // Force focus back to the input after clearing
          const input = selectRef.current?.querySelector("input");
          if (input) {
            input.focus();
          }
        };
    
        useEffect(() => {
          const handleClickOutside = (event: MouseEvent) => {
            if (
              selectRef.current &&
              !selectRef.current.contains(event.target as Node) &&
              !clearButtonRef.current?.contains(event.target as Node)
            ) {
              setIsDropdownOpen(false);
            }
          };
    
          const handleFocusOut = (event: FocusEvent) => {
            if (event.target instanceof HTMLInputElement) {
              handleBlur(event as unknown as React.FocusEvent<HTMLInputElement>);
            }
          };
    
          document.addEventListener("mousedown", handleClickOutside);
          document.addEventListener("focusout", handleFocusOut);
    
          return () => {
            document.removeEventListener("mousedown", handleClickOutside);
            document.removeEventListener("focusout", handleFocusOut);
          };
        }, []);
    
        return (
          <DropdownWrapper
            fillWidth
            ref={(node) => {
              selectRef.current = node;
              if (typeof ref === "function") ref(node);
              else if (ref) ref.current = node;
            }}
            isOpen={isDropdownOpen}
            onOpenChange={setIsDropdownOpen}
            floatingPlacement={floatingPlacement}
            minHeight={minHeight}
            trigger={
              <Input
                {...rest}
                style={{
                  textOverflow: "ellipsis",
                  ...style,
                }}
                value={value}
                onFocus={handleFocus}
                onKeyDown={handleKeyDown}
                readOnly
                className={classNames("cursor-interactive", "fill-width", {
                  [inputStyles.filled]: isFilled,
                  [inputStyles.focused]: isFocused,
                  className,
                })}
                aria-haspopup="listbox"
                aria-expanded={isDropdownOpen}
              />
            }
            dropdown={
              <>
                {searchable && (
                  <Flex fillWidth>
                    <Input
                      data-scaling="90"
                      style={{
                        marginTop: "-1px",
                        marginLeft: "-1px",
                        width: "calc(100% + 2px)",
                      }}
                      labelAsPlaceholder
                      id="search"
                      label="Search"
                      height="s"
                      radius="none"
                      hasSuffix={
                        searchQuery ? (
                          <IconButton
                            tooltip="Clear"
                            tooltipPosition="left"
                            icon="close"
                            variant="ghost"
                            size="s"
                            onClick={handleClearSearch}
                          />
                        ) : undefined
                      }
                      hasPrefix={<Icon name="search" size="xs" />}
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      onClick={(e) => e.stopPropagation()}
                      onBlur={handleBlur}
                    />
                  </Flex>
                )}
                <Flex fillWidth padding="4" direction="column" gap="2">
                  {options
                    .filter((option) =>
                      option.label?.toString().toLowerCase().includes(searchQuery.toLowerCase()),
                    )
                    .map((option, index) => (
                      <Option
                        key={option.value}
                        {...option}
                        onClick={() => {
                          option.onClick?.(option.value);
                          handleSelect(option.value);
                        }}
                        selected={option.value === value}
                        highlighted={index === highlightedIndex}
                        tabIndex={-1}
                      />
                    ))}
                  {searchQuery &&
                    options.filter((option) =>
                      option.label?.toString().toLowerCase().includes(searchQuery.toLowerCase()),
                    ).length === 0 && (
                      <Flex fillWidth vertical="center" horizontal="center" paddingX="16" paddingY="32">
                        {emptyState}
                      </Flex>
                    )}
                </Flex>
              </>
            }
          />
        );
      },
    );
    
    Select.displayName = "Select";
    export { Select };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/SharedInteractiveStyles.module.scss
    ```scss
    .container {
        cursor: var(--cursor-interactive);
        isolation: isolate;
    
        &:hover, &:focus {
            .element.checked .element::before {
                display: none;
            }
        }
    }
    
    .element {
        box-shadow: inset 0 0 0 var(--solid-inset-color-brand);
        border-color: var(--solid-border-color-neutral);
        border-style: solid;
        border-width: 1px;
        width: var(--static-space-20);
        height: var(--static-space-20);
        min-width: var(--static-space-20);
        min-height: var(--static-space-20);
        transition: var(--transition-micro-medium);
        background-color: var(--background-surface);
        outline: none;
    
        &.checked {
            box-shadow: inset 0 var(--solid-inset-distance) var(--solid-inset-size) var(--solid-inset-color-brand);
            background-color: var(--brand-solid-medium);
            border-color: var(--solid-border-color-brand);
        }
    }
    
    .disabled {
        .element {
            opacity: 0.6;
        }
    
        .element::before {
            display: none;
        }
    }
    
    .container:hover .element::before,
    .element:focus-within::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: var(--static-space-40);
        height: var(--static-space-40);
        background-color: var(--brand-alpha-medium);
        border-radius: var(--radius-full);
        z-index: -1;
        animation: scaleInCenter 0.2s forwards;
    }
    
    @keyframes scaleInCenter {
        from {
            transform: translate(-50%, -50%) scale(0);
        }
        to {
            transform: translate(-50%, -50%) scale(1);
        }
    }
    
    .icon {
        animation: scaleIn 0.2s forwards;
        animation-delay: 0.1s;
        transform: scale(0);
    }
    
    @keyframes scaleIn {
        from {
            transform: scale(0);
        }
        to {
            transform: scale(1);
        }
    }
    
    .hidden {
        position: absolute;
        opacity: 0;
        pointer-events: none;
    }
    
    .indeterminate {
        background: var(--brand-on-solid-strong);
        width: var(--static-space-12);
        height: var(--static-space-2);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Skeleton.module.scss
    ```scss
    @keyframes skeleton-loading {
        0% {
            background-color: var(--neutral-background-strong);
        }
        50% {
            background-color: var(--neutral-background-medium);
        }
        100% {
            background-color: var(--neutral-background-strong);
        }
    }
    
    .delay-1 {
        animation-delay: 0.1s;
    }
    
    .delay-2 {
        animation-delay: 0.2s;
    }
    
    .delay-3 {
        animation-delay: 0.3s;
    }
    
    .delay-4 {
        animation-delay: 0.4s;
    }
    
    .delay-5 {
        animation-delay: 0.5s;
    }
    
    .delay-6 {
        animation-delay: 0.6s;
    }
    
    .skeleton {
        animation-name: skeleton-loading;
        animation-duration: 1.5s;
        animation-iteration-count: infinite;
    
        &.block {
            width: 100%;
            height: 100%;
        }
    
        &.line {
            &.h-xs {
                height: var(--static-space-8);
            }
            &.h-s {
                height: var(--static-space-12);
            }
            &.h-m {
                height: var(--static-space-16);
            }
            &.h-l {
                height: var(--static-space-20);
            }
            &.h-xl {
                height: var(--static-space-24);
            }
    
            &.w-xs {
                width: 25%;
            }
            &.w-s {
                width: 33%;
            }
            &.w-m {
                width: 50%;
            }
            &.w-l {
                width: 75%;
            }
            &.w-xl {
                width: 100%;
            }
        }
    
        &.circle {
            border-radius: var(--radius-full);
    
            &.w-xs {
                width: var(--static-space-20);
                height: var(--static-space-20);
            }
            &.w-s {
                width: var(--static-space-24);
                height: var(--static-space-24);
            }
            &.w-m {
                width: var(--static-space-32);
                height: var(--static-space-32);
            }
            &.w-l {
                width: var(--static-space-40);
                height: var(--static-space-40);
            }
            &.w-xl {
                width: var(--static-space-160);
                height: var(--static-space-160);
            }
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/SmartImage.tsx
    ```tsx
    "use client";
    
    import React, { CSSProperties, useState, useRef, useEffect } from "react";
    import Image from "next/image";
    
    import { Flex, Skeleton } from ".";
    
    export interface SmartImageProps extends React.ComponentProps<typeof Flex> {
      aspectRatio?: string;
      height?: number;
      alt?: string;
      isLoading?: boolean;
      objectFit?: CSSProperties["objectFit"];
      enlarge?: boolean;
      src: string;
      unoptimized?: boolean;
      sizes?: string;
      priority?: boolean;
    }
    
    const SmartImage: React.FC<SmartImageProps> = ({
      aspectRatio,
      height,
      alt = "",
      isLoading = false,
      objectFit = "cover",
      enlarge = false,
      src,
      unoptimized = false,
      priority,
      sizes = "100vw",
      ...rest
    }) => {
      const [isEnlarged, setIsEnlarged] = useState(false);
      const imageRef = useRef<HTMLDivElement>(null);
    
      const handleClick = () => {
        if (enlarge) {
          setIsEnlarged(!isEnlarged);
        }
      };
    
      useEffect(() => {
        const handleEscape = (event: KeyboardEvent) => {
          if (event.key === "Escape" && isEnlarged) {
            setIsEnlarged(false);
          }
        };
    
        const handleWheel = (event: WheelEvent) => {
          if (isEnlarged) {
            setIsEnlarged(false);
          }
        };
    
        document.addEventListener("keydown", handleEscape);
        window.addEventListener("wheel", handleWheel, { passive: true });
    
        return () => {
          document.removeEventListener("keydown", handleEscape);
          window.removeEventListener("wheel", handleWheel);
        };
      }, [isEnlarged]);
    
      useEffect(() => {
        if (isEnlarged) {
          document.body.style.overflow = "hidden";
        } else {
          document.body.style.overflow = "auto";
        }
    
        return () => {
          document.body.style.overflow = "auto";
        };
      }, [isEnlarged]);
    
      const calculateTransform = () => {
        if (!imageRef.current) return {};
    
        const rect = imageRef.current.getBoundingClientRect();
        const scaleX = window.innerWidth / rect.width;
        const scaleY = window.innerHeight / rect.height;
        const scale = Math.min(scaleX, scaleY) * 0.9;
    
        const translateX = (window.innerWidth - rect.width) / 2 - rect.left;
        const translateY = (window.innerHeight - rect.height) / 2 - rect.top;
    
        return {
          transform: isEnlarged
            ? `translate(${translateX}px, ${translateY}px) scale(${scale})`
            : "translate(0, 0) scale(1)",
          transition: "all 0.3s ease-in-out",
          zIndex: isEnlarged ? 10 : undefined,
        };
      };
    
      const isYouTubeVideo = (url: string) => {
        const youtubeRegex =
          /(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
        return youtubeRegex.test(url);
      };
    
      const getYouTubeEmbedUrl = (url: string) => {
        const match = url.match(
          /(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/,
        );
        return match
          ? `https://www.youtube.com/embed/${match[1]}?controls=0&rel=0&modestbranding=1`
          : "";
      };
    
      const isVideo = src?.endsWith(".mp4");
      const isYouTube = isYouTubeVideo(src);
    
      return (
        <>
          <Flex
            ref={imageRef}
            fillWidth
            overflow="hidden"
            zIndex={0}
            cursor={enlarge ? "interactive" : ""}
            style={{
              outline: "none",
              isolation: "isolate",
              height: aspectRatio ? "" : height ? `${height}rem` : "100%",
              aspectRatio,
              borderRadius: isEnlarged ? "0" : undefined,
              ...calculateTransform(),
            }}
            onClick={handleClick}
            {...rest}
          >
            {isLoading && <Skeleton shape="block" />}
            {!isLoading && isVideo && (
              <video
                src={src}
                autoPlay
                loop
                muted
                playsInline
                style={{
                  width: "100%",
                  height: "100%",
                  objectFit: objectFit,
                }}
              />
            )}
            {!isLoading && isYouTube && (
              <iframe
                width="100%"
                height="100%"
                src={getYouTubeEmbedUrl(src)}
                frameBorder="0"
                allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
                style={{
                  objectFit: objectFit,
                }}
              />
            )}
            {!isLoading && !isVideo && !isYouTube && (
              <Image
                src={src}
                alt={alt}
                priority={priority}
                sizes={sizes}
                unoptimized={unoptimized}
                fill
                style={{
                  objectFit: objectFit,
                }}
              />
            )}
          </Flex>
    
          {isEnlarged && enlarge && (
            <Flex
              horizontal="center"
              vertical="center"
              position="fixed"
              background="overlay"
              pointerEvents="none"
              onClick={handleClick}
              top="0"
              left="0"
              zIndex={isEnlarged ? 9 : undefined}
              opacity={isEnlarged ? 100 : 0}
              cursor="interactive"
              transition="macro-medium"
              style={{
                backdropFilter: isEnlarged ? "var(--backdrop-filter)" : "0px",
                width: "100vw",
                height: "100vh",
              }}
            >
              <Flex
                style={{
                  height: "100vh",
                  transform: "translate(-50%, -50%)",
                }}
                onClick={(e: React.MouseEvent<HTMLDivElement>) => e.stopPropagation()}
              >
                {isVideo ? (
                  <video
                    src={src}
                    autoPlay
                    loop
                    muted
                    playsInline
                    style={{
                      width: "90vw",
                      height: "auto",
                      objectFit: "contain",
                    }}
                  />
                ) : (
                  <Image
                    src={src}
                    alt={alt}
                    fill
                    sizes="90vw"
                    unoptimized={unoptimized}
                    style={{
                      objectFit: "contain",
                    }}
                  />
                )}
              </Flex>
            </Flex>
          )}
        </>
      );
    };
    
    SmartImage.displayName = "SmartImage";
    
    export { SmartImage };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Skeleton.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import classNames from "classnames";
    
    import styles from "./Skeleton.module.scss";
    import { Flex } from "./Flex";
    
    interface SkeletonProps extends React.ComponentProps<typeof Flex> {
      shape: "line" | "circle" | "block";
      width?: "xl" | "l" | "m" | "s" | "xs";
      height?: "xl" | "l" | "m" | "s" | "xs";
      delay?: "1" | "2" | "3" | "4" | "5" | "6";
      style?: React.CSSProperties;
      className?: string;
    }
    
    const Skeleton: React.FC<SkeletonProps> = forwardRef<HTMLDivElement, SkeletonProps>(
      ({ shape = "line", width, height, delay, style, className, ...props }, ref) => {
        return (
          <Flex
            {...props}
            ref={ref}
            style={style}
            radius={shape === "line" || shape === "circle" ? "full" : undefined}
            inline
            className={classNames(
              styles.skeleton,
              styles[shape],
              width && styles["w-" + width],
              height && styles["h-" + height],
              delay && styles["delay-" + delay],
              className,
            )}
          />
        );
      },
    );
    
    Skeleton.displayName = "Skeleton";
    
    export { Skeleton };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/SmartLink.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import classNames from "classnames";
    import { Icon } from ".";
    import { ElementType } from "./ElementType";
    import { IconName } from "../icons";
    
    interface CommonProps {
      prefixIcon?: IconName;
      suffixIcon?: IconName;
      fillWidth?: boolean;
      iconSize?: "xs" | "s" | "m" | "l" | "xl";
      selected?: boolean;
      unstyled?: boolean;
      children: ReactNode;
      href?: string;
      style?: React.CSSProperties;
      className?: string;
    }
    
    export type SmartLinkProps = CommonProps &
      React.AnchorHTMLAttributes<HTMLAnchorElement>;
    
    const SmartLink = forwardRef<HTMLAnchorElement, SmartLinkProps>(
      (
        {
          href,
          prefixIcon,
          suffixIcon,
          fillWidth = false,
          iconSize = "xs",
          style,
          className,
          selected,
          unstyled = false,
          children,
          ...props
        },
        ref
      ) => {
        const content = (
          <>
            {prefixIcon && <Icon name={prefixIcon} size={iconSize} />}
            {children}
            {suffixIcon && <Icon name={suffixIcon} size={iconSize} />}
          </>
        );
    
        const commonProps = {
          ref,
          className: classNames(
            className,
            "reset-button-styles focus-ring align-center display-inline-flex g-8 radius-s",
            {
              "fill-width": fillWidth,
              "fit-width": !fillWidth,
              "px-2 mx-2": !unstyled,
            }
          ),
          style: !unstyled
            ? {
                ...(selected && {
                  textDecoration: "underline",
                }),
                ...style,
              }
            : {
                textDecoration: "none",
                ...style,
              },
          ...props,
        };
    
        return (
          <ElementType href={href} {...commonProps}>
            {content}
          </ElementType>
        );
      }
    );
    
    SmartLink.displayName = "SmartLink";
    
    export { SmartLink };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Spinner.module.scss
    ```scss
    @keyframes spin {
        0% {
            transform: rotate(0deg);
            animation-timing-function: cubic-bezier(0.55, 0.2, 0.68, 0.53);
        }
        100% {
            transform: rotate(360deg);
            animation-timing-function: cubic-bezier(0.55, 0.2, 0.68, 0.53);
        }
    }
    
    .spinner {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        animation: spin 1.5s infinite;
        border-style: solid;
        border-color: transparent;
        border-top-color: currentColor;
    }
    
    .xs {
        width: var(--static-space-16);
        height: var(--static-space-16);
        padding: 2px;
    
        .spinner {
            border-width: 2px;
        }
    }
    
    .s {
        width: var(--static-space-20);
        height: var(--static-space-20);
        padding: 2px;
    
        .spinner {
            border-width: 2px;
        }
    }
    
    .m {
        width: var(--static-space-24);
        height: var(--static-space-24);
        padding: 3px;
    
        .spinner {
            border-width: 2px;
        }
    }
    
    .l {
        width: var(--static-space-32);
        height: var(--static-space-32);
        padding: 4px;
    
        .spinner {
            border-width: 3px;
        }
    }
    
    .xl {
        width: var(--static-space-40);
        height: var(--static-space-40);
        padding: 8px;
    
        .spinner {
            border-width: 3px;
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/DateRangePicker.tsx
    ```tsx
    "use client";
    
    import React, { useState, useEffect } from "react";
    import { Flex, DatePicker } from ".";
    
    export interface DateRange {
      startDate: Date | undefined;
      endDate: Date | undefined;
    }
    
    export interface DateRangePickerProps extends Omit<React.ComponentProps<typeof Flex>, "onChange"> {
      value?: DateRange;
      onChange?: (range: DateRange) => void;
      minDate?: Date;
      maxDate?: Date;
      size?: "s" | "m" | "l";
    }
    
    const DateRangePicker: React.FC<DateRangePickerProps> = ({
      value,
      onChange,
      minDate,
      maxDate,
      size = "m",
      ...rest
    }) => {
      const [internalValue, setInternalValue] = useState<DateRange>({
        startDate: value?.startDate || undefined,
        endDate: value?.endDate || undefined,
      });
    
      const [hoveredDate, setHoveredDate] = useState<Date | null>(null);
      const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
      const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
    
      useEffect(() => {
        if (value) {
          setInternalValue({
            startDate: value.startDate,
            endDate: value.endDate,
          });
        }
      }, [value]);
    
      const handleDateChange = (date: Date) => {
        if (!internalValue.startDate || (internalValue.startDate && internalValue.endDate)) {
          // Start new selection
          const newRange = {
            startDate: date,
            endDate: undefined,
          };
          setInternalValue(newRange);
          onChange?.(newRange);
        } else {
          const newRange = {
            startDate: internalValue.startDate,
            endDate: date,
          };
    
          if (newRange.startDate > date) {
            newRange.startDate = date;
            newRange.endDate = internalValue.startDate;
          }
    
          setInternalValue(newRange);
          onChange?.(newRange);
        }
      };
    
      const handleMonthChange = (increment: number) => {
        const newDate = new Date(currentYear, currentMonth + increment, 1);
        setCurrentMonth(newDate.getMonth());
        setCurrentYear(newDate.getFullYear());
        setInternalValue({
          startDate: internalValue.startDate,
          endDate: internalValue.endDate,
        });
      };
    
      const getSecondMonth = () => {
        const firstMonth = new Date(currentYear, currentMonth, 1);
        const secondMonth = new Date(firstMonth);
        secondMonth.setMonth(secondMonth.getMonth() + 1);
        return secondMonth;
      };
    
      const getPreviewRange = () => {
        if (!internalValue.startDate || internalValue.endDate || !hoveredDate) return null;
        return {
          startDate: internalValue.startDate,
          endDate: hoveredDate > internalValue.startDate ? hoveredDate : internalValue.startDate,
          isPreview: true,
        };
      };
    
      return (
        <Flex gap="24" {...rest}>
          <DatePicker
            value={internalValue.startDate}
            onChange={handleDateChange}
            range={getPreviewRange() || internalValue}
            minDate={minDate}
            maxDate={maxDate}
            size={size}
            nextMonth={false}
            currentMonth={currentMonth}
            currentYear={currentYear}
            onMonthChange={handleMonthChange}
            onHover={setHoveredDate}
          />
          <DatePicker
            value={internalValue.endDate}
            onChange={handleDateChange}
            range={getPreviewRange() || internalValue}
            minDate={minDate}
            maxDate={maxDate}
            previousMonth={false}
            size={size}
            currentMonth={getSecondMonth().getMonth()}
            currentYear={getSecondMonth().getFullYear()}
            onMonthChange={handleMonthChange}
            onHover={setHoveredDate}
          />
        </Flex>
      );
    };
    
    DateRangePicker.displayName = "DateRangePicker";
    export { DateRangePicker };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Spinner.tsx
    ```tsx
    import React, { forwardRef } from "react";
    
    import styles from "./Spinner.module.scss";
    import { Flex } from "./Flex";
    
    interface SpinnerProps extends React.ComponentProps<typeof Flex> {
      size?: "xs" | "s" | "m" | "l" | "xl";
      ariaLabel?: string;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const Spinner = forwardRef<HTMLDivElement, SpinnerProps>(
      ({ size = "m", ariaLabel = "Loading", className, style, ...rest }, ref) => {
        return (
          <Flex horizontal="center" vertical="center" style={style} className={className} {...rest}>
            <Flex
              ref={ref}
              horizontal="center"
              vertical="center"
              className={styles[size]}
              role="status"
              aria-label={ariaLabel}
            >
              <div className={styles.spinner} />
            </Flex>
          </Flex>
        );
      },
    );
    
    Spinner.displayName = "Spinner";
    
    export { Spinner };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/StatusIndicator.module.scss
    ```scss
    .statusIndicator {
        &.s {
            width: var(--static-space-4);
            height: var(--static-space-4);
        }
    
        &.m {
            width: var(--static-space-8);
            height: var(--static-space-8);
        }
    
        &.l {
            width: var(--static-space-16);
            height: var(--static-space-16);
        }
    
        &.gray {
            background-color: var(--scheme-gray-700);
        }
    
        &.blue {
            background-color: var(--scheme-blue-700);
        }
    
        &.indigo {
            background-color: var(--scheme-indigo-700);
        }
    
        &.violet {
            background-color: var(--scheme-violet-700);
        }
    
        &.magenta {
            background-color: var(--scheme-magenta-700);
        }
    
        &.pink {
            background-color: var(--scheme-pink-700);
        }
    
        &.red {
            background-color: var(--scheme-red-700);
        }
    
        &.orange {
            background-color: var(--scheme-orange-700);
        }
    
        &.yellow {
            background-color: var(--scheme-yellow-700);
        }
    
        &.moss {
            background-color: var(--scheme-moss-700);
        }
    
        &.green {
            background-color: var(--scheme-green-700);
        }
    
        &.emerald {
            background-color: var(--scheme-emerald-700);
        }
    
        &.aqua {
            background-color: var(--scheme-aqua-700);
        }
    
        &.cyan {
            background-color: var(--scheme-cyan-700);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/SegmentedControl.tsx
    ```tsx
    "use client";
    
    import { useState, useEffect, useRef } from "react";
    import { ToggleButton, Scroller, Flex } from ".";
    import type { ToggleButtonProps } from "./ToggleButton";
    
    interface ButtonOption extends Omit<ToggleButtonProps, "selected"> {
      value: string;
    }
    
    interface SegmentedControlProps extends Omit<React.ComponentProps<typeof Scroller>, "onToggle"> {
      buttons: ButtonOption[];
      onToggle: (value: string, event?: React.MouseEvent<HTMLButtonElement>) => void;
      defaultSelected?: string;
      fillWidth?: boolean;
      selected?: string;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const SegmentedControl: React.FC<SegmentedControlProps> = ({
      buttons,
      onToggle,
      defaultSelected,
      fillWidth = true,
      selected,
      className,
      style,
      ...scrollerProps
    }) => {
      const [internalSelected, setInternalSelected] = useState<string>(() => {
        if (selected !== undefined) return selected;
        if (defaultSelected !== undefined) return defaultSelected;
        return buttons[0]?.value || "";
      });
    
      const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);
    
      useEffect(() => {
        if (selected !== undefined) {
          setInternalSelected(selected);
        }
      }, [selected]);
    
      const handleButtonClick = (
        clickedButton: ButtonOption,
        event: React.MouseEvent<HTMLButtonElement>,
      ) => {
        event.stopPropagation();
        const newSelected = clickedButton.value;
        setInternalSelected(newSelected);
        onToggle(newSelected, event);
      };
    
      const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {
        const focusedIndex = buttonRefs.current.findIndex((ref) => ref === document.activeElement);
    
        switch (event.key) {
          case "ArrowLeft":
          case "ArrowUp":
            event.preventDefault();
            const prevIndex =
              focusedIndex === -1
                ? buttons.length - 1 // If nothing is focused, focus the last item
                : focusedIndex > 0
                  ? focusedIndex - 1
                  : buttons.length - 1;
            buttonRefs.current[prevIndex]?.focus();
            break;
          case "ArrowRight":
          case "ArrowDown":
            event.preventDefault();
            const nextIndex =
              focusedIndex === -1
                ? 0 // If nothing is focused, focus the first item
                : focusedIndex < buttons.length - 1
                  ? focusedIndex + 1
                  : 0;
            buttonRefs.current[nextIndex]?.focus();
            break;
          case "Enter":
          case " ": // Space key
            event.preventDefault();
            if (focusedIndex >= 0 && focusedIndex < buttons.length) {
              const focusedButton = buttons[focusedIndex];
              setInternalSelected(focusedButton.value);
              onToggle(focusedButton.value);
            }
            break;
          default:
            return;
        }
      };
    
      const selectedIndex = buttons.findIndex((button) => button.value === internalSelected);
    
      return (
        <Scroller
          direction="row"
          minWidth={0}
          {...scrollerProps}
          role="tablist"
          aria-orientation="horizontal"
          onKeyDown={handleKeyDown}
        >
          <Flex fillWidth gap="-1">
            {buttons.map((button, index) => {
              return (
                <ToggleButton
                  ref={(el) => {
                    buttonRefs.current[index] = el as HTMLButtonElement;
                  }}
                  variant="outline"
                  radius={index === 0 ? "left" : index === buttons.length - 1 ? "right" : "none"}
                  key={button.value}
                  selected={index === selectedIndex}
                  onClick={(event) => handleButtonClick(button, event)}
                  role="tab"
                  className={className}
                  style={style}
                  aria-selected={index === selectedIndex}
                  aria-controls={`panel-${button.value}`}
                  tabIndex={index === selectedIndex ? 0 : -1}
                  fillWidth={fillWidth}
                  {...button}
                />
              );
            })}
          </Flex>
        </Scroller>
      );
    };
    
    SegmentedControl.displayName = "SegmentedControl";
    
    export { SegmentedControl };
    export type { SegmentedControlProps, ButtonOption };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/StatusIndicator.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import classNames from "classnames";
    import styles from "./StatusIndicator.module.scss";
    import { Flex } from "./Flex";
    
    interface StatusIndicatorProps extends React.ComponentProps<typeof Flex> {
      size?: "s" | "m" | "l";
      color:
        | "blue"
        | "indigo"
        | "violet"
        | "magenta"
        | "pink"
        | "red"
        | "orange"
        | "yellow"
        | "moss"
        | "green"
        | "emerald"
        | "aqua"
        | "cyan"
        | "gray";
      ariaLabel?: string;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const StatusIndicator = forwardRef<HTMLDivElement, StatusIndicatorProps>(
      (
        { size = "m", color, ariaLabel = `${color} status indicator`, className, style, ...rest },
        ref,
      ) => {
        return (
          <Flex
            ref={ref}
            style={style}
            className={classNames(styles.statusIndicator, styles[size], styles[color], className)}
            aria-label={ariaLabel}
            radius="full"
            {...rest}
          />
        );
      },
    );
    
    StatusIndicator.displayName = "StatusIndicator";
    
    export { StatusIndicator };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/StyleOverlay.module.scss
    ```scss
    .panel {
        visibility: hidden;
        opacity: 0;
        z-index: -1;
        transform: scale(0.2);
        transform-origin: top right;
    
        &.open {
            transform: scale(1);
            visibility: visible;
            opacity: 1;
        }
    
        &:not(.open) {
            z-index: -1;
            filter: blur(0.25rem);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/StyleOverlay.tsx
    ```tsx
    "use client";
    
    import { forwardRef, useState } from "react";
    import { IconButton, StylePanel, Flex, Background } from ".";
    import styles from "./StyleOverlay.module.scss";
    
    interface StyleOverlayProps extends React.ComponentProps<typeof Flex> {
      iconButtonProps?: Partial<React.ComponentProps<typeof IconButton>>;
    }
    
    const StyleOverlay = forwardRef<HTMLDivElement, StyleOverlayProps>(
      ({ iconButtonProps, ...rest }, ref) => {
        const [isOpen, setIsOpen] = useState(false);
    
        const togglePanel = () => {
          setIsOpen(!isOpen);
        };
    
        return (
          <Flex ref={ref} position="static">
            <IconButton variant="primary" onClick={togglePanel} icon="sparkle" {...iconButtonProps} />
            <Flex
              as="aside"
              zIndex={3}
              className={`${styles.panel} ${isOpen && styles.open}`}
              maxWidth={28}
              style={{
                maxHeight: "calc(100% - var(--static-space-4))",
              }}
              fillHeight
              position="absolute"
              shadow="xl"
              top="2"
              right="2"
              transition="macro-medium"
              background="page"
              overflow="hidden"
              radius="xl"
              border="neutral-medium"
              {...rest}
            >
              <StylePanel fill overflowY="scroll" padding="8" />
              <Flex position="absolute" paddingTop="8" paddingRight="12" top="0" right="0">
                <Background
                  position="absolute"
                  top="0"
                  right="8"
                  left={undefined}
                  width={8}
                  height={4}
                  mask={{ x: 100, y: 0, radius: 7 }}
                  dots={{ display: true, size: "2", color: "page-background" }}
                />
                <IconButton
                  variant="secondary"
                  onClick={togglePanel}
                  icon="close"
                  {...iconButtonProps}
                />
              </Flex>
            </Flex>
          </Flex>
        );
      },
    );
    
    StyleOverlay.displayName = "StyleOverlay";
    export { StyleOverlay };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/StylePanel.module.scss
    ```scss
    .select {
        min-width: var(--static-space-40);
        min-height: var(--static-space-40);
        border-radius: var(--radius-m-nest-4);
        border-color: var(--static-transparent);
        border-width: 1px;
        border-style: solid;
        background: var(--static-transparent);
      
        &:hover {
            background: var(--neutral-alpha-medium);
            border-color: var(--neutral-alpha-medium);
        }
      
        &.selected {
            background: var(--neutral-alpha-strong);
            border-color: var(--neutral-alpha-strong);
        }
    }
      
    .swatch {
        width: 100%;
        height: 100%;
        border-radius: var(--radius-m);
        border-width: 1px;
        border-style: solid;
    }
      
    .slate {
        background: var(--scheme-slate-500);
        border-color: var(--scheme-slate-700);
    }
      
    .gray {
        background: var(--scheme-gray-500);
        border-color: var(--scheme-gray-700);
    }
      
    .sand {
        background: var(--scheme-sand-500);
        border-color: var(--scheme-sand-700);
    }
      
    .blue {
        background: var(--scheme-blue-500);
        border-color: var(--scheme-blue-700);
    }
      
    .cyan {
        background: var(--scheme-cyan-500);
        border-color: var(--scheme-cyan-700);
    }
      
    .indigo {
        background: var(--scheme-indigo-500);
        border-color: var(--scheme-indigo-700);
    }
      
    .violet {
        background: var(--scheme-violet-500);
        border-color: var(--scheme-violet-700);
    }
      
    .magenta {
        background: var(--scheme-magenta-500);
        border-color: var(--scheme-magenta-700);
    }
      
    .pink {
        background: var(--scheme-pink-500);
        border-color: var(--scheme-pink-700);
    }
      
    .yellow {
        background: var(--scheme-yellow-500);
        border-color: var(--scheme-yellow-700);
    }
      
    .orange {
        background: var(--scheme-orange-500);
        border-color: var(--scheme-orange-700);
    }
      
    .red {
        background: var(--scheme-red-500);
        border-color: var(--scheme-red-700);
    }
      
    .moss {
        background: var(--scheme-moss-500);
        border-color: var(--scheme-moss-700);
    }
      
    .green {
        background: var(--scheme-green-500);
        border-color: var(--scheme-green-700);
    }
      
    .emerald {
        background: var(--scheme-emerald-500);
        border-color: var(--scheme-emerald-700);
    }
      
    .aqua {
        background: var(--scheme-aqua-500);
        border-color: var(--scheme-aqua-700);
    }
      
    .neutral {
        background: var(--neutral-solid-medium);
        border-color: var(--neutral-alpha-strong);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Switch.module.scss
    ```scss
    .container {
        cursor: var(--cursor-interactive);
        isolation: isolate;
    
        &:active {
            .element {
                transform: translateY(-50%) scaleX(1.2);
            }
        }
    
        &:hover {
            .switch {
                background-color: var(--neutral-solid-strong);
            }
            
            .switch.checked {
                background-color: var(--brand-solid-strong);
            }
    
            .switch.checked .element::before {
                display: none;
            }
        }
    }
    
    .reverse {
        flex-direction: row-reverse;
    }
    
    .switch {
        box-shadow: inset 0 0 0 var(--solid-inset-color-brand);
        border-color: var(--solid-border-color-neutral);
        border-style: solid;
        border-width: var(--solid-border-width);
        width: var(--static-space-40);
        min-width: var(--static-space-40);
        height: var(--static-space-24);
        border-radius: var(--radius-l-nest-4);
        background-color: var(--neutral-solid-medium);
        position: relative;
        transition: var(--transition-micro-medium);
    
        &.checked {
            box-shadow: inset 0 var(--solid-inset-distance) var(--solid-inset-size) var(--solid-inset-color-brand);
            background-color: var(--brand-solid-medium);
            border-color: var(--solid-border-color-brand);
    
            .element {
                left: calc(100% - var(--static-space-20));
                transform-origin: right;
            }
        }
    }
    
    .element {
        z-index: 1;
        transform-origin: left;
        width: var(--static-space-16);
        height: var(--static-space-16);
        border-radius: var(--radius-l);
        background-color: var(--brand-on-solid-strong);
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        left: var(--static-space-4);
        transition: left 0.3s, transform 0.3s;
        outline: none;
    }
    
    .disabled {
        .switch {
            opacity: 0.4;
        }
    
        .element::before {
            display: none !important;
        }
    }
    
    .container:hover .element::before,
    .element:focus-within::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: var(--static-space-40);
        height: var(--static-space-40);
        background-color: var(--brand-alpha-medium);
        border-radius: var(--radius-full);
        z-index: -1;
        animation: scaleInCenter 0.2s forwards;
    }
    
    @keyframes scaleInCenter {
        from {
            transform: translate(-50%, -50%) scale(0);
        }
        to {
            transform: translate(-50%, -50%) scale(1);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Switch.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import classNames from "classnames";
    
    import { Flex, InteractiveDetails, InteractiveDetailsProps, Spinner } from ".";
    import styles from "./Switch.module.scss";
    import commonStyles from "./SharedInteractiveStyles.module.scss";
    
    interface SwitchProps
      extends Omit<InteractiveDetailsProps, "onClick">,
        React.InputHTMLAttributes<HTMLInputElement> {
      style?: React.CSSProperties;
      className?: string;
      isChecked: boolean;
      loading?: boolean;
      name?: string;
      value?: string;
      disabled?: boolean;
      reverse?: boolean;
      ariaLabel?: string;
      onToggle: () => void;
    }
    
    const Switch: React.FC<SwitchProps> = forwardRef<HTMLInputElement, SwitchProps>(
      (
        {
          className,
          isChecked,
          reverse = false,
          loading = false,
          onToggle,
          ariaLabel = "Toggle switch",
          disabled,
          name,
          value,
          ...props
        },
        ref,
      ) => {
        const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {
          if (!disabled && (event.key === "Enter" || event.key === " ")) {
            event.preventDefault();
            onToggle();
          }
        };
    
        const handleClick = () => {
          if (!disabled) {
            onToggle();
          }
        };
    
        return (
          <Flex
            gap="16"
            vertical="center"
            horizontal={reverse ? "space-between" : undefined}
            fillWidth={reverse}
            className={classNames(styles.container, className, {
              [styles.reverse]: reverse,
              [styles.disabled]: disabled,
            })}
            onClick={handleClick}
            role="switch"
            aria-checked={isChecked}
            aria-label={ariaLabel}
            aria-disabled={disabled}
            tabIndex={-1}
          >
            <input
              ref={ref}
              type="checkbox"
              name={name}
              value={value}
              checked={isChecked}
              onChange={onToggle}
              className={commonStyles.hidden}
              tabIndex={-1}
            />
            <div
              className={classNames(styles.switch, {
                [styles.checked]: isChecked,
                [styles.disabled]: disabled,
              })}
            >
              <div
                onKeyDown={handleKeyDown}
                tabIndex={disabled ? -1 : 0}
                className={classNames(styles.element, {
                  [styles.checked]: isChecked,
                  [styles.disabled]: disabled,
                })}
              >
                {loading && <Spinner size="xs" />}
              </div>
            </div>
            {props.label && <InteractiveDetails {...props} onClick={() => {}} />}
          </Flex>
        );
      },
    );
    
    Switch.displayName = "Switch";
    
    export { Switch };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Table.tsx
    ```tsx
    "use client";
    
    import { Row } from "./Row";
    import { IconButton } from "./IconButton";
    import { useState, ReactNode } from "react";
    
    type TableProps = {
      data: {
        headers: {
          content: ReactNode;
          key: string;
          sortable?: boolean;
        }[];
        rows: ReactNode[][];
      };
      onRowClick?: (rowIndex: number) => void;
    };
    
    function Table({ data, onRowClick }: TableProps) {
      const [sortConfig, setSortConfig] = useState<{
        key: string;
        direction: "ascending" | "descending";
      } | null>(null);
    
      const handleSort = (key: string) => {
        let direction: "ascending" | "descending" = "ascending";
    
        if (sortConfig && sortConfig.key === key) {
          direction = sortConfig.direction === "ascending" ? "descending" : "ascending";
        }
    
        setSortConfig({ key, direction });
      };
    
      const sortedRows = [...data.rows].sort((a, b) => {
        if (!sortConfig) return 0;
    
        const headerIndex = data.headers.findIndex((header) => header.key === sortConfig.key);
        if (headerIndex === -1) return 0;
    
        const aValue = String(a[headerIndex]);
        const bValue = String(b[headerIndex]);
    
        if (sortConfig.direction === "ascending") {
          return aValue.localeCompare(bValue);
        } else {
          return bValue.localeCompare(aValue);
        }
      });
    
      const headers = data.headers.map((header, index) => (
        <th
          style={{ textAlign: "left", borderBottom: "1px solid var(--neutral-alpha-medium)" }}
          className="px-16 py-12 font-label font-default font-s"
          key={index}
        >
          <Row gap="8" vertical="center">
            {header.content}
            {header.sortable && (
              <IconButton
                icon={
                  sortConfig?.key === header.key
                    ? sortConfig.direction === "ascending"
                      ? "chevronUp"
                      : "chevronDown"
                    : "chevronDown"
                }
                size="s"
                variant="ghost"
                onClick={(e: React.MouseEvent) => {
                  e.stopPropagation();
                  handleSort(header.key);
                }}
                style={{
                  opacity: sortConfig?.key === header.key ? 1 : 0.6,
                }}
              />
            )}
          </Row>
        </th>
      ));
    
      const rows = (sortConfig ? sortedRows : data.rows).map((row, index) => (
        <tr
          key={index}
          onClick={onRowClick ? () => onRowClick(index) : undefined}
          className={onRowClick ? "cursor-interactive hover-row" : ""}
          style={onRowClick ? { transition: "background-color 0.2s ease" } : undefined}
        >
          {row.map((cell, cellIndex) => (
            <td className="px-16 py-12 font-body font-default font-s" key={cellIndex}>
              {cell}
            </td>
          ))}
        </tr>
      ));
    
      return (
        <Row
          fillWidth
          radius="m"
          overflowY="hidden"
          border="neutral-alpha-medium"
          overflowX="auto"
          marginTop="8"
          marginBottom="16"
        >
          <style jsx>{`
            .hover-row:hover {
              background-color: var(--neutral-alpha-weak);
            }
          `}</style>
          <table
            className="fill-width surface-background"
            style={{ borderSpacing: 0, borderCollapse: "collapse", minWidth: "32rem" }}
          >
            <thead className="neutral-on-background-strong">
              <tr>{headers}</tr>
            </thead>
            <tbody className="neutral-on-background-medium">
              {rows.length > 0 ? (
                rows
              ) : (
                <tr>
                  <td colSpan={headers.length} className="px-24 py-12 font-body font-default font-s">
                    No data available
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </Row>
      );
    }
    
    export { Table };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Tag.module.scss
    ```scss
    .tag {
        white-space: nowrap;
        user-select: none;
    
        &.brand {
            border-color: var(--brand-border-strong);
            background-color: var(--brand-background-strong);
            color: var(--brand-on-background-medium);
        }
    
        &.accent {
            border-color: var(--accent-border-strong);
            background-color: var(--accent-background-strong);
            color: var(--accent-on-background-medium);
        }
    
        &.neutral {
            border-color: var(--neutral-border-medium);
            background-color: var(--surface-background);
            color: var(--neutral-on-background-medium);
        }
    
        &.warning {
            border-color: var(--warning-border-strong);
            background-color: var(--warning-background-strong);
            color: var(--warning-on-background-medium);
        }
    
        &.danger {
            border-color: var(--danger-border-strong);
            background-color: var(--danger-background-strong);
            color: var(--danger-on-background-medium);
        }
    
        &.success {
            border-color: var(--success-border-strong);
            background-color: var(--success-background-strong);
            color: var(--success-on-background-medium);
        }
    
        &.info {
            border-color: var(--info-border-strong);
            background-color: var(--info-background-strong);
            color: var(--info-on-background-medium);
        }
    
        &.gradient {
            border-color: var(--brand-alpha-medium);
            background-image: linear-gradient(45deg, var(--brand-background-strong), var(--accent-background-strong));
            color: var(--brand-on-background-medium);
            background-clip: padding-box;
        }
    }
    
    .s {
        padding: 0 var(--static-space-4);
    }
    
    .m {
        padding: var(--static-space-2) var(--static-space-8);
    }
    
    .l {
        padding: var(--static-space-4) var(--static-space-12);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Tag.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import classNames from "classnames";
    
    import { Flex, Text, Icon } from ".";
    import styles from "./Tag.module.scss";
    import { IconName } from "../icons";
    
    interface TagProps extends React.ComponentProps<typeof Flex> {
      variant?:
        | "brand"
        | "accent"
        | "warning"
        | "success"
        | "danger"
        | "neutral"
        | "info"
        | "gradient";
      size?: "s" | "m" | "l";
      label?: string;
      prefixIcon?: IconName;
      suffixIcon?: IconName;
      children?: ReactNode;
    }
    
    const Tag = forwardRef<HTMLDivElement, TagProps>(
      (
        {
          variant = "neutral",
          size = "m",
          label = "",
          prefixIcon,
          suffixIcon,
          className,
          children,
          ...rest
        },
        ref
      ) => {
        const paddingSize = size === "s" ? "2" : "4";
    
        return (
          <Flex
            fitWidth
            borderWidth={1}
            borderStyle="solid"
            vertical="center"
            radius="l"
            gap="4"
            ref={ref}
            className={classNames(
              styles.tag,
              styles[variant],
              styles[size],
              className
            )}
            {...rest}
          >
            {prefixIcon && <Icon name={prefixIcon} size="xs" />}
            <Flex
              style={{ userSelect: "none" }}
              paddingX={paddingSize}
              vertical="center"
            >
              <Text as="span" variant="label-default-s">
                {label || children}
              </Text>
            </Flex>
            {suffixIcon && <Icon name={suffixIcon} size="xs" />}
          </Flex>
        );
      }
    );
    
    Tag.displayName = "Tag";
    
    export { Tag };
    export type { TagProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/TagInput.tsx
    ```tsx
    "use client";
    
    import React, {
      useState,
      KeyboardEventHandler,
      ChangeEventHandler,
      FocusEventHandler,
      forwardRef,
    } from "react";
    
    import { Flex, Chip, Input, InputProps } from ".";
    
    interface TagInputProps extends Omit<InputProps, "onChange" | "value"> {
      value: string[];
      onChange: (value: string[]) => void;
    }
    
    const TagInput = forwardRef<HTMLInputElement, TagInputProps>(
      ({ value, onChange, label, placeholder, ...inputProps }, ref) => {
        const [inputValue, setInputValue] = useState("");
        const [isFocused, setIsFocused] = useState(false);
    
        const handleInputChange: ChangeEventHandler<HTMLInputElement> = (e) => {
          setInputValue(e.target.value);
        };
    
        const handleKeyDown: KeyboardEventHandler<HTMLInputElement> = (e) => {
          if (e.key === "Enter" || e.key === ",") {
            e.preventDefault();
            if (inputValue.trim()) {
              onChange([...value, inputValue.trim()]);
              setInputValue("");
            }
          }
        };
    
        const handleRemoveTag = (index: number) => {
          const newValue = value.filter((_, i) => i !== index);
          onChange(newValue);
        };
    
        const handleFocus: FocusEventHandler<HTMLInputElement> = () => {
          setIsFocused(true);
        };
    
        const handleBlur: FocusEventHandler<HTMLInputElement> = (e) => {
          setIsFocused(false);
        };
    
        return (
          <Input
            ref={ref}
            label={label}
            placeholder={placeholder}
            labelAsPlaceholder
            value={inputValue}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            onFocus={handleFocus}
            onBlur={handleBlur}
            aria-haspopup="listbox"
            aria-expanded={isFocused}
            {...inputProps}
          >
            {value.length > 0 && (
              <Flex
                style={{
                  margin: "calc(-1 * var(--static-space-8)) var(--static-space-8)",
                }}
                direction="row"
                gap="4"
                vertical="center"
                wrap
                paddingY="16"
              >
                {value.map((tag, index) => (
                  <Chip
                    key={index}
                    label={tag}
                    onRemove={() => handleRemoveTag(index)}
                    aria-label={`Remove tag ${tag}`}
                  />
                ))}
              </Flex>
            )}
          </Input>
        );
      },
    );
    
    TagInput.displayName = "TagInput";
    
    export { TagInput };
    export type { TagInputProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/StylePanel.tsx
    ```tsx
    "use client";
    
    import { forwardRef, useState, useEffect } from "react";
    import { Flex, Text, SegmentedControl, IconButton, Scroller, Column } from ".";
    
    import styles from "./StylePanel.module.scss";
    import classNames from "classnames";
    import { style } from "@/app/resources/config";
    
    interface StylePanelProps extends React.ComponentProps<typeof Flex> {
      style?: React.CSSProperties;
      className?: string;
    }
    
    const shapes = ["conservative", "playful", "rounded"];
    
    const colorOptions = {
      brand: [
        "cyan",
        "blue",
        "indigo",
        "violet",
        "magenta",
        "pink",
        "red",
        "orange",
        "yellow",
        "moss",
        "green",
        "emerald",
        "aqua",
      ],
      accent: [
        "cyan",
        "blue",
        "indigo",
        "violet",
        "magenta",
        "pink",
        "red",
        "orange",
        "yellow",
        "moss",
        "green",
        "emerald",
        "aqua",
      ],
      neutral: ["sand", "gray", "slate"],
    };
    
    const StylePanel = forwardRef<HTMLDivElement, StylePanelProps>(({ ...rest }, ref) => {
      const [selectedShape, setSelectedShape] = useState(style.border);
      const [brandColor, setBrandColor] = useState(style.brand);
      const [accentColor, setAccentColor] = useState(style.accent);
      const [neutralColor, setNeutralColor] = useState(style.neutral);
      const [theme, setTheme] = useState(style.theme);
      const [solid, setSolid] = useState(style.solid);
      const [solidStyle, setSolidStyle] = useState(style.solidStyle);
      const [transition, setTransition] = useState(style.transition);
      const [scaling, setScaling] = useState(style.scaling);
      const [surface, setSurface] = useState(style.surface);
    
      useEffect(() => {
        const root = document.documentElement;
        root.setAttribute("data-border", selectedShape);
        root.setAttribute("data-brand", brandColor);
        root.setAttribute("data-accent", accentColor);
        root.setAttribute("data-neutral", neutralColor);
        root.setAttribute("data-solid", solid);
        root.setAttribute("data-solid-style", solidStyle);
        root.setAttribute("data-theme", theme);
        root.setAttribute("data-transition", transition);
        root.setAttribute("data-scaling", scaling);
        root.setAttribute("data-surface", surface);
        root.setAttribute("data-transition", transition);
      }, [
        selectedShape,
        brandColor,
        accentColor,
        neutralColor,
        solid,
        solidStyle,
        theme,
        transition,
        surface,
        scaling,
      ]);
    
      return (
        <Column fillWidth gap="16" ref={ref} {...rest}>
          <Column fillWidth paddingTop="12" paddingLeft="16" gap="4">
            <Text variant="heading-strong-s">Page</Text>
            <Text variant="body-default-s" onBackground="neutral-weak">
              Customize global design settings
            </Text>
          </Column>
    
          <Column fillWidth border="neutral-alpha-medium" radius="l-4">
            <Flex
              borderBottom="neutral-alpha-medium"
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Text variant="label-default-s">Theme</Text>
              <SegmentedControl
                maxWidth={22}
                buttons={[
                  { size: "l", label: "Light", value: "light", prefixIcon: "light" },
                  { size: "l", label: "Dark", value: "dark", prefixIcon: "dark" },
                ]}
                onToggle={(value) => setTheme(value as "light" | "dark")}
                selected={theme}
              />
            </Flex>
            <Flex horizontal="space-between" vertical="center" fillWidth paddingX="24" paddingY="16">
              <Text variant="label-default-s">Shape</Text>
              <Flex gap="4">
                {shapes.map((radius, index) => (
                  <Flex
                    data-border={shapes[index]}
                    key={radius}
                    horizontal="center"
                    vertical="center"
                    className={classNames(
                      styles.select,
                      selectedShape === radius ? styles.selected : "",
                    )}
                    onClick={() => {
                      setSelectedShape(radius);
                    }}
                  >
                    <IconButton variant="ghost" size="m">
                      <div className={classNames(styles.neutral, styles.swatch)}></div>
                    </IconButton>
                  </Flex>
                ))}
              </Flex>
            </Flex>
          </Column>
    
          <Column fillWidth paddingTop="12" paddingLeft="16" gap="4">
            <Text variant="heading-strong-s">Color</Text>
            <Text variant="body-default-s" onBackground="neutral-weak">
              Customize color schemes
            </Text>
          </Column>
          <Column fillWidth border="neutral-alpha-medium" radius="l-4">
            <Flex
              borderBottom="neutral-alpha-medium"
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Flex textVariant="label-default-s" minWidth={3}>
                Brand
              </Flex>
              <Scroller minWidth={0} fitWidth>
                {colorOptions.brand.map((color, index) => (
                  <Flex
                    marginRight="2"
                    key={color}
                    horizontal="center"
                    vertical="center"
                    className={classNames(styles.select, brandColor === color ? styles.selected : "")}
                    onClick={() => {
                      setBrandColor(color);
                    }}
                  >
                    <IconButton variant="ghost" size="m">
                      <div className={`${styles[color]} ${styles.swatch}`}></div>
                    </IconButton>
                  </Flex>
                ))}
              </Scroller>
            </Flex>
    
            <Flex
              borderBottom="neutral-alpha-medium"
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Flex textVariant="label-default-s" minWidth={3}>
                Accent
              </Flex>
              <Scroller minWidth={0} fitWidth>
                {colorOptions.accent.map((color, index) => (
                  <Flex
                    marginRight="2"
                    key={color}
                    horizontal="center"
                    vertical="center"
                    className={classNames(styles.select, accentColor === color ? styles.selected : "")}
                    onClick={() => {
                      setAccentColor(color);
                    }}
                  >
                    <IconButton variant="ghost" size="m">
                      <div className={`${styles[color]} ${styles.swatch}`}></div>
                    </IconButton>
                  </Flex>
                ))}
              </Scroller>
            </Flex>
    
            <Flex
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Flex textVariant="label-default-s" minWidth={3}>
                Neutral
              </Flex>
              <Scroller minWidth={0} fitWidth>
                {colorOptions.neutral.map((color, index) => (
                  <Flex
                    marginRight="2"
                    key={color}
                    horizontal="center"
                    vertical="center"
                    className={classNames(styles.select, neutralColor === color ? styles.selected : "")}
                    onClick={() => {
                      setNeutralColor(color);
                    }}
                  >
                    <IconButton variant="ghost" size="m">
                      <div className={`${styles[color]} ${styles.swatch}`}></div>
                    </IconButton>
                  </Flex>
                ))}
              </Scroller>
            </Flex>
          </Column>
    
          <Column fillWidth paddingTop="12" paddingLeft="16" gap="4">
            <Text variant="heading-strong-s">Solid style</Text>
            <Text variant="body-default-s" onBackground="neutral-weak">
              Customize the appearance of interactive elements
            </Text>
          </Column>
          <Column fillWidth border="neutral-alpha-medium" radius="l-4">
            <Flex
              borderBottom="neutral-alpha-medium"
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Text variant="label-default-s">Style</Text>
              <SegmentedControl
                maxWidth={22}
                minWidth={0}
                buttons={[
                  {
                    size: "l",
                    label: (
                      <Flex vertical="center" gap="12">
                        <Flex
                          data-solid="color"
                          border="brand-strong"
                          solid="brand-weak"
                          width="24"
                          height="24"
                          radius="s"
                        ></Flex>
                        Color
                      </Flex>
                    ),
                    value: "color",
                  },
                  {
                    size: "l",
                    label: (
                      <Flex vertical="center" gap="12">
                        <Flex
                          data-solid="inverse"
                          border="brand-strong"
                          solid="brand-strong"
                          width="24"
                          height="24"
                          radius="s"
                        ></Flex>
                        Inverse
                      </Flex>
                    ),
                    value: "inverse",
                  },
                  {
                    size: "l",
                    label: (
                      <Flex vertical="center" gap="12">
                        <Flex
                          data-solid="contrast"
                          border="brand-strong"
                          solid="brand-strong"
                          width="24"
                          height="24"
                          radius="s"
                        ></Flex>
                        Contrast
                      </Flex>
                    ),
                    value: "contrast",
                  },
                ]}
                onToggle={(value) => setSolid(value as "color" | "contrast" | "inverse")}
                selected={solid}
              />
            </Flex>
            <Flex
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Text variant="label-default-s">Effect</Text>
              <SegmentedControl
                maxWidth={22}
                minWidth={0}
                buttons={[
                  {
                    size: "l",
                    label: (
                      <Flex vertical="center" gap="12">
                        <Flex
                          border="brand-strong"
                          solid="brand-weak"
                          width="24"
                          height="24"
                          radius="s"
                        ></Flex>
                        Flat
                      </Flex>
                    ),
                    value: "flat",
                  },
                  {
                    size: "l",
                    label: (
                      <Flex vertical="center" gap="12">
                        <Flex
                          border="brand-strong"
                          style={{
                            boxShadow:
                              "inset 0 calc(-1 * var(--static-space-8)) var(--static-space-8) var(--brand-solid-strong)",
                          }}
                          solid="brand-weak"
                          width="24"
                          height="24"
                          radius="s"
                        ></Flex>
                        Plastic
                      </Flex>
                    ),
                    value: "plastic",
                  },
                ]}
                onToggle={(value) => setSolidStyle(value as "flat" | "plastic")}
                selected={solidStyle}
              />
            </Flex>
          </Column>
          <Column fillWidth paddingTop="12" paddingLeft="16" gap="4">
            <Text variant="heading-strong-s">Advanced</Text>
            <Text variant="body-default-s" onBackground="neutral-weak">
              Customize advanced styling options
            </Text>
          </Column>
          <Column fillWidth border="neutral-alpha-medium" radius="l-4">
            <Flex
              borderBottom="neutral-alpha-medium"
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Text variant="label-default-s">Surface</Text>
              <SegmentedControl
                maxWidth={22}
                minWidth={0}
                onToggle={(value) => setSurface(value as "translucent" | "filled")}
                selected={surface}
                buttons={[
                  {
                    size: "l",
                    label: "Filled",
                    value: "filled",
                  },
                  {
                    size: "l",
                    label: "Translucent",
                    value: "translucent",
                  },
                ]}
              />
            </Flex>
            <Flex
              borderBottom="neutral-alpha-medium"
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Text variant="label-default-s">Scaling</Text>
              <SegmentedControl
                maxWidth={22}
                minWidth={0}
                onToggle={(value) => setScaling(value as "90" | "95" | "100" | "105" | "110")}
                selected={scaling}
                buttons={[
                  {
                    size: "l",
                    label: "90",
                    value: "90",
                  },
                  {
                    size: "l",
                    label: "95",
                    value: "95",
                  },
                  {
                    size: "l",
                    label: "100",
                    value: "100",
                  },
                  {
                    size: "l",
                    label: "105",
                    value: "105",
                  },
                  {
                    size: "l",
                    label: "110",
                    value: "110",
                  },
                ]}
              />
            </Flex>
            <Flex
              horizontal="space-between"
              vertical="center"
              fillWidth
              paddingX="24"
              paddingY="16"
              gap="24"
            >
              <Text variant="label-default-s">Transition</Text>
              <SegmentedControl
                maxWidth={22}
                minWidth={0}
                onToggle={(value) => setTransition(value as "all" | "micro" | "macro" | "none")}
                selected={transition}
                buttons={[
                  {
                    size: "l",
                    label: "All",
                    value: "all",
                  },
                  {
                    size: "l",
                    label: "Micro",
                    value: "micro",
                  },
                  {
                    size: "l",
                    label: "Macro",
                    value: "macro",
                  },
                  {
                    size: "l",
                    label: "None",
                    value: "none",
                  },
                ]}
              />
            </Flex>
          </Column>
        </Column>
      );
    });
    
    StylePanel.displayName = "StylePanel";
    export { StylePanel };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Text.tsx
    ```tsx
    "use client";
    
    import React, { ElementType, ComponentPropsWithoutRef } from "react";
    import classNames from "classnames";
    
    import { TextProps, CommonProps, SpacingProps } from "../interfaces";
    import { ColorScheme, ColorWeight, TextVariant, SpacingToken } from "../types";
    
    type TypeProps<T extends ElementType> = TextProps<T> &
      CommonProps &
      SpacingProps &
      ComponentPropsWithoutRef<T>;
    
    const Text = <T extends ElementType = "span">({
      as,
      variant,
      size,
      weight,
      onBackground,
      onSolid,
      align,
      wrap,
      padding,
      paddingLeft,
      paddingRight,
      paddingTop,
      paddingBottom,
      paddingX,
      paddingY,
      margin,
      marginLeft,
      marginRight,
      marginTop,
      marginBottom,
      marginX,
      marginY,
      children,
      style,
      className,
      ...props
    }: TypeProps<T>) => {
      const Component = as || "span";
    
      if (variant && (size || weight)) {
        console.warn("When 'variant' is set, 'size' and 'weight' are ignored.");
      }
    
      if (onBackground && onSolid) {
        console.warn(
          "You cannot use both 'onBackground' and 'onSolid' props simultaneously. Only one will be applied.",
        );
      }
    
      const getVariantClasses = (variant: TextVariant) => {
        const [fontType, weight, size] = variant.split("-");
        return [`font-${fontType}`, `font-${weight}`, `font-${size}`];
      };
    
      const sizeClass = size ? `font-${size}` : "";
      const weightClass = weight ? `font-${weight}` : "";
    
      const classes = variant ? getVariantClasses(variant) : [sizeClass, weightClass];
    
      let colorClass = "";
      if (onBackground) {
        const [scheme, weight] = onBackground.split("-") as [ColorScheme, ColorWeight];
        colorClass = `${scheme}-on-background-${weight}`;
      } else if (onSolid) {
        const [scheme, weight] = onSolid.split("-") as [ColorScheme, ColorWeight];
        colorClass = `${scheme}-on-solid-${weight}`;
      }
    
      const generateClassName = (prefix: string, token: SpacingToken | undefined) => {
        return token ? `${prefix}-${token}` : undefined;
      };
    
      const combinedClasses = classNames(
        ...classes,
        colorClass,
        className,
        generateClassName("p", padding),
        generateClassName("pl", paddingLeft),
        generateClassName("pr", paddingRight),
        generateClassName("pt", paddingTop),
        generateClassName("pb", paddingBottom),
        generateClassName("px", paddingX),
        generateClassName("py", paddingY),
        generateClassName("m", margin),
        generateClassName("ml", marginLeft),
        generateClassName("mr", marginRight),
        generateClassName("mt", marginTop),
        generateClassName("mb", marginBottom),
        generateClassName("mx", marginX),
        generateClassName("my", marginY),
      );
    
      return (
        <Component
          className={combinedClasses}
          style={{
            textAlign: align,
            textWrap: wrap,
            ...style,
          }}
          {...props}
        >
          {children}
        </Component>
      );
    };
    
    Text.displayName = "Text";
    
    export { Text };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Textarea.tsx
    ```tsx
    "use client";
    
    import React, {
        useState,
        useEffect,
        forwardRef,
        TextareaHTMLAttributes,
        useCallback,
        ReactNode,
    } from "react";
    import classNames from "classnames";
    import { Flex, Text } from ".";
    import styles from "./Input.module.scss";
    import useDebounce from "../hooks/useDebounce";
    
    interface TextareaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {
        id: string;
        label: string;
        lines?: number | "auto";
        error?: boolean;
        errorMessage?: ReactNode;
        description?: ReactNode;
        radius?:
            | "none"
            | "top"
            | "right"
            | "bottom"
            | "left"
            | "top-left"
            | "top-right"
            | "bottom-right"
            | "bottom-left";
        className?: string;
        hasPrefix?: ReactNode;
        hasSuffix?: ReactNode;
        labelAsPlaceholder?: boolean;
        resize?: "horizontal" | "vertical" | "both" | "none";
        validate?: (value: ReactNode) => ReactNode | null;
    }
    
    const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(
        (
            {
                id,
                label,
                lines = 3,
                error = false,
                errorMessage,
                description,
                radius,
                className,
                hasPrefix,
                hasSuffix,
                labelAsPlaceholder = false,
                resize = "vertical",
                validate,
                children,
                onFocus,
                onBlur,
                onChange,
                style,
                ...props
            },
            ref,
        ) => {
            const [isFocused, setIsFocused] = useState(false);
            const [isFilled, setIsFilled] = useState(!!props.value);
            const [validationError, setValidationError] = useState<ReactNode | null>(null);
            const [height, setHeight] = useState<number | undefined>(undefined);
            const textareaRef = React.useRef<HTMLTextAreaElement>(null);
            const debouncedValue = useDebounce(props.value, 1000);
    
            const adjustHeight = () => {
                if (textareaRef.current) {
                    textareaRef.current.style.height = "auto";
                    textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`; // Set to scroll height
                }
            };
    
            const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
                if (lines === "auto") {
                    adjustHeight();
                }
                if (onChange) onChange(event);
            };
    
            const handleFocus = (event: React.FocusEvent<HTMLTextAreaElement>) => {
                setIsFocused(true);
                if (onFocus) onFocus(event);
            };
    
            const handleBlur = (event: React.FocusEvent<HTMLTextAreaElement>) => {
                setIsFocused(false);
                setIsFilled(!!event.target.value);
                if (onBlur) onBlur(event);
            };
    
            const validateInput = useCallback(() => {
                if (!debouncedValue) {
                    setValidationError(null);
                    return;
                }
    
                if (validate) {
                    const error = validate(debouncedValue);
                    if (error) {
                        setValidationError(error);
                    } else {
                        setValidationError(errorMessage || null);
                    }
                } else {
                    setValidationError(null);
                }
            }, [debouncedValue, validate, errorMessage]);
    
            useEffect(() => {
                validateInput();
            }, [debouncedValue, validateInput]);
    
            useEffect(() => {
                if (lines === "auto") {
                    adjustHeight();
                }
            }, [props.value, lines]);
    
            const displayError = validationError || errorMessage;
    
            const textareaClassNames = classNames(
                styles.input,
                styles.textarea,
                "font-body",
                "font-default",
                "font-m",
                {
                    [styles.filled]: isFilled,
                    [styles.focused]: isFocused,
                    [styles.withPrefix]: hasPrefix,
                    [styles.withSuffix]: hasSuffix,
                    [styles.labelAsPlaceholder]: labelAsPlaceholder,
                    [styles.hasChildren]: children,
                },
            );
    
            return (
                <Flex
                    direction="column"
                    gap="8"
                    fillWidth
                    fitHeight
                    className={classNames(className, {
                        [styles.error]: displayError && debouncedValue !== "",
                    })}
                >
                    <Flex
                        minHeight={labelAsPlaceholder ? "48" : "56"}
                        transition="micro-medium"
                        border="neutral-medium"
                        background="neutral-alpha-weak"
                        overflow="hidden"
                        vertical="stretch"
                        className={classNames(
                            styles.base,
                            lines !== "auto" && styles.textareaBase,
                            radius === "none"
                                ? "radius-none"
                                : radius
                                  ? `radius-l-${radius}`
                                  : "radius-l",
                        )}
                    >
                        {hasPrefix && (
                            <Flex paddingLeft="12" className={styles.prefix}>
                                {hasPrefix}
                            </Flex>
                        )}
                        <Flex fillWidth direction="column">
                            <textarea
                                {...props}
                                ref={(node) => {
                                    if (typeof ref === "function") {
                                        ref(node);
                                    } else if (ref) {
                                        ref.current = node;
                                    }
                                    // @ts-ignore
                                    textareaRef.current = node;
                                }}
                                id={id}
                                rows={typeof lines === "number" ? lines : 1}
                                placeholder={labelAsPlaceholder ? label : props.placeholder}
                                onFocus={handleFocus}
                                onBlur={handleBlur}
                                className={textareaClassNames}
                                aria-describedby={displayError ? `${id}-error` : undefined}
                                aria-invalid={!!displayError}
                                style={{
                                    ...style,
                                    resize: lines === "auto" ? "none" : resize,
                                    height: height ? `${height}rem` : "auto",
                                }}
                                onChange={handleChange}
                            />
                            {!labelAsPlaceholder && (
                                <Text
                                    as="label"
                                    variant="label-default-m"
                                    htmlFor={id}
                                    className={classNames(styles.label, styles.textareaLabel, {
                                        [styles.floating]: isFocused || isFilled,
                                    })}
                                >
                                    {label}
                                </Text>
                            )}
                            {children && children}
                        </Flex>
                        {hasSuffix && (
                            <Flex paddingRight="12" className={styles.suffix}>
                                {hasSuffix}
                            </Flex>
                        )}
                    </Flex>
                    {displayError && errorMessage !== false && (
                        <Flex paddingX="16">
                            <Text
                                as="span"
                                id={`${id}-error`}
                                variant="body-default-s"
                                onBackground="danger-weak"
                            >
                                {displayError}
                            </Text>
                        </Flex>
                    )}
                    {description && (
                        <Flex paddingX="16">
                            <Text
                                as="span"
                                id={`${id}-description`}
                                variant="body-default-s"
                                onBackground="neutral-weak"
                            >
                                {description}
                            </Text>
                        </Flex>
                    )}
                </Flex>
            );
        },
    );
    
    Textarea.displayName = "Textarea";
    
    export { Textarea };
    export type { TextareaProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ThemeProvider.tsx
    ```tsx
    "use client";
    
    import { createContext, useContext, useEffect, useState } from "react";
    
    type Theme = "light" | "dark" | "system";
    
    type ThemeProviderProps = {
      children: React.ReactNode;
    };
    
    type ThemeProviderState = {
      theme: Theme;
      resolvedTheme: 'light' | 'dark';
      setTheme: (theme: Theme) => void;
    };
    
    const initialState: ThemeProviderState = {
      theme: "system",
      resolvedTheme: 'dark',
      setTheme: () => null,
    };
    
    const ThemeProviderContext = createContext<ThemeProviderState>(initialState);
    
    export function ThemeProvider({ children }: ThemeProviderProps) {
      // Start with system theme on server, will be updated on client
      const [theme, setTheme] = useState<Theme>("system");
      const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('dark');
      const [mounted, setMounted] = useState(false);
    
      // Initialize theme from localStorage on mount
      useEffect(() => {
        const savedTheme = localStorage.getItem('theme') as Theme;
        if (savedTheme) {
          setTheme(savedTheme);
        }
        setMounted(true);
      }, []);
    
      // Update resolvedTheme when theme changes
      useEffect(() => {
        if (!mounted) return;
    
        const root = document.documentElement;
        if (theme === 'system') {
          const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          setResolvedTheme(isDark ? 'dark' : 'light');
          root.setAttribute('data-theme', isDark ? 'dark' : 'light');
        } else {
          setResolvedTheme(theme === 'dark' ? 'dark' : 'light');
          root.setAttribute('data-theme', theme);
        }
      }, [theme, mounted]);
    
      // Listen for system theme changes
      useEffect(() => {
        if (!mounted || theme !== 'system') return;
    
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const handleChange = (e: MediaQueryListEvent) => {
          setResolvedTheme(e.matches ? 'dark' : 'light');
          document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
        };
    
        mediaQuery.addEventListener('change', handleChange);
        return () => mediaQuery.removeEventListener('change', handleChange);
      }, [theme, mounted]);
    
      const value = {
        theme,
        resolvedTheme,
        setTheme: (newTheme: Theme) => {
          localStorage.setItem('theme', newTheme);
          setTheme(newTheme);
        },
      };
    
      return <ThemeProviderContext.Provider value={value}>{children}</ThemeProviderContext.Provider>;
    }
    
    export const useTheme = () => {
      const context = useContext(ThemeProviderContext);
    
      if (context === undefined) {
        throw new Error("useTheme must be used within a ThemeProvider");
      }
    
      return context;
    };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ThemeSwitcher.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import { Row, useTheme, IconButton } from "@/once-ui/components";
    
    type ThemeType = "system" | "dark" | "light";
    
    interface ThemeSwitchProps extends React.ComponentProps<typeof Row> {
      defaultTheme?: ThemeType;
    }
    
    const ThemeSwitcher = forwardRef<HTMLDivElement, ThemeSwitchProps>(
      ({ defaultTheme = "system", ...rest }, ref) => {
        const { theme, setTheme } = useTheme();
    
        return (
          <Row
            data-border="rounded"
            ref={ref}
            gap="2"
            border="neutral-alpha-weak"
            radius="full"
            {...rest}
          >
            <IconButton
              icon="computer"
              variant={theme === "system" ? "primary" : "tertiary"}
              onClick={() => setTheme("system")}
            />
            <IconButton
              icon="dark"
              variant={theme === "dark" ? "primary" : "tertiary"}
              onClick={() => setTheme("dark")}
            />
            <IconButton
              icon="light"
              variant={theme === "light" ? "primary" : "tertiary"}
              onClick={() => setTheme("light")}
            />
          </Row>
        );
      },
    );
    
    ThemeSwitcher.displayName = "ThemeSwitcher";
    export { ThemeSwitcher };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/TiltFx.module.scss
    ```scss
    .tiltFx {
        transition: transform 0.3s ease-out;
    }
    
    @media (hover: hover) {
        .tiltFx {
            perspective: 1000px;
            transform-style: preserve-3d;
            will-change: transform;
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/TiltFx.tsx
    ```tsx
    "use client";
    
    import React, { useRef } from "react";
    import styles from "./TiltFx.module.scss";
    import { Flex } from ".";
    
    interface TiltFxProps extends React.ComponentProps<typeof Flex> {
      children: React.ReactNode;
    }
    
    const TiltFx: React.FC<TiltFxProps> = ({ children, ...rest }) => {
      const ref = useRef<HTMLDivElement>(null);
      let lastCall = 0;
      let resetTimeout: NodeJS.Timeout;
    
      const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
        if ("ontouchstart" in window) return;
    
        clearTimeout(resetTimeout);
    
        const now = Date.now();
        if (now - lastCall < 16) return;
        lastCall = now;
    
        const element = ref.current;
        if (!element) return;
    
        const rect = element.getBoundingClientRect();
        const offsetX = e.clientX - rect.left;
        const offsetY = e.clientY - rect.top;
    
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
    
        const deltaX = (offsetX - centerX) / centerX;
        const deltaY = (offsetY - centerY) / centerY;
    
        const rotateX = -deltaY * 2;
        const rotateY = -deltaX * 2;
    
        window.requestAnimationFrame(() => {
          element.style.transform = `perspective(1000px) translate3d(0, 0, 30px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
        });
      };
    
      const handleMouseLeave = () => {
        if ("ontouchstart" in window) return;
    
        const element = ref.current;
        if (element) {
          resetTimeout = setTimeout(() => {
            element.style.transform =
              "perspective(1000px) translate3d(0, 0, 0) rotateX(0deg) rotateY(0deg)";
          }, 100);
        }
      };
    
      return (
        <Flex
          ref={ref}
          overflow="hidden"
          className={styles.tiltFx}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          {...rest}
        >
          {children}
        </Flex>
      );
    };
    
    export { TiltFx };
    TiltFx.displayName = "TiltFx";
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Toast.module.scss
    ```scss
    .toast {
        transition: opacity 0.3s, transform 0.3s;
    }
    
    .visible {
        opacity: 1;
    }
    
    .hidden {
        opacity: 0;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Toast.tsx
    ```tsx
    "use client";
    
    import React, { useEffect, useState, forwardRef } from "react";
    import { IconButton, Icon, Flex, Text } from ".";
    import classNames from "classnames";
    import styles from "./Toast.module.scss";
    import { IconName } from "../icons";
    
    interface ToastProps {
      className?: string;
      variant: "success" | "danger";
      icon?: boolean;
      onClose?: () => void;
      action?: React.ReactNode;
      children: React.ReactNode;
    }
    
    const iconMap: { [key in ToastProps["variant"]]: IconName } = {
      success: "checkCircle",
      danger: "errorCircle",
    };
    
    const Toast = forwardRef<HTMLDivElement, ToastProps>(
      ({ variant, className, icon = true, onClose, action, children }, ref) => {
        const [visible, setVisible] = useState(true);
    
        useEffect(() => {
          const timer = setTimeout(() => setVisible(false), 6000);
          return () => clearTimeout(timer);
        }, []);
    
        useEffect(() => {
          if (!visible && onClose) {
            onClose();
          }
        }, [visible, onClose]);
    
        return (
          <Flex
            ref={ref}
            fillWidth
            background="surface"
            radius="l"
            paddingY="12"
            paddingX="20"
            border="neutral-medium"
            role="alert"
            aria-live="assertive"
            className={classNames(className, styles.toast, styles[variant], {
              [styles.visible]: visible,
              [styles.hidden]: !visible,
            })}
          >
            <Flex fillWidth vertical="center" gap="8">
              {icon && (
                <Icon
                  size="s"
                  onBackground={`${variant}-medium`}
                  name={iconMap[variant]}
                />
              )}
              <Text variant="body-default-s" style={{ width: "100%" }} as="div">
                {children}
              </Text>
              {action && <div>{action}</div>}
              {onClose && (
                <IconButton
                  variant="ghost"
                  icon="close"
                  size="m"
                  tooltip="Hide"
                  tooltipPosition="top"
                  onClick={() => setVisible(false)}
                />
              )}
            </Flex>
          </Flex>
        );
      }
    );
    
    Toast.displayName = "Toast";
    
    export { Toast };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Toaster.module.scss
    ```scss
    .toastContainer {
        bottom: var(--responsive-space-l);
        left: 50%;
        transform: translateX(-50%);
    }
    
    .toastWrapper {
        bottom: 0;
        transition: transform 0.3s, opacity 0.3s;
    }
    
    .toastAnimation {
        animation: fadeIn 0.3s ease-out forwards;
    }
    
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(4rem);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Toaster.tsx
    ```tsx
    "use client";
    
    import React, { useEffect, useState } from "react";
    import { createPortal } from "react-dom";
    import { Flex, Toast } from ".";
    import styles from "./Toaster.module.scss";
    
    interface ToasterProps {
      toasts: {
        id: string;
        variant: "success" | "danger";
        message: string;
        action?: React.ReactNode;
      }[];
      removeToast: (id: string) => void;
    }
    
    const Toaster: React.FC<ToasterProps> = ({ toasts, removeToast }) => {
      const [mounted, setMounted] = useState(false);
    
      useEffect(() => {
        setMounted(true);
        return () => setMounted(false);
      }, []);
    
      if (!mounted) return null;
    
      return createPortal(
        <Flex
          zIndex={10}
          fillWidth
          direction="column"
          maxWidth={32}
          position="fixed"
          className={styles.toastContainer}
        >
          {toasts.map((toast, index, array) => (
            <Flex
              padding="4"
              fillWidth
              position="absolute"
              key={toast.id}
              className={styles.toastWrapper}
              style={{
                transformOrigin: "bottom center",
                transform: `scale(${1 - (array.length - 1 - index) * 0.05}) translateY(${1 - (array.length - 1 - index) * 10}%)`,
                opacity: array.length - 1 - index === 0 ? 1 : 0.9,
              }}
            >
              <Toast
                className={styles.toastAnimation}
                variant={toast.variant}
                onClose={() => removeToast(toast.id)}
                action={toast.action}
              >
                {toast.message}
              </Toast>
            </Flex>
          ))}
        </Flex>,
        document.body,
      );
    };
    
    Toaster.displayName = "Toaster";
    export { Toaster };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ToastProvider.tsx
    ```tsx
    "use client";
    
    import React, { createContext, useContext, useState, ReactNode } from "react";
    import { Toaster } from "./Toaster";
    
    interface Toast {
      id: string;
      variant: "success" | "danger";
      message: string;
      action?: ReactNode;
    }
    
    interface ToastContextProps {
      toasts: Toast[];
      addToast: (toast: Omit<Toast, "id">) => void;
      removeToast: (id: string) => void;
    }
    
    const ToastContext = createContext<ToastContextProps | undefined>(undefined);
    
    export const useToast = () => {
      const context = useContext(ToastContext);
      if (!context) {
        throw new Error("useToast must be used within a ToastProvider");
      }
      return context;
    };
    
    const ToastProvider: React.FC<{
      children: ReactNode;
    }> = ({ children }) => {
      const [toasts, setToasts] = useState<Toast[]>([]);
    
      const addToast = (toast: Omit<Toast, "id">) => {
        const newToast: Toast = {
          id: Math.random().toString(36).substring(7),
          ...toast,
        };
        setToasts((prev) => [...prev, newToast]);
      };
    
      const removeToast = (id: string) => {
        setToasts((prev) => prev.filter((toast) => toast.id !== id));
      };
    
      return (
        <ToastContext.Provider
          value={{
            toasts,
            addToast,
            removeToast,
          }}
        >
          {children}
          <Toaster toasts={toasts} removeToast={removeToast} />
        </ToastContext.Provider>
      );
    };
    
    ToastProvider.displayName = "ToastProvider";
    export { ToastProvider };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ToggleButton.module.scss
    ```scss
    .button {
        display: flex;
        align-items: center;
        gap: var(--static-space-8);
        border-width: 1px;
        border-style: solid;
        background: var(--static-transparent);
        color: var(--neutral-on-background-strong);
        transition: var(--transition-micro-medium);
        user-select: none;
        white-space: nowrap;
      
        &:hover, &:focus {
            background: var(--neutral-alpha-weak);
            border-color: var(--neutral-alpha-weak);
        }
      
        &.selected {
            background-color: var(--neutral-alpha-medium);
            border-color: var(--neutral-alpha-weak);
        }
    
        &:disabled {
            background: var(--neutral-alpha-weak);
            color: var(--neutral-on-background-medium);
            border: none;
            pointer-events: none;
            cursor: not-allowed;
        }
    }
    
    .s {
        height: var(--static-space-24);
        min-height: var(--static-space-24);
        padding: var(--static-space-2) var(--static-space-8);
    }
    
    .m {
        height: var(--static-space-32);
        min-height: var(--static-space-32);
        padding: var(--static-space-4) var(--static-space-12);
    }
      
    .l {
        height: var(--static-space-40);
        min-height: var(--static-space-40);
        padding: var(--static-space-8) var(--static-space-16);
    }
    
    .ghost {
        border-color: var(--static-transparent);
    }
    
    .outline {
        border-color: var(--neutral-alpha-weak);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/ToggleButton.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import classNames from "classnames";
    import { ElementType } from "./ElementType";
    import { Flex, Icon } from ".";
    import styles from "./ToggleButton.module.scss";
    import { IconName } from "../icons";
    
    interface CommonProps {
      label?: ReactNode;
      selected?: boolean;
      variant?: "ghost" | "outline";
      size?: "s" | "m" | "l";
      radius?:
        | "none"
        | "top"
        | "right"
        | "bottom"
        | "left"
        | "top-left"
        | "top-right"
        | "bottom-right"
        | "bottom-left";
      justifyContent?: "start" | "center" | "end" | "space-between";
      fillWidth?: boolean;
      weight?: "default" | "strong";
      truncate?: boolean;
      prefixIcon?: IconName;
      suffixIcon?: IconName;
      className?: string;
      style?: React.CSSProperties;
      children?: ReactNode;
      href?: string;
    }
    
    export type ToggleButtonProps = CommonProps &
      React.ButtonHTMLAttributes<HTMLButtonElement>;
    
    const ToggleButton = forwardRef<HTMLElement, ToggleButtonProps>(
      (
        {
          label,
          selected = false,
          variant = "ghost",
          size = "m",
          radius,
          justifyContent = "center",
          fillWidth = false,
          weight = "default",
          truncate = false,
          prefixIcon,
          suffixIcon,
          className,
          style,
          children,
          href,
          ...props
        },
        ref
      ) => {
        return (
          <ElementType
            ref={ref}
            href={href}
            className={classNames(
              styles.button,
              styles[variant],
              styles[size],
              selected && styles.selected,
              radius === "none"
                ? "radius-none"
                : radius
                ? `radius-${size}-${radius}`
                : `radius-${size}`,
              "text-decoration-none",
              "button",
              "cursor-interactive",
              {
                ["fill-width"]: fillWidth,
                ["fit-width"]: !fillWidth,
                ["justify-" + justifyContent]: justifyContent,
              },
              className
            )}
            style={style}
            {...props}
          >
            {prefixIcon && (
              <Icon name={prefixIcon} size={size === "l" ? "s" : "xs"} />
            )}
            {(label || children) && (
              <Flex
                fillWidth={fillWidth}
                horizontal={justifyContent}
                padding={size === "s" ? "2" : "4"}
                textWeight={weight}
                textSize={size === "l" ? "m" : "s"}
                className="font-label"
                position="static"
              >
                {label || children}
              </Flex>
            )}
            {suffixIcon && <Icon name={suffixIcon} size={size === "l" ? "s" : "xs"} />}
          </ElementType>
        );
      }
    );
    
    ToggleButton.displayName = "ToggleButton";
    export { ToggleButton };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/Tooltip.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef, ReactNode } from "react";
    import classNames from "classnames";
    
    import { Flex, Icon } from ".";
    import { IconName } from "../icons";
    
    type TooltipProps = {
      label: ReactNode;
      prefixIcon?: IconName;
      suffixIcon?: IconName;
      className?: string;
      style?: React.CSSProperties;
    };
    
    const Tooltip = forwardRef<HTMLDivElement, TooltipProps>(
      ({ label, prefixIcon, suffixIcon, className, style }, ref) => {
        return (
          <Flex
            hide="m"
            ref={ref}
            style={{
              whiteSpace: "nowrap",
              userSelect: "none",
              ...style,
            }}
            vertical="center"
            gap="4"
            zIndex={1}
            background="surface"
            paddingY="4"
            paddingX="8"
            radius="s"
            border="neutral-medium"
            role="tooltip"
            className={classNames(className)}
          >
            {prefixIcon && <Icon name={prefixIcon} size="xs" />}
            <Flex
              paddingX="2"
              vertical="center"
              textVariant="body-default-xs"
              onBackground="neutral-strong"
            >
              {label}
            </Flex>
            {suffixIcon && <Icon name={suffixIcon} size="xs" />}
          </Flex>
        );
      }
    );
    
    Tooltip.displayName = "Tooltip";
    
    export { Tooltip };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/User.tsx
    ```tsx
    "use client";
    
    import React, { forwardRef } from "react";
    import classNames from "classnames";
    
    import { Flex, Text, Skeleton, Tag, TagProps, Avatar, AvatarProps } from ".";
    
    interface UserProps {
      name?: string;
      children?: React.ReactNode;
      subline?: React.ReactNode;
      tag?: string;
      tagProps?: TagProps;
      loading?: boolean;
      avatarProps?: AvatarProps;
      className?: string;
    }
    
    const User = forwardRef<HTMLDivElement, UserProps>(
      (
        { name, children, subline, tagProps = {}, loading = false, avatarProps = {}, className },
        ref,
      ) => {
        const { src, value, empty, ...restAvatarProps } = avatarProps;
        const isEmpty = empty || (!src && !value);
    
        return (
          <Flex ref={ref} vertical="center" gap="8" className={classNames(className)}>
            <Avatar
              size="m"
              src={src}
              value={value}
              empty={isEmpty}
              loading={loading}
              {...restAvatarProps}
            />
            {children}
            {name && (
              <Flex direction="column" paddingLeft="4" paddingRight="12">
                {loading ? (
                  <Flex minWidth={6} paddingY="4">
                    <Skeleton width="xl" height="m" shape="line" aria-label="Loading name" />
                  </Flex>
                ) : (
                  <Flex gap="8" vertical="center">
                    <Text variant="heading-strong-xs" onBackground="neutral-strong">
                      {name}
                    </Text>
                    {tagProps.label && (
                      <Tag size="s" {...tagProps}>
                        {tagProps.label}
                      </Tag>
                    )}
                  </Flex>
                )}
                {loading ? (
                  <Flex paddingY="2">
                    <Skeleton width="l" height="xs" shape="line" aria-label="Loading subline" />
                  </Flex>
                ) : (
                  <Text wrap="nowrap" variant="body-default-xs" onBackground="neutral-weak">
                    {subline}
                  </Text>
                )}
              </Flex>
            )}
          </Flex>
        );
      },
    );
    
    User.displayName = "User";
    
    export { User };
    export type { UserProps };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/UserMenu.module.scss
    ```scss
    .wrapper {
        border: 1px solid var(--static-transparent);
        transition: var(--transition-micro-medium);
    
        &:hover {
            background-color: var(--neutral-alpha-weak);
            border: 1px solid var(--neutral-alpha-medium);
        }
    
        &.selected:hover {
            background-color: var(--neutral-background-strong);
            border: 1px solid var(--neutral-border-strong);
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/components/UserMenu.tsx
    ```tsx
    "use client";
    
    import React from "react";
    import classNames from "classnames";
    import { Flex, DropdownWrapper, User, UserProps } from ".";
    import styles from "./UserMenu.module.scss";
    import { DropdownWrapperProps } from "./DropdownWrapper";
    
    interface UserMenuProps
      extends UserProps,
        Pick<DropdownWrapperProps, "minHeight" | "minWidth" | "maxWidth"> {
      selected?: boolean;
      dropdown?: React.ReactNode;
      className?: string;
      style?: React.CSSProperties;
    }
    
    const UserMenu: React.FC<UserMenuProps> = ({
      selected = false,
      dropdown,
      minWidth,
      maxWidth,
      minHeight,
      className,
      style,
      ...userProps
    }) => {
      return (
        <DropdownWrapper
          minWidth={minWidth}
          maxWidth={maxWidth}
          minHeight={minHeight}
          style={{
            borderRadius: "var(--radius-full)",
          }}
          trigger={
            <Flex
              tabIndex={0}
              direction="column"
              padding="4"
              radius="full"
              cursor="interactive"
              border={selected ? "neutral-medium" : "transparent"}
              background={selected ? "neutral-strong" : "transparent"}
              className={classNames(className || "", selected ? styles.selected : "", styles.wrapper)}
              style={style}
            >
              <User {...userProps} />
            </Flex>
          }
          dropdown={<>{dropdown}</>}
        />
      );
    };
    
    UserMenu.displayName = "UserMenu";
    export { UserMenu };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/hooks/generateHeadingLinks.ts
    ```ts
    import { useEffect, useState } from "react";
    
    export const useHeadingLinks = () => {
      const [headings, setHeadings] = useState<{ id: string; text: string; level: number }[]>([]);
    
      useEffect(() => {
        const elements = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"))
          .filter((elem) => !elem.hasAttribute("data-exclude-nav"))
          .map((elem, index) => ({
            id: elem.id || `heading-${index}`,
            text: elem.textContent || "",
            level: Number(elem.tagName.substring(1)),
          }));
        setHeadings(elements);
      }, []);
    
      return headings;
    };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/hooks/useDebounce.ts
    ```ts
    import { useEffect, useState } from "react";
    
    function useDebounce(value: any, delay: number) {
      const [debouncedValue, setDebouncedValue] = useState(value);
    
      useEffect(() => {
        const handler = setTimeout(() => {
          setDebouncedValue(value);
        }, delay);
    
        return () => {
          clearTimeout(handler);
        };
      }, [value, delay]);
    
      return debouncedValue;
    }
    
    export default useDebounce;
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/code/CodeBlock.module.scss
    ```scss
    .pre {
        display: flex;
        isolation: isolate;
        font-family: var(--font-family-code);
        color: var(--neutral-on-background-strong);
        font-size: var(--font-size-body-s);
        white-space: pre;
        width: 100%;
        tab-size: 2;
        margin: 0;
        height: fit-content;
        width: 100%;
        min-height: var(--static-space-32);
        tab-size: 2;
        line-height: 1.75;
    }
    
    .padding {
        padding: var(--static-space-8);
    }
    
    .lineNumberPadding {
        padding: var(--static-space-8) var(--static-space-8) var(--static-space-8) var(--static-space-40);
    }
    
    .code {
        flex: 1;
        width: 100%;
        margin: auto;
        padding: 0 var(--static-space-12);
        font-family: inherit;
    }
    
    .fullscreen {
        position: fixed;
        left: var(--static-space-8);
        top: var(--static-space-8);
        right: var(--static-space-8);
        bottom: var(--static-space-8);
        width: calc(100% - var(--static-space-16)) !important;
        height: calc(100% - var(--static-space-16)) !important;
        z-index: 9;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/code/CodeBlock.tsx
    ```tsx
    "use client";
    
    import React, { useState, useEffect, useRef, ReactNode } from "react";
    
    import "./CodeHighlight.css";
    import "./LineNumber.css";
    import styles from "./CodeBlock.module.scss";
    
    import { Flex, Button, IconButton, Scroller, Row, StyleOverlay } from "../../components";
    
    import Prism from "prismjs";
    import "prismjs/plugins/line-highlight/prism-line-highlight";
    import "prismjs/plugins/line-numbers/prism-line-numbers";
    import "prismjs/components/prism-jsx";
    import "prismjs/components/prism-css";
    import "prismjs/components/prism-typescript";
    import "prismjs/components/prism-tsx";
    import classNames from "classnames";
    import { SpacingToken } from "../../types";
    
    type CodeInstance = {
      code: string | { content: string; error: string | null };
      language: string;
      label: string;
    };
    
    interface CodeBlockProps extends React.ComponentProps<typeof Flex> {
      highlight?: string;
      codeHeight?: number;
      fillHeight?: boolean;
      previewPadding?: SpacingToken;
      codeInstances?: CodeInstance[];
      codePreview?: ReactNode;
      copyButton?: boolean;
      styleButton?: boolean;
      reloadButton?: boolean;
      fullscreenButton?: boolean;
      compact?: boolean;
      className?: string;
      style?: React.CSSProperties;
      onInstanceChange?: (index: number) => void;
      lineNumbers?: boolean;
    }
    
    const CodeBlock: React.FC<CodeBlockProps> = ({
      highlight,
      codeHeight,
      fillHeight,
      previewPadding = "l",
      codeInstances = [],
      codePreview,
      copyButton = true,
      styleButton = false,
      reloadButton = false,
      fullscreenButton = false,
      lineNumbers = false,
      compact = false,
      className,
      style,
      onInstanceChange,
      ...rest
    }) => {
      const codeRef = useRef<HTMLElement>(null);
      const preRef = useRef<HTMLPreElement>(null);
      const [selectedInstance, setSelectedInstance] = useState(0);
      const [isFullscreen, setIsFullscreen] = useState(false);
    
      const { code, language, label } = codeInstances[selectedInstance] || {
        code: "",
        language: "",
        label: "Select code",
      };
    
      useEffect(() => {
        if (codeRef.current && codeInstances.length > 0) {
          Prism.highlightAll();
        }
      }, [code, codeInstances.length]);
    
      useEffect(() => {
        if (isFullscreen) {
          document.body.style.overflow = "hidden";
        } else {
          document.body.style.overflow = "";
        }
        return () => {
          document.body.style.overflow = "";
        };
      }, [isFullscreen]);
    
      const [copyIcon, setCopyIcon] = useState<string>("clipboard");
      const handleCopy = () => {
        if (codeInstances.length > 0 && code) {
          navigator.clipboard
            .writeText(typeof code === "string" ? code : code.content)
            .then(() => {
              setCopyIcon("check");
    
              setTimeout(() => {
                setCopyIcon("clipboard");
              }, 5000);
            })
            .catch((err) => {
              console.error("Failed to copy code: ", err);
            });
        }
      };
    
      const [refreshKey, setRefreshKey] = useState(0);
      const handleRefresh = () => {
        setRefreshKey((prev) => prev + 1);
      };
    
      const handleContent = (selectedLabel: string) => {
        const index = codeInstances.findIndex((instance) => instance.label === selectedLabel);
        if (index !== -1) {
          setSelectedInstance(index);
        }
      };
    
      const toggleFullscreen = () => {
        setIsFullscreen((prev) => !prev);
      };
    
      return (
        <Flex
          position={isFullscreen ? "fixed" : "relative"}
          zIndex={0}
          background="surface"
          radius="l"
          overflow="hidden"
          border="neutral-medium"
          direction="column"
          vertical="center"
          fillWidth
          minHeight={3}
          className={classNames(className, {
            [styles.fullscreen]: isFullscreen,
          })}
          style={style}
          {...rest}
        >
          {(codeInstances.length > 1 || (copyButton && !compact)) && (
            <Flex
              borderBottom="neutral-medium"
              zIndex={2}
              position="static"
              fillWidth
              horizontal="space-between"
              gap="16"
            >
              {codeInstances.length > 1 ? (
                <Scroller paddingX="4">
                  {codeInstances.map((instance, index) => (
                    <Row paddingY="4" paddingRight="2" key={index}>
                      <Button
                        className="mr-2"
                        weight="default"
                        size="s"
                        variant={selectedInstance === index ? "secondary" : "tertiary"}
                        label={instance.label}
                        onClick={() => {
                          setSelectedInstance(index);
                          onInstanceChange?.(index);
                          handleContent(instance.label);
                        }}
                      />
                    </Row>
                  ))}
                </Scroller>
              ) : (
                <Row
                  paddingY="12"
                  paddingX="16"
                  textVariant="label-default-s"
                  onBackground="neutral-strong"
                >
                  {codeInstances[0].label}
                </Row>
              )}
              {!compact && (
                <Flex padding="4" gap="2" position="static">
                  {reloadButton && (
                    <IconButton
                      size="m"
                      tooltip="Reload"
                      tooltipPosition="left"
                      variant="tertiary"
                      onClick={handleRefresh}
                      icon="refresh"
                    />
                  )}
                  {fullscreenButton && (
                    <IconButton
                      size="m"
                      tooltip={isFullscreen ? "Exit fullscreen" : "Fullscreen"}
                      tooltipPosition="left"
                      variant="tertiary"
                      icon={isFullscreen ? "minimize" : "maximize"}
                      onClick={toggleFullscreen}
                    />
                  )}
                  {styleButton && (
                    <StyleOverlay
                      iconButtonProps={{
                        size: "m",
                        variant: "tertiary",
                      }}
                    />
                  )}
                  {copyButton && (
                    <IconButton
                      size="m"
                      tooltip="Copy"
                      tooltipPosition="left"
                      variant="tertiary"
                      onClick={handleCopy}
                      icon={copyIcon}
                    />
                  )}
                </Flex>
              )}
            </Flex>
          )}
          {codePreview && (
            <Flex
              key={refreshKey}
              padding={previewPadding}
              fillHeight
              horizontal="center"
              overflowY="auto"
            >
              {Array.isArray(codePreview)
                ? codePreview.map((item, index) => <React.Fragment key={index}>{item}</React.Fragment>)
                : codePreview}
            </Flex>
          )}
          {codeInstances.length > 0 && code && (
            <Flex
              borderTop={!compact && codePreview ? "neutral-medium" : undefined}
              fillWidth
              fillHeight={fillHeight}
            >
              <Flex overflowX="auto" fillWidth>
                <pre
                  style={{ maxHeight: `${codeHeight}rem` }}
                  data-line={highlight}
                  ref={preRef}
                  className={classNames(
                    lineNumbers ? styles.lineNumberPadding : styles.padding,
                    styles.pre,
                    `language-${language}`,
                    {
                      "line-numbers": lineNumbers,
                    },
                  )}
                  tabIndex={-1}
                >
                  <code ref={codeRef} className={classNames(styles.code, `language-${language}`)}>
                    {typeof code === "string" ? code : code.content}
                  </code>
                </pre>
              </Flex>
              {compact && copyButton && (
                <Flex paddingX="8" paddingY="4" className={styles.compactCopy} zIndex={1}>
                  <IconButton
                    tooltip="Copy"
                    tooltipPosition="left"
                    aria-label="Copy code"
                    onClick={handleCopy}
                    icon={copyIcon}
                    size="m"
                    variant="tertiary"
                  />
                </Flex>
              )}
            </Flex>
          )}
        </Flex>
      );
    };
    
    CodeBlock.displayName = "CodeBlock";
    export { CodeBlock };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/code/CodeHighlight.css
    ```css
    .token.comment,
    .token.prolog,
    .token.doctype,
    .token.cdata {
      color: var(--code-moss);
    }
    
    .token.punctuation {
      color: var(--code-gray);
    }
    
    .token.property,
    .token.tag,
    .token.constant,
    .token.symbol,
    .token.deleted {
      color: var(--code-aqua);
    }
    
    .token.boolean,
    .token.number {
      color: var(--code-green);
    }
    
    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
      color: var(--code-blue);
    }
    
    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string {
      color: var(--code-gray);
    }
    
    .token.atrule,
    .token.attr-value,
    .token.keyword {
      color: var(--code-violet);
    }
    
    .token.function,
    .token.class-name {
      color: var(--code-blue);
    }
    
    .token.regex,
    .token.important,
    .token.variable {
      color: var(--code-orange);
    }
    
    .token.important,
    .token.bold {
      font-weight: bold;
    }
    
    .token.italic {
      font-style: italic;
    }
    
    .token.entity {
      cursor: help;
    }
    
    @media print {
      .line-highlight {
        print-color-adjust: exact;
        color-adjust: exact;
      }
    }
    
    .line-highlight {
      position: absolute;
      background-color: var(--brand-alpha-weak);
      border-left: 2px solid var(--brand-alpha-strong);
      width: 100%;
      left: 0;
      margin-top: var(--static-space-8);
      z-index: 0;
    }
    
    .line-numbers .line-highlight:before,
    .line-numbers .line-highlight:after {
      content: none;
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/code/LineNumber.css
    ```css
    .line-numbers {
      position: relative;
      counter-reset: linenumber;
    }
    
    .line-numbers > code {
      position: relative;
      white-space: inherit;
    }
    
    .line-numbers-rows {
      padding-right: var(--static-space-4);
      left: calc(-1 * var(--static-space-40));
      position: absolute;
      pointer-events: none;
      top: 0;
      font-size: 100%;
      width: var(--static-space-48);
      user-select: none;
    }
    
    .line-numbers-rows > span {
      display: block;
      counter-increment: linenumber;
    }
    
    .line-numbers-rows > span:before {
      content: counter(linenumber);
      color: var(--neutral-on-background-weak);
      display: block;
      padding-right: var(--static-space-8);
      text-align: right;
      transform: scale(0.9);
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/code/prismjs.d.ts
    ```ts
    declare module "prismjs" {
      const Prism: {
        highlightAll: () => void;
        highlight: (code: string, grammar: any, language: string) => string;
        languages: {
          [language: string]: any;
        };
      };
      export default Prism;
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/media/MediaUpload.module.scss
    ```scss
    .container {
        &:hover, &:focus {
            background-color: var(--neutral-background-strong);
        }
    }
    
    .text {
        display: none;
        visibility: hidden;
        opacity: 0;
    }
    
    .upload {
        &:hover {
            background: var(--backdrop);
            backdrop-filter: blur(0.25rem);
    
            .text {
                display: block;
                visibility: visible;
                opacity: 1;
            }
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/media/MediaUpload.tsx
    ```tsx
    "use client";
    
    import React, { useRef, useState, forwardRef, useEffect } from "react";
    import Compressor from "compressorjs";
    import { Flex, Icon, SmartImage, Spinner, Text } from "../../components";
    import styles from "./MediaUpload.module.scss";
    
    interface MediaUploadProps extends React.ComponentProps<typeof Flex> {
      onFileUpload?: (file: File) => Promise<void>;
      compress?: boolean;
      aspectRatio?: string;
      className?: string;
      style?: React.CSSProperties;
      initialPreviewImage?: string | null;
      emptyState?: React.ReactNode;
      quality?: number;
      sizes?: string;
      children?: React.ReactNode;
      convertTypes?: string[];
      resizeMaxWidth?: number;
      resizeMaxHeight?: number;
      resizeWidth?: number;
      resizeHeight?: number;
      loading?: boolean;
      accept?: string;
    }
    
    const MediaUpload = forwardRef<HTMLInputElement, MediaUploadProps>(
      (
        {
          onFileUpload,
          compress = true,
          aspectRatio = "16 / 9",
          quality = 0.8,
          convertTypes = ["image/png", "image/webp", "image/jpg"],
          emptyState = "Drag and drop or click to browse",
          resizeMaxWidth = 1920,
          resizeMaxHeight = 1920,
          resizeWidth = 1200,
          resizeHeight = 1200,
          loading = false,
          sizes,
          children,
          initialPreviewImage = null,
          accept = "image/*",
          ...rest
        },
        ref,
      ) => {
        const [dragActive, setDragActive] = useState(false);
        const [previewImage, setPreviewImage] = useState<string | null>(initialPreviewImage); // Use prop as initial state
        const [uploading, setUploading] = useState(false);
        const inputRef = useRef<HTMLInputElement>(null);
    
        useEffect(() => {
          if (initialPreviewImage) {
            setPreviewImage(initialPreviewImage);
          }
        }, [initialPreviewImage]);
    
        const handleDragOver = (e: React.DragEvent) => {
          e.preventDefault();
          e.stopPropagation();
          setDragActive(true);
        };
    
        const handleDragLeave = (e: React.DragEvent) => {
          e.preventDefault();
          e.stopPropagation();
          setDragActive(false);
        };
    
        const handleDrop = (e: React.DragEvent) => {
          e.preventDefault();
          e.stopPropagation();
          setDragActive(false);
    
          if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
            handleFiles(e.dataTransfer.files);
          }
        };
    
        const handleFileSelection = () => {
          if (inputRef.current) {
            inputRef.current.click();
          }
        };
    
        const handleFiles = (files: FileList) => {
          const file = files[0];
          if (!file) return;
    
          if (file.type.startsWith("image/")) {
            setPreviewImage(URL.createObjectURL(file));
    
            if (compress && file.type.startsWith("image/")) {
              compressImage(file);
            } else {
              uploadFile(file);
            }
          } else {
            console.warn("Unsupported file type:", file.type);
          }
        };
    
        const compressImage = (file: File) => {
          new Compressor(file, {
            convertTypes: convertTypes,
            quality: quality,
            maxWidth: resizeMaxWidth,
            maxHeight: resizeMaxHeight,
            width: resizeWidth,
            height: resizeHeight,
            success(compressedFile) {
              uploadFile(compressedFile as File);
            },
            error(err) {
              console.error("Compression error:", err);
              uploadFile(file);
            },
          });
        };
    
        const uploadFile = async (file: File) => {
          setUploading(true);
          if (onFileUpload) {
            await onFileUpload(file);
          }
          setUploading(false);
        };
    
        return (
          <Flex
            transition="micro-medium"
            overflow="hidden"
            cursor="interactive"
            className={styles.container}
            aspectRatio={aspectRatio}
            fillWidth
            horizontal="center"
            vertical="center"
            border="neutral-medium"
            radius="l"
            onClick={handleFileSelection}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            {...rest}
          >
            {!loading && (
              <>
                {previewImage ? (
                  <SmartImage
                    style={{
                      cursor: "pointer",
                      filter: uploading ? "grayscale(1)" : "",
                    }}
                    sizes={sizes}
                    fill
                    src={previewImage ? previewImage : ""}
                    alt="Preview of uploaded image"
                  />
                ) : (
                  <Flex fill center>
                    <Icon name="plus" size="l" />
                  </Flex>
                )}
              </>
            )}
            {children}
            <Flex
              className={styles.upload}
              zIndex={1}
              transition="micro-medium"
              position="absolute"
              fill
              padding="m"
              horizontal="center"
              vertical="center"
            >
              {uploading || loading ? (
                <Spinner size="l" />
              ) : (
                <Text className={styles.text} align="center">
                  {emptyState}
                </Text>
              )}
            </Flex>
            <input
              type="file"
              ref={inputRef}
              accept={accept}
              style={{ display: "none" }}
              onChange={(e) => {
                if (e.target.files) {
                  handleFiles(e.target.files);
                }
              }}
            />
          </Flex>
        );
      },
    );
    
    MediaUpload.displayName = "MediaUpload";
    export { MediaUpload };
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/seo/Meta.tsx
    ```tsx
    import type { Metadata as NextMetadata } from "next";
    
    export interface Alternate {
      href: string;
      hrefLang: string;
    }
    
    export interface MetaProps {
      title: string;
      description: string;
      baseURL: string;
      path?: string;
      type?: "website" | "article";
      image?: string;
      publishedTime?: string;
      author?: {
        name: string;
        url?: string;
      };
      canonical?: string;
      robots?: string;
      noindex?: boolean;
      nofollow?: boolean;
      alternates?: Alternate[];
    }
    
    export function generateMetadata({
      title,
      description,
      baseURL,
      path = "",
      type = "website",
      image,
      publishedTime,
      author,
      canonical,
      robots,
      noindex,
      nofollow,
      alternates,
    }: MetaProps): NextMetadata {
      const normalizedBaseURL = baseURL.endsWith("/") ? baseURL.slice(0, -1) : baseURL;
      const normalizedPath = path.startsWith("/") ? path : `/${path}`;
    
      const ogImage = image
        ? `${image.startsWith("/") ? image : `/${image}`}`
        : `/og?title=${encodeURIComponent(title)}`;
    
      const url = canonical || `${normalizedBaseURL}${normalizedPath}`;
    
      let robotsContent = robots;
      if (!robotsContent && (noindex || nofollow)) {
        robotsContent = `${noindex ? "noindex" : "index"},${nofollow ? "nofollow" : "follow"}`;
      }
    
    
      return {
        metadataBase: new URL(normalizedBaseURL.startsWith('https://') ? normalizedBaseURL : `https://${normalizedBaseURL}`),
        title,
        description,
        openGraph: {
          title,
          description,
          type,
          ...(publishedTime && type === "article" ? { publishedTime } : {}),
          url,
          images: [
            {
              url: ogImage,
              alt: title,
            },
          ],
        },
        twitter: {
          card: "summary_large_image",
          title,
          description,
          images: [ogImage],
        },
        ...(author ? { authors: [{ name: author.name, url: author.url }] } : {}),
        ...(robotsContent ? { robots: robotsContent } : {}),
        ...(alternates?.length
          ? {
              alternates: {
                canonical: url,
                languages: Object.fromEntries(
                  alternates.map((alt) => [alt.hrefLang, alt.href])
                ),
              },
            }
          : {}),
      };
    }
    
    export const Meta = {
      generate: generateMetadata,
    };
    
    export default Meta;
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/seo/Schema.tsx
    ```tsx
    import React from "react";
    import Script from "next/script";
    
    export interface SchemaProps {
      as: "website" | "article" | "blogPosting" | "techArticle" | "webPage" | "organization";
      title: string;
      description: string;
      baseURL: string;
      path: string;
      datePublished?: string;
      dateModified?: string;
      image?: string;
      author?: {
        name: string;
        url?: string;
        image?: string;
      };
    }
    
    const schemaTypeMap = {
      website: "WebSite",
      article: "Article",
      blogPosting: "BlogPosting",
      techArticle: "TechArticle",
      webPage: "WebPage",
      organization: "Organization",
    };
    
    export function Schema({
      as,
      title,
      description,
      baseURL,
      path,
      datePublished,
      dateModified,
      image,
      author,
    }: SchemaProps) {
      const normalizedBaseURL = baseURL.endsWith("/") ? baseURL.slice(0, -1) : baseURL;
      const normalizedPath = path.startsWith("/") ? path : `/${path}`;
    
      const imageUrl = image
        ? `${normalizedBaseURL}${image.startsWith("/") ? image : `/${image}`}`
        : `${normalizedBaseURL}/og?title=${encodeURIComponent(title)}`;
    
      const url = `${normalizedBaseURL}${normalizedPath}`;
    
      const schemaType = schemaTypeMap[as];
    
      // biome-ignore lint/suspicious/noExplicitAny: <cause why not, we love any in typescript..>
      const schema: Record<string, any> = {
        "@context": "https://schema.org",
        "@type": schemaType,
        url,
      };
    
      if (as === "website") {
        schema.name = title;
        schema.description = description;
        schema.image = imageUrl;
      } else if (as === "organization") {
        schema.name = title;
        schema.description = description;
        schema.image = imageUrl;
      } else {
        schema.headline = title;
        schema.description = description;
        schema.image = imageUrl;
    
        if (datePublished) {
          schema.datePublished = datePublished;
          schema.dateModified = dateModified || datePublished;
        }
      }
    
      if (author) {
        schema.author = {
          "@type": "Person",
          name: author.name,
          ...(author.url && { url: author.url }),
          ...(author.image && {
            image: {
              "@type": "ImageObject",
              url: author.image,
            },
          }),
        };
      }
    
      return (
        <Script
          id={`schema-${as}-${path}`}
          type="application/ld+json"
          // biome-ignore lint/security/noDangerouslySetInnerHtml: <It's not dynamic nor a security issue.>
          dangerouslySetInnerHTML={{
            __html: JSON.stringify(schema),
          }}
        />
      );
    }
    
    export default Schema;
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/modules/index.ts
    ```ts
    export { CodeBlock } from "./code/CodeBlock";
    export { MediaUpload } from "./media/MediaUpload";
    
    export { Meta } from "./seo/Meta";
    export { Schema } from "./seo/Schema";
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/background.scss
    ```scss
      /****************************/
     /*     BACKGROUND-COLOR     */
    /****************************/
    
    /* PAGE */
    .page-background {
        background-color: var(--page-background);
    }
    
    .surface-background {
        background-color: var(--surface-background);
        backdrop-filter: var(--backdrop-filter);
    }
    
    .overlay-background {
        background-color: var(--backdrop);
    }
    
    /* NEUTRAL */
    .neutral-background-weak,
    .neutral-background-medium,
    .neutral-background-strong,
    .neutral-background-alpha-weak,
    .neutral-background-alpha-medium,
    .neutral-background-alpha-strong {
        ::selection {
            background-color: var(--neutral-on-background-weak);
            color: var(--neutral-background-weak);
        }
    }
    
    .neutral-solid-weak,
    .neutral-solid-medium,
    .neutral-solid-strong {
        ::selection {
            background-color: var(--neutral-background-weak);
            color: var(--neutral-on-background-medium);
        }
    }
    
    .neutral-background-weak {
        background-color: var(--neutral-background-weak);
    }
    
    .neutral-background-medium {
        background-color: var(--neutral-background-medium);
    }
    
    .neutral-background-strong {
        background-color: var(--neutral-background-strong);
    }
    
    .neutral-solid-weak {
        background-color: var(--neutral-solid-weak);
    }
    
    .neutral-solid-medium {
        background-color: var(--neutral-solid-medium);
    }
    
    .neutral-solid-strong {
        background-color: var(--neutral-solid-strong);
    }
    
    .neutral-background-alpha-weak {
        background-color: var(--neutral-alpha-weak);
    }
    
    .neutral-background-alpha-medium {
        background-color: var(--neutral-alpha-medium);
    }
    
    .neutral-background-alpha-strong {
        background-color: var(--neutral-alpha-strong);
    }
    
    /* BRAND */
    .brand-background-weak,
    .brand-background-medium,
    .brand-background-strong,
    .brand-background-alpha-weak,
    .brand-background-alpha-medium,
    .brand-background-alpha-strong {
        ::selection {
            background-color: var(--brand-on-background-weak);
            color: var(--brand-background-weak);
        }
    }
    
    .brand-solid-weak,
    .brand-solid-medium,
    .brand-solid-strong {
        ::selection {
            background-color: var(--brand-background-weak);
            color: var(--brand-on-background-medium);
        }
    }
    
    .brand-background-weak {
        background-color: var(--brand-background-weak);
    }
    
    .brand-background-medium {
        background-color: var(--brand-background-medium);
    }
    
    .brand-background-strong {
        background-color: var(--brand-background-strong);
    }
    
    .brand-solid-weak {
        background-color: var(--brand-solid-weak);
    }
    
    .brand-solid-medium {
        background-color: var(--brand-solid-medium);
    }
    
    .brand-solid-strong {
        background-color: var(--brand-solid-strong);
    }
    
    .brand-background-alpha-weak {
        background-color: var(--brand-alpha-weak);
    }
    
    .brand-background-alpha-medium {
        background-color: var(--brand-alpha-medium);
    }
    
    .brand-background-alpha-strong {
        background-color: var(--brand-alpha-strong);
    }
    
    /* ACCENT */
    .accent-background-weak,
    .accent-background-medium,
    .accent-background-strong,
    .accent-background-alpha-weak,
    .accent-background-alpha-medium,
    .accent-background-alpha-strong {
        ::selection {
            background-color: var(--accent-on-background-weak);
            color: var(--accent-background-weak);
        }
    }
    
    .accent-solid-weak,
    .accent-solid-medium,
    .accent-solid-strong {
        ::selection {
            background-color: var(--accent-background-weak);
            color: var(--accent-on-background-medium);
        }
    }
    
    .accent-background-weak {
        background-color: var(--accent-background-weak);
    }
    
    .accent-background-medium {
        background-color: var(--accent-background-medium);
    }
    
    .accent-background-strong {
        background-color: var(--accent-background-strong);
    }
    
    .accent-solid-weak {
        background-color: var(--accent-solid-weak);
    }
    
    .accent-solid-medium {
        background-color: var(--accent-solid-medium);
    }
    
    .accent-solid-strong {
        background-color: var(--accent-solid-strong);
    }
    
    .accent-background-alpha-weak {
        background-color: var(--accent-alpha-weak);
    }
    
    .accent-background-alpha-medium {
        background-color: var(--accent-alpha-medium);
    }
    
    .accent-background-alpha-strong {
        background-color: var(--accent-alpha-strong);
    }
    
    /* INFO */
    .info-background-weak,
    .info-background-medium,
    .info-background-strong,
    .info-background-alpha-weak,
    .info-background-alpha-medium,
    .info-background-alpha-strong {
        ::selection {
            background-color: var(--info-on-background-weak);
            color: var(--info-background-weak);
        }
    }
    
    .info-solid-weak,
    .info-solid-medium,
    .info-solid-strong {
        ::selection {
            background-color: var(--info-background-weak);
            color: var(--info-on-background-medium);
        }
    }
    
    .info-background-weak {
        background-color: var(--info-background-weak);
    }
    
    .info-background-medium {
        background-color: var(--info-background-medium);
    }
    
    .info-background-strong {
        background-color: var(--info-background-strong);
    }
    
    .info-solid-weak {
        background-color: var(--info-solid-weak);
    }
    
    .info-solid-medium {
        background-color: var(--info-solid-medium);
    }
    
    .info-solid-strong {
        background-color: var(--info-solid-strong);
    }
    
    .info-background-alpha-weak {
        background-color: var(--info-alpha-weak);
    }
    
    .info-background-alpha-medium {
        background-color: var(--info-alpha-medium);
    }
    
    .info-background-alpha-strong {
        background-color: var(--info-alpha-strong);
    }
    
    /* DANGER */
    .danger-background-weak,
    .danger-background-medium,
    .danger-background-strong,
    .danger-background-alpha-weak,
    .danger-background-alpha-medium,
    .danger-background-alpha-strong {
        ::selection {
            background-color: var(--danger-on-background-weak);
            color: var(--danger-background-weak);
        }
    }
    
    .danger-solid-weak,
    .danger-solid-medium,
    .danger-solid-strong {
        ::selection {
            background-color: var(--danger-background-weak);
            color: var(--danger-on-background-medium);
        }
    }
    
    .danger-background-weak {
        background-color: var(--danger-background-weak);
    }
    
    .danger-background-medium {
        background-color: var(--danger-background-medium);
    }
    
    .danger-background-strong {
        background-color: var(--danger-background-strong);
    }
    
    .danger-solid-weak {
        background-color: var(--danger-solid-weak);
    }
    
    .danger-solid-medium {
        background-color: var(--danger-solid-medium);
    }
    
    .danger-solid-strong {
        background-color: var(--danger-solid-strong);
    }
    
    .danger-background-alpha-weak {
        background-color: var(--danger-alpha-weak);
    }
    
    .danger-background-alpha-medium {
        background-color: var(--danger-alpha-medium);
    }
    
    .danger-background-alpha-strong {
        background-color: var(--danger-alpha-strong);
    }
    
    /* WARNING */
    .warning-background-weak,
    .warning-background-medium,
    .warning-background-strong,
    .warning-background-alpha-weak,
    .warning-background-alpha-medium,
    .warning-background-alpha-strong {
        ::selection {
            background-color: var(--warning-on-background-weak);
            color: var(--warning-background-weak);
        }
    }
    
    .warning-solid-weak,
    .warning-solid-medium,
    .warning-solid-strong {
        ::selection {
            background-color: var(--warning-background-weak);
            color: var(--warning-on-background-medium);
        }
    }
    
    .warning-background-weak {
        background-color: var(--warning-background-weak);
    }
    
    .warning-background-medium {
        background-color: var(--warning-background-medium);
    }
    
    .warning-background-strong {
        background-color: var(--warning-background-strong);
    }
    
    .warning-solid-weak {
        background-color: var(--warning-solid-weak);
    }
    
    .warning-solid-medium {
        background-color: var(--warning-solid-medium);
    }
    
    .warning-solid-strong {
        background-color: var(--warning-solid-strong);
    }
    
    .warning-background-alpha-weak {
        background-color: var(--warning-alpha-weak);
    }
    
    .warning-background-alpha-medium {
        background-color: var(--warning-alpha-medium);
    }
    
    .warning-background-alpha-strong {
        background-color: var(--warning-alpha-strong);
    }
    
    /* SUCCESS */
    .success-background-weak,
    .success-background-medium,
    .success-background-strong,
    .success-background-alpha-weak,
    .success-background-alpha-medium,
    .success-background-alpha-strong {
        ::selection {
            background-color: var(--success-on-background-weak);
            color: var(--success-background-weak);
        }
    }
    
    .success-solid-weak,
    .success-solid-medium,
    .success-solid-strong {
        ::selection {
            background-color: var(--success-background-weak);
            color: var(--success-on-background-medium);
        }
    }
    
    .success-background-weak {
        background-color: var(--success-background-weak);
    }
    
    .success-background-medium {
        background-color: var(--success-background-medium);
    }
    
    .success-background-strong {
        background-color: var(--success-background-strong);
    }
    
    .success-solid-weak {
        background-color: var(--success-solid-weak);
    }
    
    .success-solid-medium {
        background-color: var(--success-solid-medium);
    }
    
    .success-solid-strong {
        background-color: var(--success-solid-strong);
    }
    
    .success-background-alpha-weak {
        background-color: var(--success-alpha-weak);
    }
    
    .success-background-alpha-medium {
        background-color: var(--success-alpha-medium);
    }
    
    .success-background-alpha-strong {
        background-color: var(--success-alpha-strong);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/border.scss
    ```scss
      /****************************/
     /*           RADIUS         */
    /****************************/
    
    .radius-none {
        border-radius: none;
    }
    
    .radius-xl {
        border-radius: var(--radius-xl);
    }
    
    .radius-xl-4 {
        border-radius: var(--radius-xl-nest-4);
    }
    
    .radius-xl-8 {
        border-radius: var(--radius-xl-nest-8);
    }
    
    .radius-l {
        border-radius: var(--radius-l);
    }
    
    .radius-l-4 {
        border-radius: var(--radius-l-nest-4);
    }
    
    .radius-l-8 {
        border-radius: var(--radius-l-nest-8);
    }
    
    .radius-m {
        border-radius: var(--radius-m);
    }
    
    .radius-m-4 {
        border-radius: var(--radius-m-nest-4);
    }
    
    .radius-m-8 {
        border-radius: var(--radius-m-nest-8);
    }
    
    .radius-s {
        border-radius: var(--radius-s);
    }
    
    .radius-s-4 {
        border-radius: var(--radius-s-nest-4);
    }
    
    .radius-s-8 {
        border-radius: var(--radius-s-nest-8);
    }
    
    .radius-xs {
        border-radius: var(--radius-xs);
    }
    
    .radius-xs-4 {
        border-radius: var(--radius-xs-nest-4);
    }
    
    .radius-xs-8 {
        border-radius: var(--radius-xs-nest-8);
    }
    
    .radius-full {
        border-radius: var(--radius-full);
    }
    
    .radius-xs-top {
        border-top-right-radius: var(--radius-xs);
        border-top-left-radius: var(--radius-xs);
    }
    
    .radius-s-top {
        border-top-right-radius: var(--radius-s);
        border-top-left-radius: var(--radius-s);
    }
    
    .radius-m-top {
        border-top-right-radius: var(--radius-m);
        border-top-left-radius: var(--radius-m);
    }
    
    .radius-l-top {
        border-top-right-radius: var(--radius-l);
        border-top-left-radius: var(--radius-l);
    }
    
    .radius-xl-top {
        border-top-right-radius: var(--radius-xl);
        border-top-left-radius: var(--radius-xl);
    }
    
    .radius-xs-right {
        border-bottom-right-radius: var(--radius-xs);
        border-top-right-radius: var(--radius-xs);
    }
    
    .radius-s-right {
        border-bottom-right-radius: var(--radius-s);
        border-top-right-radius: var(--radius-s);
    }
    
    .radius-m-right {
        border-bottom-right-radius: var(--radius-m);
        border-top-right-radius: var(--radius-m);
    }
    
    .radius-l-right {
        border-bottom-right-radius: var(--radius-l);
        border-top-right-radius: var(--radius-l);
    }
    
    .radius-xl-right {
        border-bottom-right-radius: var(--radius-xl);
        border-top-right-radius: var(--radius-xl);
    }
    
    .radius-xs-bottom {
        border-bottom-right-radius: var(--radius-xs);
        border-bottom-left-radius: var(--radius-xs);
    }
    
    .radius-s-bottom {
        border-bottom-right-radius: var(--radius-s);
        border-bottom-left-radius: var(--radius-s);
    }
    
    .radius-m-bottom {
        border-bottom-right-radius: var(--radius-m);
        border-bottom-left-radius: var(--radius-m);
    }
    
    .radius-l-bottom {
        border-bottom-right-radius: var(--radius-l);
        border-bottom-left-radius: var(--radius-l);
    }
    
    .radius-xl-bottom {
        border-bottom-right-radius: var(--radius-xl);
        border-bottom-left-radius: var(--radius-xl);
    }
    
    .radius-xs-left {
        border-bottom-left-radius: var(--radius-xs);
        border-top-left-radius: var(--radius-xs);
    }
    
    .radius-s-left {
        border-bottom-left-radius: var(--radius-s);
        border-top-left-radius: var(--radius-s);
    }
    
    .radius-m-left {
        border-bottom-left-radius: var(--radius-m);
        border-top-left-radius: var(--radius-m);
    }
    
    .radius-l-left {
        border-bottom-left-radius: var(--radius-l);
        border-top-left-radius: var(--radius-l);
    }
    
    .radius-xl-left {
        border-bottom-left-radius: var(--radius-xl);
        border-top-left-radius: var(--radius-xl);
    }
    
    .radius-xs-top-left {
        border-top-left-radius: var(--radius-xs);
    }
    
    .radius-s-top-left {
        border-top-left-radius: var(--radius-s);
    }
    
    .radius-m-top-left {
        border-top-left-radius: var(--radius-m);
    }
    
    .radius-l-top-left {
        border-top-left-radius: var(--radius-l);
    }
    
    .radius-xl-top-left {
        border-top-left-radius: var(--radius-xl);
    }
    
    .radius-xs-top-right {
        border-top-right-radius: var(--radius-xs);
    }
    
    .radius-s-top-right {
        border-top-right-radius: var(--radius-s);
    }
    
    .radius-m-top-right {
        border-top-right-radius: var(--radius-m);
    }
    
    .radius-l-top-right {
        border-top-right-radius: var(--radius-l);
    }
    
    .radius-xl-top-right {
        border-top-right-radius: var(--radius-xl);
    }
    
    .radius-xs-bottom-right {
        border-bottom-right-radius: var(--radius-xs);
    }
    
    .radius-s-bottom-right {
        border-bottom-right-radius: var(--radius-s);
    }
    
    .radius-m-bottom-right {
        border-bottom-right-radius: var(--radius-m);
    }
    
    .radius-l-bottom-right {
        border-bottom-right-radius: var(--radius-l);
    }
    
    .radius-xl-bottom-right {
        border-bottom-right-radius: var(--radius-xl);
    }
    
    .radius-xs-bottom-left {
        border-bottom-left-radius: var(--radius-xs);
    }
    
    .radius-s-bottom-left {
        border-bottom-left-radius: var(--radius-s);
    }
    
    .radius-m-bottom-left {
        border-bottom-left-radius: var(--radius-m);
    }
    
    .radius-l-bottom-left {
        border-bottom-left-radius: var(--radius-l);
    }
    
    .radius-xl-bottom-left {
        border-bottom-left-radius: var(--radius-xl);
    }
    
    
    
      /****************************/
     /*           STYLE          */
    /****************************/
    
    .border-solid {
        border-style: solid;
    }
    
    .border-dashed {
        border-style: dashed;
    }
    
    .border-1 {
        border-width: 1px;
    }
    
    .border-2 {
        border-width: 2px;
    }
    
    .border-reset {
        border-top-width: 0;
        border-right-width: 0;
        border-bottom-width: 0;
        border-left-width: 0; 
    }
    
    .border-top-1 {
        border-top-width: 1px;
    }
    
    .border-bottom-1 {
        border-bottom-width: 1px;
    }
    
    .border-left-1 {
        border-left-width: 1px;
    }
    
    .border-right-1 {
        border-right-width: 1px;
    }
    
      /****************************/
     /*           COLOR          */
    /****************************/
    
    /* PAGE */
    .surface-border {
        border-color: var(--surface-border);
    }
    
    .transparent-border {
        border-color: var(--static-transparent);
    }
    
    /* NEUTRAL */
    .neutral-border-weak {
        border-color: var(--neutral-border-weak);
    }
    
    .neutral-border-medium {
        border-color: var(--neutral-border-medium);
    }
    
    .neutral-border-strong {
        border-color: var(--neutral-border-strong);
    }
    
    .neutral-border-alpha-weak {
        border-color: var(--neutral-alpha-weak);
    }
    
    .neutral-border-alpha-medium {
        border-color: var(--neutral-alpha-medium);
    }
    
    .neutral-border-alpha-strong {
        border-color: var(--neutral-alpha-strong);
    }
    
    /* BRAND */
    .brand-border-weak {
        border-color: var(--brand-border-weak);
    }
    
    .brand-border-medium {
        border-color: var(--brand-border-medium);
    }
    
    .brand-border-strong {
        border-color: var(--brand-border-strong);
    }
    
    .brand-border-alpha-weak {
        border-color: var(--brand-alpha-weak);
    }
    
    .brand-border-alpha-medium {
        border-color: var(--brand-alpha-medium);
    }
    
    .brand-border-alpha-strong {
        border-color: var(--brand-alpha-strong);
    }
    
    /* ACCENT */
    .accent-border-weak {
        border-color: var(--accent-border-weak);
    }
    
    .accent-border-medium {
        border-color: var(--accent-border-medium);
    }
    
    .accent-border-strong {
        border-color: var(--accent-border-strong);
    }
    
    .accent-border-alpha-weak {
        border-color: var(--accent-alpha-weak);
    }
    
    .accent-border-alpha-medium {
        border-color: var(--accent-alpha-medium);
    }
    
    .accent-border-alpha-strong {
        border-color: var(--accent-alpha-strong);
    }
    
    /* INFO */
    .info-border-weak {
        border-color: var(--info-border-weak);
    }
    
    .info-border-medium {
        border-color: var(--info-border-medium);
    }
    
    .info-border-strong {
        border-color: var(--info-border-strong);
    }
    
    .info-border-alpha-weak {
        border-color: var(--info-alpha-weak);
    }
    
    .info-border-alpha-medium {
        border-color: var(--info-alpha-medium);
    }
    
    .info-border-alpha-strong {
        border-color: var(--info-alpha-strong);
    }
    
    /* DANGER */
    .danger-border-weak {
        border-color: var(--danger-border-weak);
    }
    
    .danger-border-medium {
        border-color: var(--danger-border-medium);
    }
    
    .danger-border-strong {
        border-color: var(--danger-border-strong);
    }
    
    .danger-border-alpha-weak {
        border-color: var(--danger-alpha-weak);
    }
    
    .danger-border-alpha-medium {
        border-color: var(--danger-alpha-medium);
    }
    
    .danger-border-alpha-strong {
        border-color: var(--danger-alpha-strong);
    }
    
    /* WARNING */
    .warning-border-weak {
        border-color: var(--warning-border-weak);
    }
    
    .warning-border-medium {
        border-color: var(--warning-border-medium);
    }
    
    .warning-border-strong {
        border-color: var(--warning-border-strong);
    }
    
    .warning-border-alpha-weak {
        border-color: var(--warning-alpha-weak);
    }
    
    .warning-border-alpha-medium {
        border-color: var(--warning-alpha-medium);
    }
    
    .warning-border-alpha-strong {
        border-color: var(--warning-alpha-strong);
    }
    
    /* SUCCESS */
    .success-border-weak {
        border-color: var(--success-border-weak);
    }
    
    .success-border-medium {
        border-color: var(--success-border-medium);
    }
    
    .success-border-strong {
        border-color: var(--success-border-strong);
    }
    
    .success-border-alpha-weak {
        border-color: var(--success-alpha-weak);
    }
    
    .success-border-alpha-medium {
        border-color: var(--success-alpha-medium);
    }
    
    .success-border-alpha-strong {
        border-color: var(--success-alpha-strong);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/breakpoints.scss
    ```scss
    @custom-media --s (max-width: 768px);
    @custom-media --m (max-width: 1024px);
    @custom-media --l (max-width: 1440px);
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/color.scss
    ```scss
      /****************************/
     /*          COLOR           */
    /****************************/
    
    /* NEUTRAL */
    .color-inherit {
        color: inherit;
    }
    
    /* NEUTRAL */
    .neutral-on-background-weak {
        color: var(--neutral-on-background-weak);
    }
    
    .neutral-on-background-medium {
        color: var(--neutral-on-background-medium);
    }
    
    .neutral-on-background-strong {
        color: var(--neutral-on-background-strong);
    }
    
    .neutral-on-solid-weak {
        color: var(--neutral-on-solid-weak);
    }
    
    .neutral-on-solid-medium {
        color: var(--neutral-on-solid-medium);
    }
    
    .neutral-on-solid-strong {
        color: var(--neutral-on-solid-strong);
    }
    
    /* BRAND */
    .brand-on-background-weak {
        color: var(--brand-on-background-weak);
    }
    
    .brand-on-background-medium {
        color: var(--brand-on-background-medium);
    }
    
    .brand-on-background-strong {
        color: var(--brand-on-background-strong);
    }
    
    .brand-on-solid-weak {
        color: var(--brand-on-solid-weak);
    }
    
    .brand-on-solid-medium {
        color: var(--brand-on-solid-medium);
    }
    
    .brand-on-solid-strong {
        color: var(--brand-on-solid-strong);
    }
    
    /* ACCENT */
    .accent-on-background-weak {
        color: var(--accent-on-background-weak);
    }
    
    .accent-on-background-medium {
        color: var(--accent-on-background-medium);
    }
    
    .accent-on-background-strong {
        color: var(--accent-on-background-strong);
    }
    
    .accent-on-solid-weak {
        color: var(--accent-on-solid-weak);
    }
    
    .accent-on-solid-medium {
        color: var(--accent-on-solid-medium);
    }
    
    .accent-on-solid-strong {
        color: var(--accent-on-solid-strong);
    }
    
    /* INFO */
    .info-on-background-weak {
        color: var(--info-on-background-weak);
    }
    
    .info-on-background-medium {
        color: var(--info-on-background-medium);
    }
    
    .info-on-background-strong {
        color: var(--info-on-background-strong);
    }
    
    .info-on-solid-weak {
        color: var(--info-on-solid-weak);
    }
    
    .info-on-solid-medium {
        color: var(--info-on-solid-medium);
    }
    
    .info-on-solid-strong {
        color: var(--info-on-solid-strong);
    }
    
    /* DANGER */
    .danger-on-background-weak {
        color: var(--danger-on-background-weak);
    }
    
    .danger-on-background-medium {
        color: var(--danger-on-background-medium);
    }
    
    .danger-on-background-strong {
        color: var(--danger-on-background-strong);
    }
    
    .danger-on-solid-weak {
        color: var(--danger-on-solid-weak);
    }
    
    .danger-on-solid-medium {
        color: var(--danger-on-solid-medium);
    }
    
    .danger-on-solid-strong {
        color: var(--danger-on-solid-strong);
    }
    
    /* WARNING */
    .warning-on-background-weak {
        color: var(--warning-on-background-weak);
    }
    
    .warning-on-background-medium {
        color: var(--warning-on-background-medium);
    }
    
    .warning-on-background-strong {
        color: var(--warning-on-background-strong);
    }
    
    .warning-on-solid-weak {
        color: var(--warning-on-solid-weak);
    }
    
    .warning-on-solid-medium {
        color: var(--warning-on-solid-medium);
    }
    
    .warning-on-solid-strong {
        color: var(--warning-on-solid-strong);
    }
    
    /* SUCCESS */
    .success-on-background-weak {
        color: var(--success-on-background-weak);
    }
    
    .success-on-background-medium {
        color: var(--success-on-background-medium);
    }
    
    .success-on-background-strong {
        color: var(--success-on-background-strong);
    }
    
    .success-on-solid-weak {
        color: var(--success-on-solid-weak);
    }
    
    .success-on-solid-medium {
        color: var(--success-on-solid-medium);
    }
    
    .success-on-solid-strong {
        color: var(--success-on-solid-strong);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/display.scss
    ```scss
    .overflow-auto {
      overflow: auto;
    }
    
    .overflow-x-scroll{
      overflow-x: scroll;
    }
    
    .overflow-x-auto {
      overflow-x: auto;
    }
    
    .overflow-y-auto{
      overflow-y: auto;
    }
    
    .overflow-y-scroll{
      overflow-y: scroll;
    }
    
    .overflow-hidden {
      overflow: hidden;
    }
    
    .overflow-scroll{
      overflow: scroll;
    }
    
    .overflow-x-hidden {
      overflow-x: hidden;
    }
    
    .overflow-y-hidden{
      overflow-y: hidden;
    }
    
    .opacity-0 {
      opacity: 0;
    }
    
    .opacity-10 {
      opacity: 0.1;
    }
    
    .opacity-20 {
      opacity: 0.2;
    }
    
    .opacity-30 {
      opacity: 0.3;
    }
    
    .opacity-40 {
      opacity: 0.4;
    }
    
    .opacity-50 {
      opacity: 0.5;
    }
    
    .opacity-60 {
      opacity: 0.6;
    }
    
    .opacity-70 {
      opacity: 0.7;
    }
    
    .opacity-80 {
      opacity: 0.8;
    }
    
    .opacity-90 {
      opacity: 0.9;
    }
    
    .opacity-100 {
      opacity: 1;
    }
    
    .z-index--1 {
      z-index: -1;
    }
    
    .z-index-0 {
      z-index: 0;
    }
    
    .z-index-1 {
      z-index: 1;
    }
    
    .z-index-2 {
      z-index: 2;
    }
    
    .z-index-3 {
      z-index: 3;
    }
    
    .z-index-4 {
      z-index: 4;
    }
    
    .z-index-5 {
      z-index: 5;
    }
    
    .z-index-6 {
      z-index: 6;
    }
    
    .z-index-7 {
      z-index: 7;
    }
    
    .z-index-8 {
      z-index: 8;
    }
    
    .z-index-9 {
      z-index: 9;
    }
    
    .z-index-10 {
      z-index: 10;
    }
    
    .transition-micro-short {
      transition: var(--transition-micro-short);
    }
    
    .transition-micro-medium {
      transition: var(--transition-micro-medium);
    }
    
    .transition-micro-long {
      transition: var(--transition-micro-long);
    }
    
    .transition-macro-short {
      transition: var(--transition-macro-short);
    }
    
    .transition-macro-medium {
      transition: var(--transition-macro-medium);
    }
    
    .transition-macro-long {
      transition: var(--transition-macro-long);
    }
    
    .pointer-events-none {
      pointer-events: none;
    }
    
    .pointer-events-auto {
      pointer-events: auto;
    }
    
    .pointer-events-all {
      pointer-events: all;
    }
    
    .cursor-interactive {
      cursor: var(--cursor-interactive);
    }
    
    .cursor-pointer {
      cursor: pointer;
    }
    
    .cursor-default {
      cursor: default;
    }
    
    .cursor-text {
      cursor: text;
    }
    
    .cursor-move {
      cursor: move;
    }
    
    .cursor-not-allowed {
      cursor: not-allowed;
    }
    
    .cursor-wait {
      cursor: wait;
    }
    
    .cursor-help {
      cursor: help;
    }
    
    .cursor-grab {
      cursor: grab;
    }
    
    .cursor-grabbing {
      cursor: grabbing;
    }
    
    .cursor-zoom-in {
      cursor: zoom-in;
    }
    
    .cursor-zoom-out {
      cursor: zoom-out;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/flex.scss
    ```scss
    .justify-start {
      justify-content: flex-start;
    }
      
    .justify-center {
      justify-content: center;
    }
    
    .justify-end {
      justify-content: flex-end;
    }
    
    .justify-space-between {
      justify-content: space-between;
    }
    
    .justify-space-around {
      justify-content: space-around;
    }
    
    .justify-space-evenly {
      justify-content: space-evenly;
    }
    
    .justify-stretch {
      justify-content: stretch;
    }
    
    .align-start {
      align-items: flex-start;
    }
    
    .align-center {
      align-items: center;
    }
    
    .align-end {
      align-items: flex-end;
    }
    
    .align-space-between {
      align-items: space-between;
    }
    
    .align-space-around {
      align-items: space-around;
    }
    
    .align-space-evenly {
      align-items: space-evenly;
    }
    
    .align-stretch {
      align-items: stretch;
    }
    
    .center {
      align-items: center;
      justify-content: center;
    }
    
    .flex-wrap {
      flex-wrap: wrap;
    }
    
    .flex-nowrap {
      flex-wrap: nowrap;
    }
    
    .flex-wrap-reverse {
      flex-wrap: wrap-reverse;
    }
    
    .flex-0 {
      flex: 0;
    }
    
    .flex-1 {
      flex: 1;
    }
    
    .flex-2 {
      flex: 2;
    }
    
    .flex-3 {
      flex: 3;
    }
    
    .flex-4 {
      flex: 4;
    }
    
    .flex-5 {
      flex: 5;
    }
    
    .flex-6 {
      flex: 6;
    }
    
    .flex-7 {
      flex: 7;
    }
    
    .flex-8 {
      flex: 8;
    }
    
    .flex-9 { 
      flex: 9;
    }
    
    .flex-10 {
      flex: 10;
    }
    
    .flex-11 {
      flex: 11;
    }
    
    .flex-12 {
      flex: 12;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/global.scss
    ```scss
    /* BOX-SIZING */
    * {
        box-sizing: border-box;
        scroll-behavior: smooth;
    }
    
    h1, h2, h3, h4, h5, h6 {
        scroll-margin-top: var(--static-space-80);
    }
    
    ul, ol {
        margin: 0;
        width: 100%;
    }
    
    ul {
        padding: 0 0 0 var(--static-space-12);
    
        li {
            padding-left: var(--static-space-8);
        }
    }
    
    ol {
        padding: 0 0 0 var(--static-space-16);
    
        li {
            padding-left: var(--static-space-16);
        }
    }
    
    li {
        list-style-position: inside;
        padding: 0;
        line-height: 175%;
        font-size: inherit;
        color: inherit;
        margin-bottom: var(--static-space-12);
    
        &::marker {
            color: var(--brand-on-background-weak);
        }
    }
    
    blockquote {
        display: flex;
        margin: var(--static-space-16) 0;
        border-radius: var(--radius-m);
        background: var(--brand-alpha-weak);
        overflow: hidden;
        text-wrap: balance;
        backdrop-filter: blur(var(--static-space-2));
        border: 1px dashed var(--brand-alpha-medium);
        max-width: var(--responsive-width-xs);
        padding: var(--static-space-12) var(--static-space-24) var(--static-space-8) var(--static-space-24);
        width: 100%;
    
        span {
            margin: 0 !important;
            padding: var(--static-space-16) var(--static-space-24);
            color: var(--brand-on-background-medium) !important;
            font-family: var(--font-family-code) !important;
        }
    }
    
    img {
        user-select: none;
    }
    
    /* SELECTION */
    ::selection {
        background: var(--neutral-on-background-medium);
        color: var(--neutral-background-strong);
    }
    
    /* LINK */
    a:not(.button) {
        color: var(--brand-on-background-medium);
        text-decoration: none;
        transition: var(--transition-micro-medium);
        text-decoration-thickness: 1px;
        text-underline-offset: 0.25em;
        text-decoration-color: var(--neutral-border-strong) !important;
    
        &:hover {
            text-decoration: none;
            color: var(--brand-on-background-strong);
        }
    }
    
    /* SCROLLBAR */
    ::-webkit-scrollbar {
        background: var(--static-transparent);
        width: var(--static-space-8);
        height: var(--static-space-8);
    }
    
    ::-webkit-scrollbar-track {
        background: var(--static-transparent);
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--neutral-alpha-medium);
        transition: var(--transition-micro-medium);
    
        &:hover {
            background: var(--neutral-alpha-strong);
        }
    }
    
    ::-webkit-scrollbar-corner {
        background-color: var(--static-transparent);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/grid.scss
    ```scss
    .columns-1 {
      grid-template-columns: 1fr;
    }
    
    .columns-2 {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .columns-3 {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .columns-4 {
      grid-template-columns: repeat(4, 1fr);
    }
    
    .columns-5 {
      grid-template-columns: repeat(5, 1fr);
    }
    
    .columns-6 {
      grid-template-columns: repeat(6, 1fr);
    }
    
    .columns-7 {
      grid-template-columns: repeat(7, 1fr);
    }
    
    .columns-8 {
      grid-template-columns: repeat(8, 1fr);
    }
    
    .columns-8 {
      grid-template-columns: repeat(9, 1fr);
    }
    
    .columns-8 {
      grid-template-columns: repeat(10, 1fr);
    }
    
    .columns-8 {
      grid-template-columns: repeat(11, 1fr);
    }
    
    .columns-8 {
      grid-template-columns: repeat(12, 1fr);
    }
    
    @media (--m) {
      .tablet-columns-1 {
          grid-template-columns: 1fr;
      }
    
      .tablet-columns-2 {
          grid-template-columns: repeat(2, 1fr);
      }
    
      .tablet-columns-3 {
          grid-template-columns: repeat(3, 1fr);
      }
    
      .tablet-columns-4 {
          grid-template-columns: repeat(4, 1fr);
      }
    
      .tablet-columns-5 {
          grid-template-columns: repeat(5, 1fr);
      }
    
      .tablet-columns-6 {
          grid-template-columns: repeat(6, 1fr);
      }
    
      .tablet-columns-7 {
          grid-template-columns: repeat(7, 1fr);
      }
    
      .tablet-columns-8 {
          grid-template-columns: repeat(8, 1fr);
      }
    
      .tablet-columns-8 {
          grid-template-columns: repeat(9, 1fr);
      }
    
      .tablet-columns-8 {
          grid-template-columns: repeat(10, 1fr);
      }
    
      .tablet-columns-8 {
          grid-template-columns: repeat(11, 1fr);
      }
    
      .tablet-columns-8 {
          grid-template-columns: repeat(12, 1fr);
      }
    }
    
    @media (--s) {
      .mobile-columns-1 {
          grid-template-columns: 1fr;
      }
    
      .mobile-columns-2 {
          grid-template-columns: repeat(2, 1fr);
      }
    
      .mobile-columns-3 {
          grid-template-columns: repeat(3, 1fr);
      }
    
      .mobile-columns-4 {
          grid-template-columns: repeat(4, 1fr);
      }
    
      .mobile-columns-5 {
          grid-template-columns: repeat(5, 1fr);
      }
    
      .mobile-columns-6 {
          grid-template-columns: repeat(6, 1fr);
      }
    
      .mobile-columns-7 {
          grid-template-columns: repeat(7, 1fr);
      }
    
      .mobile-columns-8 {
          grid-template-columns: repeat(8, 1fr);
      }
    
      .mobile-columns-8 {
          grid-template-columns: repeat(9, 1fr);
      }
    
      .mobile-columns-8 {
          grid-template-columns: repeat(10, 1fr);
      }
    
      .mobile-columns-8 {
          grid-template-columns: repeat(11, 1fr);
      }
    
      .mobile-columns-8 {
          grid-template-columns: repeat(12, 1fr);
      }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/index.scss
    ```scss
    @use "@/once-ui/styles/spacing.scss";
    @use "@/once-ui/styles/border.scss";
    @use "@/once-ui/styles/color.scss";
    @use "@/once-ui/styles/background.scss";
    @use "@/once-ui/styles/typography.scss";
    @use "@/once-ui/styles/global.scss";
    @use "@/once-ui/styles/layout.scss";
    @use "@/once-ui/styles/shadow.scss";
    @use "@/once-ui/styles/size.scss";
    @use "@/once-ui/styles/display.scss";
    @use "@/once-ui/styles/position.scss";
    @use "@/once-ui/styles/grid.scss";
    @use "@/once-ui/styles/flex.scss";
    @use "@/once-ui/styles/utilities.scss";
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/layout.scss
    ```scss
    .display-flex {
        display: flex;
    }
    
    .display-grid {
        display: grid;
    }
    
    .display-inline-flex {
        display: inline-flex;
    }
    
    .flex-column {
        flex-direction: column;
    }
    
    .flex-row {
        flex-direction: row;
    }
    
    .flex-column-reverse {
        flex-direction: column-reverse;
    }
    
    .flex-row-reverse {
        flex-direction: row-reverse;
    }
    
    .l-flex-show {
        display: none !important;
    }
    
    .m-flex-show {
        display: none !important;
    }
    
    .s-flex-show {
        display: none !important;
    }
    
    @media (--l) {
        .l-flex-hide {
            display: none !important;
        }
    
        .l-flex-show {
            display: flex !important;
        }
    
        .l-flex-column {
            flex-direction: column !important;
        }
    
        .l-flex-row {
            flex-direction: row !important;
        }
    
        .l-flex-column-reverse {
            flex-direction: column-reverse !important;
        }
        
        .l-flex-row-reverse {
            flex-direction: row-reverse !important;
        }
    }
    
    @media (--m) {
        .m-flex-hide {
            display: none !important;
        }
    
        .m-flex-show {
            display: flex !important;
        }
    
        .m-flex-column {
            flex-direction: column !important;
        }
    
        .m-flex-row {
            flex-direction: row !important;
        }
    
        .m-flex-column-reverse {
            flex-direction: column-reverse !important;
        }
        
        .m-flex-row-reverse {
            flex-direction: row-reverse !important;
        }
    }
    
    @media (--s) {
        .s-flex-hide {
            display: none !important;
        }
    
        .s-flex-show {
            display: flex !important;
        }
    
        .s-flex-column {
            flex-direction: column !important;
        }
    
        .s-flex-row {
            flex-direction: row !important;
        }
    
        .s-flex-column-reverse {
            flex-direction: column-reverse !important;
        }
        
        .s-flex-row-reverse {
            flex-direction: row-reverse !important;
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/position.scss
    ```scss
    .position-relative {
      position: relative;
    }
    
    .position-fixed {
      position: fixed;
    }
    
    .position-absolute {
      position: absolute;
    }
    
    .position-sticky {
      position: sticky;
    }
    
    .position-static {
      position: static;
    }
    
    .top-0 { 
      top: 0;
    }
      
    .left-0 { 
      left: 0;
    }
      
    .bottom-0 { 
      bottom: 0;
    }
    
    .right-0 { 
      right: 0;
    }
    
    .top-1 { 
      top: var(--static-space-1);
    }
    
    .left-1 { 
      left: var(--static-space-1);
    }
    
    .bottom-1 { 
      bottom: var(--static-space-1);
    }
    
    .right-1 { 
      right: var(--static-space-1);
    }
    
    .top-2 { 
      top: var(--static-space-2);
    }
    
    .left-2 { 
      left: var(--static-space-2);
    }
    
    .bottom-2 { 
      bottom: var(--static-space-2);
    }
    
    .right-2 { 
      right: var(--static-space-2);
    }
    
    .top-4 { 
      top: var(--static-space-4);
    }
    
    .left-4 { 
      left: var(--static-space-4);
    }
    
    .bottom-4 { 
      bottom: var(--static-space-4);
    }
    
    .right-4 { 
      right: var(--static-space-4);
    }
    
    .top-8 { 
      top: var(--static-space-8);
    }
    
    .left-8 { 
      left: var(--static-space-8);
    }
    
    .bottom-8 { 
      bottom: var(--static-space-8);
    }
    
    .right-8 { 
      right: var(--static-space-8);
    }
    
    .top-12 { 
      top: var(--static-space-12);
    }
    
    .left-12 { 
      left: var(--static-space-12);
    }
    
    .bottom-12 { 
      bottom: var(--static-space-12);
    }
    
    .right-12 { 
      right: var(--static-space-12);
    }
    
    .top-16 { 
      top: var(--static-space-16);
    }
    
    .left-16 { 
      left: var(--static-space-16);
    }
    
    .bottom-16 { 
      bottom: var(--static-space-16);
    }
    
    .right-16 { 
      right: var(--static-space-16);
    }
    
    .top-20 { 
      top: var(--static-space-20);
    }
    
    .left-20 { 
      left: var(--static-space-20);
    }
    
    .bottom-20 { 
      bottom: var(--static-space-20);
    }
    
    .right-20 { 
      right: var(--static-space-20);
    }
    
    .top-24 { 
      top: var(--static-space-24);
    }
    
    .left-24 { 
      left: var(--static-space-24);
    }
    
    .bottom-24 { 
      bottom: var(--static-space-24);
    }
    
    .right-24 { 
      right: var(--static-space-24);
    }
    
    .top-32 { 
      top: var(--static-space-32);
    }
    
    .left-32 { 
      left: var(--static-space-32);
    }
    
    .bottom-32 { 
      bottom: var(--static-space-32);
    }
    
    .right-32 { 
      right: var(--static-space-32);
    }
    
    .top-40 { 
      top: var(--static-space-40);
    }
    
    .left-40 { 
      left: var(--static-space-40);
    }
    
    .bottom-40 { 
      bottom: var(--static-space-40);
    }
    
    .right-40 { 
      right: var(--static-space-40);
    }
    
    .top-48 { 
      top: var(--static-space-48);
    }
    
    .left-48 { 
      left: var(--static-space-48);
    }
    
    .bottom-48 { 
      bottom: var(--static-space-48);
    }
    
    .right-48 { 
      right: var(--static-space-48);
    }
    
    .top-56 { 
      top: var(--static-space-56);
    }
    
    .left-56 { 
      left: var(--static-space-56);
    }
    
    .bottom-56 { 
      bottom: var(--static-space-56);
    }
    
    .right-56 { 
      right: var(--static-space-56);
    }
    
    .top-64 { 
      top: var(--static-space-64);
    }
    
    .left-64 { 
      left: var(--static-space-64);
    }
    
    .bottom-64 { 
      bottom: var(--static-space-64);
    }
    
    .right-64 { 
      right: var(--static-space-64);
    }
    
    .top-80 { 
      top: var(--static-space-80);
    }
    
    .left-80 { 
      left: var(--static-space-80);
    }
    
    .bottom-80 { 
      bottom: var(--static-space-80);
    }
    
    .right-80 { 
      right: var(--static-space-80);
    }
    
    .top-104 { 
      top: var(--static-space-104); 
    }
    
    .left-104 { 
      left: var(--static-space-104); 
    }
    
    .bottom-104 { 
      bottom: var(--static-space-104); 
    }
    
    .right-104 { 
      right: var(--static-space-104); 
    }
    
    .top-128 { 
      top: var(--static-space-128); 
    }
    
    .left-128 { 
      left: var(--static-space-128); 
    }
    
    .bottom-128 { 
      bottom: var(--static-space-128); 
    }
    
    .right-128 { 
      right: var(--static-space-128); 
    }
    
    .top-160 { 
      top: var(--static-space-160); 
    }
    
    .left-160 { 
      left: var(--static-space-160); 
    }
    
    .bottom-160 { 
      bottom: var(--static-space-160); 
    }
    
    .right-160 { 
      right: var(--static-space-160);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/shadow.scss
    ```scss
    .shadow-xs {
        box-shadow: var(--shadow-xs);
    }
    
    .shadow-s {
        box-shadow: var(--shadow-s);
    }
    
    .shadow-m {
        box-shadow: var(--shadow-m);
    }
    
    .shadow-l {
        box-shadow: var(--shadow-l);
    }
    
    .shadow-xl {
        box-shadow: var(--shadow-xl);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/size.scss
    ```scss
    .fill-width {
      width: 100%;
    }
    
    .fill-height {
      height: 100%;
    }
    
    .fill {
      width: 100%;
      height: 100%;
    }
    
    .fit-width {
      width: fit-content;
    }
    
    .fit-height {
      height: fit-content;
    }
    
    .fit {
      width: fit-content;
      height: fit-content;
    }
    
    .min-width-0 {
      min-width: 0;
    }
    
    .min-height-0 {
      min-height: 0;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/spacing.scss
    ```scss
      /****************************/
     /*           MARGIN         */
    /****************************/
    
    /* EVEN */
    .m-0 {
        margin: var(--static-space-0);
    }
    
    .m-1 {
        margin: var(--static-space-1);
    }
    
    .m-2 {
        margin: var(--static-space-2);
    }
    
    .m-4 {
        margin: var(--static-space-4);
    }
    
    .m-8 {
        margin: var(--static-space-8);
    }
    
    .m-12 {
        margin: var(--static-space-12);
    }
    
    .m-16 {
        margin: var(--static-space-16);
    }
    
    .m-20 {
        margin: var(--static-space-20);
    }
    
    .m-24 {
        margin: var(--static-space-24);
    }
    
    .m-32 {
        margin: var(--static-space-32);
    }
    
    .m-40 {
        margin: var(--static-space-40);
    }
    
    .m-48 {
        margin: var(--static-space-48);
    }
    
    .m-56 {
        margin: var(--static-space-56);
    }
    
    .m-64 {
        margin: var(--static-space-64);
    }
    
    .m-80 {
        margin: var(--static-space-80);
    }
    
    .m-104 {
        margin: var(--static-space-104);
    }
    
    .m-128 {
        margin: var(--static-space-128);
    }
    
    .m-160 {
        margin: var(--static-space-160);
    }
    
    .m-xs {
        margin-bottom: var(--responsive-space-xs);
    }
    
    .m-s {
        margin-bottom: var(--responsive-space-s);
    }
    
    .m-m {
        margin-bottom: var(--responsive-space-m);
    }
    
    .m-l {
        margin-bottom: var(--responsive-space-l);
    }
    
    .m-xl {
        margin-bottom: var(--responsive-space-xl);
    }
    
    /* X */
    .mx-0 {
        margin: auto var(--static-space-0);
    }
    
    .mx-1 {
        margin: auto var(--static-space-1);
    }
    
    .mx-2 {
        margin: auto var(--static-space-2);
    }
    
    .mx-4 {
        margin: auto var(--static-space-4);
    }
    
    .mx-8 {
        margin: auto var(--static-space-8);
    }
    
    .mx-12 {
        margin: auto var(--static-space-12);
    }
    
    .mx-16 {
        margin: auto var(--static-space-16);
    }
    
    .mx-20 {
        margin: auto var(--static-space-20);
    }
    
    .mx-24 {
        margin: auto var(--static-space-24);
    }
    
    .mx-32 {
        margin: auto var(--static-space-32);
    }
    
    .mx-40 {
        margin: auto var(--static-space-40);
    }
    
    .mx-64 {
        margin: auto var(--static-space-64);
    }
    
    .mx-80 {
        margin: auto var(--static-space-80);
    }
    
    .mx-104 {
        margin: auto var(--static-space-104);
    }
    
    .mx-128 {
        margin: auto var(--static-space-128);
    }
    
    .mx-160 {
        margin: auto var(--static-space-160);
    }
    
    .mx-xs {
        margin-bottom: var(--responsive-space-xs);
    }
    
    .mx-s {
        margin-bottom: var(--responsive-space-s);
    }
    
    .mx-m {
        margin-bottom: var(--responsive-space-m);
    }
    
    .mx-l {
        margin-bottom: var(--responsive-space-l);
    }
    
    .mx-xl {
        margin-bottom: var(--responsive-space-xl);
    }
    
    /* Y */
    .my-0 {
        margin: var(--static-space-0) auto;
    }
    
    .my-1 {
        margin: var(--static-space-1) auto;
    }
    
    .my-2 {
        margin: var(--static-space-2) auto;
    }
    
    .my-4 {
        margin: var(--static-space-4) auto;
    }
    
    .my-8 {
        margin: var(--static-space-8) auto;
    }
    
    .my-12 {
        margin: var(--static-space-12) auto;
    }
    
    .my-16 {
        margin: var(--static-space-16) auto;
    }
    
    .my-20 {
        margin: var(--static-space-20) auto;
    }
    
    .my-24 {
        margin: var(--static-space-24) auto;
    }
    
    .my-32 {
        margin: var(--static-space-32) auto;
    }
    
    .my-40 {
        margin: var(--static-space-40) auto;
    }
    
    .my-48 {
        margin: var(--static-space-48) auto;
    }
    
    .my-56 {
        margin: var(--static-space-56) auto;
    }
    
    .my-64 {
        margin: var(--static-space-64) auto;
    }
    
    .my-80 {
        margin: var(--static-space-80) auto;
    }
    
    .my-104 {
        margin: var(--static-space-104) auto;
    }
    
    .my-128 {
        margin: var(--static-space-128) auto;
    }
    
    .my-160 {
        margin: var(--static-space-160) auto;
    }
    
    .my-xs {
        margin-bottom: var(--responsive-space-xs);
    }
    
    .my-s {
        margin-bottom: var(--responsive-space-s);
    }
    
    .my-m {
        margin-bottom: var(--responsive-space-m);
    }
    
    .my-l {
        margin-bottom: var(--responsive-space-l);
    }
    
    .my-xl {
        margin-bottom: var(--responsive-space-xl);
    }
    
    /* TOP */
    .mt-0 {
        margin-top: var(--static-space-0);
    }
    
    .mt-1 {
        margin-top: var(--static-space-1);
    }
    
    .mt-2 {
        margin-top: var(--static-space-2);
    }
    
    .mt-4 {
        margin-top: var(--static-space-4);
    }
    
    .mt-8 {
        margin-top: var(--static-space-8);
    }
    
    .mt-12 {
        margin-top: var(--static-space-12);
    }
    
    .mt-16 {
        margin-top: var(--static-space-16);
    }
    
    .mt-20 {
        margin-top: var(--static-space-20);
    }
    
    .mt-24 {
        margin-top: var(--static-space-24);
    }
    
    .mt-32 {
        margin-top: var(--static-space-32);
    }
    
    .mt-40 {
        margin-top: var(--static-space-40);
    }
    
    .mt-48 {
        margin-top: var(--static-space-48);
    }
    
    .mt-56 {
        margin-top: var(--static-space-56);
    }
    
    .mt-64 {
        margin-top: var(--static-space-64);
    }
    
    .mt-80 {
        margin-top: var(--static-space-80);
    }
    
    .mt-104 {
        margin-top: var(--static-space-104);
    }
    
    .mt-128 {
        margin-top: var(--static-space-128);
    }
    
    .mt-160 {
        margin-top: var(--static-space-160);
    }
    
    .mt-xs {
        margin-top: var(--responsive-space-xs);
    }
    
    .mt-s {
        margin-top: var(--responsive-space-s);
    }
    
    .mt-m {
        margin-top: var(--responsive-space-m);
    }
    
    .mt-l {
        margin-top: var(--responsive-space-l);
    }
    
    .mt-xl {
        margin-top: var(--responsive-space-xl);
    }
    
    /* RIGHT */
    .mr-0 {
        margin-right: var(--static-space-0);
    }
    
    .mr-1 {
        margin-right: var(--static-space-1);
    }
    
    .mr-2 {
        margin-right: var(--static-space-2);
    }
    
    .mr-4 {
        margin-right: var(--static-space-4);
    }
    
    .mr-8 {
        margin-right: var(--static-space-8);
    }
    
    .mr-12 {
        margin-right: var(--static-space-12);
    }
    
    .mr-16 {
        margin-right: var(--static-space-16);
    }
    
    .mr-20 {
        margin-right: var(--static-space-20);
    }
    
    .mr-24 {
        margin-right: var(--static-space-24);
    }
    
    .mr-32 {
        margin-right: var(--static-space-32);
    }
    
    .mr-40 {
        margin-right: var(--static-space-40);
    }
    
    .mr-48 {
        margin-right: var(--static-space-48);
    }
    
    .mr-56 {
        margin-right: var(--static-space-56);
    }
    
    .mr-64 {
        margin-right: var(--static-space-64);
    }
    
    .mr-80 {
        margin-right: var(--static-space-80);
    }
    
    .mr-104 {
        margin-right: var(--static-space-104);
    }
    
    .mr-128 {
        margin-right: var(--static-space-128);
    }
    
    .mr-160 {
        margin-right: var(--static-space-160);
    }
    
    .mr-xs {
        margin-bottom: var(--responsive-space-xs);
    }
    
    .mr-s {
        margin-bottom: var(--responsive-space-s);
    }
    
    .mr-m {
        margin-bottom: var(--responsive-space-m);
    }
    
    .mr-l {
        margin-bottom: var(--responsive-space-l);
    }
    
    .mr-xl {
        margin-bottom: var(--responsive-space-xl);
    }
    
    /* BOTTOM */
    .mb-0 {
        margin-bottom: var(--static-space-0);
    }
    
    .mb-1 {
        margin-bottom: var(--static-space-1);
    }
    
    .mb-2 {
        margin-bottom: var(--static-space-2);
    }
    
    .mb-4 {
        margin-bottom: var(--static-space-4);
    }
    
    .mb-8 {
        margin-bottom: var(--static-space-8);
    }
    
    .mb-12 {
        margin-bottom: var(--static-space-12);
    }
    
    .mb-16 {
        margin-bottom: var(--static-space-16);
    }
    
    .mb-20 {
        margin-bottom: var(--static-space-20);
    }
    
    .mb-24 {
        margin-bottom: var(--static-space-24);
    }
    
    .mb-32 {
        margin-bottom: var(--static-space-32);
    }
    
    .mb-40 {
        margin-bottom: var(--static-space-40);
    }
    
    .mb-48 {
        margin-bottom: var(--static-space-48);
    }
    
    .mb-56 {
        margin-bottom: var(--static-space-56);
    }
    
    .mb-64 {
        margin-bottom: var(--static-space-64);
    }
    
    .mb-80 {
        margin-bottom: var(--static-space-80);
    }
    
    .mb-104 {
        margin-bottom: var(--static-space-104);
    }
    
    .mb-128 {
        margin-bottom: var(--static-space-128);
    }
    
    .mb-160 {
        margin-bottom: var(--static-space-160);
    }
    
    .mb-xs {
        margin-bottom: var(--responsive-space-xs);
    }
    
    .mb-s {
        margin-bottom: var(--responsive-space-s);
    }
    
    .mb-m {
        margin-bottom: var(--responsive-space-m);
    }
    
    .mb-l {
        margin-bottom: var(--responsive-space-l);
    }
    
    .mb-xl {
        margin-bottom: var(--responsive-space-xl);
    }
    
    /* LEFT */
    .ml-0 {
        margin-left: var(--static-space-0);
    }
    
    .ml-1 {
        margin-left: var(--static-space-1);
    }
    
    .ml-2 {
        margin-left: var(--static-space-2);
    }
    
    .ml-4 {
        margin-left: var(--static-space-4);
    }
    
    .ml-8 {
        margin-left: var(--static-space-8);
    }
    
    .ml-12 {
        margin-left: var(--static-space-12);
    }
    
    .ml-16 {
        margin-left: var(--static-space-16);
    }
    
    .ml-20 {
        margin-left: var(--static-space-20);
    }
    
    .ml-24 {
        margin-left: var(--static-space-24);
    }
    
    .ml-32 {
        margin-left: var(--static-space-32);
    }
    
    .ml-40 {
        margin-left: var(--static-space-40);
    }
    
    .ml-48 {
        margin-left: var(--static-space-48);
    }
    
    .ml-56 {
        margin-left: var(--static-space-56);
    }
    
    .ml-64 {
        margin-left: var(--static-space-64);
    }
    
    .ml-80 {
        margin-left: var(--static-space-80);
    }
    
    .ml-104 {
        margin-left: var(--static-space-104);
    }
    
    .ml-128 {
        margin-left: var(--static-space-128);
    }
    
    .ml-160 {
        margin-left: var(--static-space-160);
    }
    
    .mb-xs {
        margin-bottom: var(--responsive-space-xs);
    }
    
    .ml-s {
        margin-bottom: var(--responsive-space-s);
    }
    
    .ml-m {
        margin-bottom: var(--responsive-space-m);
    }
    
    .ml-l {
        margin-bottom: var(--responsive-space-l);
    }
    
    .ml-xl {
        margin-bottom: var(--responsive-space-xl);
    }
    
    
    
      /****************************/
     /*           PADDING        */
    /****************************/
    
    /* EVEN */
    .p-0 {
        padding: var(--static-space-0);
    }
    
    .p-1 {
        padding: var(--static-space-1);
    }
    
    .p-2 {
        padding: var(--static-space-2);
    }
    
    .p-4 {
        padding: var(--static-space-4);
    }
    
    .p-8 {
        padding: var(--static-space-8);
    }
    
    .p-12 {
        padding: var(--static-space-12);
    }
    
    .p-16 {
        padding: var(--static-space-16);
    }
    
    .p-20 {
        padding: var(--static-space-20);
    }
    
    .p-24 {
        padding: var(--static-space-24);
    }
    
    .p-32 {
        padding: var(--static-space-32);
    }
    
    .p-40 {
        padding: var(--static-space-40);
    }
    
    .p-48 {
        padding: var(--static-space-48);
    }
    
    .p-56 {
        padding: var(--static-space-56);
    }
    
    .p-64 {
        padding: var(--static-space-64);
    }
    
    .p-80 {
        padding: var(--static-space-80);
    }
    
    .p-104 {
        padding: var(--static-space-104);
    }
    
    .p-128 {
        padding: var(--static-space-128);
    }
    
    .p-160 {
        padding: var(--static-space-160);
    }
    
    .p-xs {
        padding: var(--responsive-space-xs);
    }
    
    .p-s {
        padding: var(--responsive-space-s);
    }
    
    .p-m {
        padding: var(--responsive-space-m);
    }
    
    .p-l {
        padding: var(--responsive-space-l);
    }
    
    .p-xl {
        padding: var(--responsive-space-xl);
    }
    
    /* X */
    .px-0 {
        padding-left: var(--static-space-0);
        padding-right: var(--static-space-0);
    }
    
    .px-1 {
        padding-left: var(--static-space-1);
        padding-right: var(--static-space-1);
    }
    
    .px-2 {
        padding-left: var(--static-space-2);
        padding-right: var(--static-space-2);
    }
    
    .px-4 {
        padding-left: var(--static-space-4);
        padding-right: var(--static-space-4);
    }
    
    .px-8 {
        padding-left: var(--static-space-8);
        padding-right: var(--static-space-8);
    }
    
    .px-12 {
        padding-left: var(--static-space-12);
        padding-right: var(--static-space-12);
    }
    
    .px-16 {
        padding-left: var(--static-space-16);
        padding-right: var(--static-space-16);
    }
    
    .px-20 {
        padding-left: var(--static-space-20);
        padding-right: var(--static-space-20);
    }
    
    .px-24 {
        padding-left: var(--static-space-24);
        padding-right: var(--static-space-24);
    }
    
    .px-32 {
        padding-left: var(--static-space-32);
        padding-right: var(--static-space-32);
    }
    
    .px-40 {
        padding-left: var(--static-space-40);
        padding-right: var(--static-space-40);
    }
    
    .px-48 {
        padding-left: var(--static-space-48);
        padding-right: var(--static-space-48);
    }
    
    .px-56 {
        padding-left: var(--static-space-56);
        padding-right: var(--static-space-56);
    }
    
    .px-64 {
        padding-left: var(--static-space-64);
        padding-right: var(--static-space-64);
    }
    
    .px-80 {
        padding-left: var(--static-space-80);
        padding-right: var(--static-space-80);
    }
    
    .px-104 {
        padding-left: var(--static-space-104);
        padding-right: var(--static-space-104);
    }
    
    .px-128 {
        padding-left: var(--static-space-128);
        padding-right: var(--static-space-128);
    }
    
    .px-160 {
        padding-left: var(--static-space-160);
        padding-right: var(--static-space-160);
    }
    
    .px-xs {
        padding-left: var(--responsive-space-xs);
        padding-right: var(--responsive-space-xs);
    }
    
    .px-s {
        padding-left: var(--responsive-space-s);
        padding-right: var(--responsive-space-s);
    }
    
    .px-m {
        padding-left: var(--responsive-space-m);
        padding-right: var(--responsive-space-m);
    }
    
    .px-l {
        padding-left: var(--responsive-space-l);
        padding-right: var(--responsive-space-l);
    }
    
    .px-xl {
        padding-left: var(--responsive-space-xl);
        padding-right: var(--responsive-space-xl);
    }
    
    /* Y */
    .py-0 {
        padding-top: var(--static-space-0);
        padding-bottom: var(--static-space-0);
    }
    
    .py-1 {
        padding-top: var(--static-space-1);
        padding-bottom: var(--static-space-1);
    }
    
    .py-2 {
        padding-top: var(--static-space-2);
        padding-bottom: var(--static-space-2);
    }
    
    .py-4 {
        padding-top: var(--static-space-4);
        padding-bottom: var(--static-space-4);
    }
    
    .py-8 {
        padding-top: var(--static-space-8);
        padding-bottom: var(--static-space-8);
    }
    
    .py-12 {
        padding-top: var(--static-space-12);
        padding-bottom: var(--static-space-12);
    }
    
    .py-16 {
        padding-top: var(--static-space-16);
        padding-bottom: var(--static-space-16);
    }
    
    .py-20 {
        padding-top: var(--static-space-20);
        padding-bottom: var(--static-space-20);
    }
    
    .py-24 {
        padding-top: var(--static-space-24);
        padding-bottom: var(--static-space-24);
    }
    
    .py-32 {
        padding-top: var(--static-space-32);
        padding-bottom: var(--static-space-32);
    }
    
    .py-40 {
        padding-top: var(--static-space-40);
        padding-bottom: var(--static-space-40);
    }
    
    .py-48 {
        padding-top: var(--static-space-48);
        padding-bottom: var(--static-space-48);
    }
    
    .py-56 {
        padding-top: var(--static-space-56);
        padding-bottom: var(--static-space-56);
    }
    
    .py-64 {
        padding-top: var(--static-space-64);
        padding-bottom: var(--static-space-64);
    }
    
    .py-80 {
        padding-top: var(--static-space-80);
        padding-bottom: var(--static-space-80);
    }
    
    .py-104 {
        padding-top: var(--static-space-104);
        padding-bottom: var(--static-space-104);
    }
    
    .py-128 {
        padding-top: var(--static-space-128);
        padding-bottom: var(--static-space-128);
    }
    
    .py-160 {
        padding-top: var(--static-space-160);
        padding-bottom: var(--static-space-160);
    }
    
    .py-xs {
        padding-top: var(--responsive-space-xs);
        padding-bottom: var(--responsive-space-xs);
    }
    
    .py-s {
        padding-top: var(--responsive-space-s);
        padding-bottom: var(--responsive-space-s);
    }
    
    .py-m {
        padding-top: var(--responsive-space-m);
        padding-bottom: var(--responsive-space-m);
    }
    
    .py-l {
        padding-top: var(--responsive-space-l);
        padding-bottom: var(--responsive-space-l);
    }
    
    .py-xl {
        padding-top: var(--responsive-space-xl);
        padding-bottom: var(--responsive-space-xl);
    }
    
    /* TOP */
    .pt-0 {
        padding-top: var(--static-space-0);
    }
    
    .pt-1 {
        padding-top: var(--static-space-1);
    }
    
    .pt-2 {
        padding-top: var(--static-space-2);
    }
    
    .pt-4 {
        padding-top: var(--static-space-4);
    }
    
    .pt-8 {
        padding-top: var(--static-space-8);
    }
    
    .pt-12 {
        padding-top: var(--static-space-12);
    }
    
    .pt-16 {
        padding-top: var(--static-space-16);
    }
    
    .pt-20 {
        padding-top: var(--static-space-20);
    }
    
    .pt-24 {
        padding-top: var(--static-space-24);
    }
    
    .pt-32 {
        padding-top: var(--static-space-32);
    }
    
    .pt-40 {
        padding-top: var(--static-space-40);
    }
    
    .pt-48 {
        padding-top: var(--static-space-48);
    }
    
    .pt-56 {
        padding-top: var(--static-space-56);
    }
    
    .pt-64 {
        padding-top: var(--static-space-64);
    }
    
    .pt-80 {
        padding-top: var(--static-space-80);
    }
    
    .pt-104 {
        padding-top: var(--static-space-104);
    }
    
    .pt-128 {
        padding-top: var(--static-space-128);
    }
    
    .pt-160 {
        padding-top: var(--static-space-160);
    }
    
    .pt-xs {
        padding-top: var(--responsive-space-xs);
    }
    
    .pt-s {
        padding-top: var(--responsive-space-s);
    }
    
    .pt-m {
        padding-top: var(--responsive-space-m);
    }
    
    .pt-l {
        padding-top: var(--responsive-space-l);
    }
    
    .pt-xl {
        padding-top: var(--responsive-space-xl);
    }
    
    
    /* RIGHT */
    .pr-0 {
        padding-right: var(--static-space-0);
    }
    
    .pr-1 {
        padding-right: var(--static-space-1);
    }
    
    .pr-2 {
        padding-right: var(--static-space-2);
    }
    
    .pr-4 {
        padding-right: var(--static-space-4);
    }
    
    .pr-8 {
        padding-right: var(--static-space-8);
    }
    
    .pr-12 {
        padding-right: var(--static-space-12);
    }
    
    .pr-16 {
        padding-right: var(--static-space-16);
    }
    
    .pr-20 {
        padding-right: var(--static-space-20);
    }
    
    .pr-24 {
        padding-right: var(--static-space-24);
    }
    
    .pr-32 {
        padding-right: var(--static-space-32);
    }
    
    .pr-40 {
        padding-right: var(--static-space-40);
    }
    
    .pr-48 {
        padding-right: var(--static-space-48);
    }
    
    .pr-56 {
        padding-right: var(--static-space-56);
    }
    
    .pr-64 {
        padding-right: var(--static-space-64);
    }
    
    .pr-80 {
        padding-right: var(--static-space-80);
    }
    
    .pr-104 {
        padding-right: var(--static-space-104);
    }
    
    .pr-128 {
        padding-right: var(--static-space-128);
    }
    
    .pr-160 {
        padding-right: var(--static-space-160);
    }
    
    .pr-xs {
        padding-right: var(--responsive-space-xs);
    }
    
    .pr-s {
        padding-right: var(--responsive-space-s);
    }
    
    .pr-m {
        padding-right: var(--responsive-space-m);
    }
    
    .pr-l {
        padding-right: var(--responsive-space-l);
    }
    
    .pr-xl {
        padding-right: var(--responsive-space-xl);
    }
    
    /* BOTTOM */
    .pb-0 {
        padding-bottom: var(--static-space-0);
    }
    
    .pb-1 {
        padding-bottom: var(--static-space-1);
    }
    
    .pb-2 {
        padding-bottom: var(--static-space-2);
    }
    
    .pb-4 {
        padding-bottom: var(--static-space-4);
    }
    
    .pb-8 {
        padding-bottom: var(--static-space-8);
    }
    
    .pb-12 {
        padding-bottom: var(--static-space-12);
    }
    
    .pb-16 {
        padding-bottom: var(--static-space-16);
    }
    
    .pb-20 {
        padding-bottom: var(--static-space-20);
    }
    
    .pb-24 {
        padding-bottom: var(--static-space-24);
    }
    
    .pb-32 {
        padding-bottom: var(--static-space-32);
    }
    
    .pb-40 {
        padding-bottom: var(--static-space-40);
    }
    
    .pb-48 {
        padding-bottom: var(--static-space-48);
    }
    
    .pb-56 {
        padding-bottom: var(--static-space-56);
    }
    
    .pb-64 {
        padding-bottom: var(--static-space-64);
    }
    
    .pb-80 {
        padding-bottom: var(--static-space-80);
    }
    
    .pb-104 {
        padding-bottom: var(--static-space-104);
    }
    
    .pb-128 {
        padding-bottom: var(--static-space-128);
    }
    
    .pb-160 {
        padding-bottom: var(--static-space-160);
    }
    
    .pb-xs {
        padding-bottom: var(--responsive-space-xs);
    }
    
    .pb-s {
        padding-bottom: var(--responsive-space-s);
    }
    
    .pb-m {
        padding-bottom: var(--responsive-space-m);
    }
    
    .pb-l {
        padding-bottom: var(--responsive-space-l);
    }
    
    .pb-xl {
        padding-bottom: var(--responsive-space-xl);
    }
    
    /* LEFT */
    .pl-0 {
        padding-left: var(--static-space-0);
    }
    
    .pl-1 {
        padding-left: var(--static-space-1);
    }
    
    .pl-2 {
        padding-left: var(--static-space-2);
    }
    
    .pl-4 {
        padding-left: var(--static-space-4);
    }
    
    .pl-8 {
        padding-left: var(--static-space-8);
    }
    
    .pl-12 {
        padding-left: var(--static-space-12);
    }
    
    .pl-16 {
        padding-left: var(--static-space-16);
    }
    
    .pl-20 {
        padding-left: var(--static-space-20);
    }
    
    .pl-24 {
        padding-left: var(--static-space-24);
    }
    
    .pl-32 {
        padding-left: var(--static-space-32);
    }
    
    .pl-40 {
        padding-left: var(--static-space-40);
    }
    
    .pl-48 {
        padding-left: var(--static-space-48);
    }
    
    .pl-56 {
        padding-left: var(--static-space-56);
    }
    
    .pl-64 {
        padding-left: var(--static-space-64);
    }
    
    .pl-80 {
        padding-left: var(--static-space-80);
    }
    
    .pl-104 {
        padding-left: var(--static-space-104);
    }
    
    .pl-128 {
        padding-left: var(--static-space-128);
    }
    
    .pl-160 {
        padding-left: var(--static-space-160);
    }
    
    .pl-xs {
        padding-left: var(--responsive-space-xs);
    }
    
    .pl-s {
        padding-left: var(--responsive-space-s);
    }
    
    .pl-m {
        padding-left: var(--responsive-space-m);
    }
    
    .pl-l {
        padding-left: var(--responsive-space-l);
    }
    
    .pl-xl {
        padding-left: var(--responsive-space-xl);
    }
    
    
    
    
      /****************************/
     /*            GAP           */
    /****************************/
    
    // Negative gap: collapse stacked borders
    
    .g-horizontal--1 > *:not(:first-child) {
        margin-left: -1px;
    }
      
    .g-vertical--1 > *:not(:first-child) {
        margin-top: -1px;
    }
    
    // Regular gap
    
    .g-0 {
        gap: var(--static-space-0);
    }
    
    .g-1 {
        gap: var(--static-space-1);
    }
    
    .g-2 {
        gap: var(--static-space-2);
    }
    
    .g-4 {
        gap: var(--static-space-4);
    }
    
    .g-8 {
        gap: var(--static-space-8);
    }
    
    .g-12 {
        gap: var(--static-space-12);
    }
    
    .g-16 {
        gap: var(--static-space-16);
    }
    
    .g-20 {
        gap: var(--static-space-20);
    }
    
    .g-24 {
        gap: var(--static-space-24);
    }
    
    .g-32 {
        gap: var(--static-space-32);
    }
    
    .g-40 {
        gap: var(--static-space-40);
    }
    
    .g-48 {
        gap: var(--static-space-48);
    }
    
    .g-56 {
        gap: var(--static-space-56);
    }
    
    .g-64 {
        gap: var(--static-space-64);
    }
    
    .g-80 {
        gap: var(--static-space-80);
    }
    
    .g-104 {
        gap: var(--static-space-104);
    }
    
    .g-128 {
        gap: var(--static-space-128);
    }
    
    .g-160 {
        gap: var(--static-space-160);
    }
    
    .g-xs {
        gap: var(--responsive-space-xs);
    }
    
    .g-s {
        gap: var(--responsive-space-s);
    }
    
    .g-m {
        gap: var(--responsive-space-m);
    }
    
    .g-l {
        gap: var(--responsive-space-l);
    }
    
    .g-xl {
        gap: var(--responsive-space-xl);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/typography.scss
    ```scss
    html {
        font-size:   var(--font-scaling-desktop);
        font-family: var(--font-family-body);
        font-weight: var(--font-weight-normal);
        color: var(--neutral-on-background-strong);
    }
    
    @media (--m) {
        html {
            font-size: var(--font-scaling-tablet);
        }
    }
    
    @media (--s) {
        html {
            font-size: var(--font-scaling-mobile);
        }
    }
    
    h1, h2, h3, h4, h5, h6, p {
        margin: 0;
    }
    
    .font-size-inherit {
        font-size: inherit;
    }
    
    .font-weight-inherit {
        font-weight: inherit;
    }
    
    .font-display {
        font-family: var(--font-family-heading);
    
        &.font-strong, & > .font-strong {
            font-weight: var(--font-weight-display-strong);
        }
    
        &.font-default, & > .font-default {
            font-weight: var(--font-weight-display-default);
        }
    
        &.font-xl, & > .font-xl {
            font-size:   calc(var(--font-size-display-xl) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-display-xl) * var(--line-height-heading-multiplier));
            letter-spacing: -0.05em;
        }
        
        &.font-l, & > .font-l {
            font-size:   calc(var(--font-size-display-l) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-display-l) * var(--line-height-heading-multiplier));
            letter-spacing: -0.04em;
        }
        
        &.font-m, & > .font-m {
            font-size:   calc(var(--font-size-display-m) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-display-m) * var(--line-height-heading-multiplier));
            letter-spacing: -0.03em;
        }
        
        &.font-s, & > .font-s {
            font-size:   calc(var(--font-size-display-s) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-display-s) * var(--line-height-heading-multiplier));
            letter-spacing: -0.02em;
        }
    
        &.font-xs, & > .font-xs {
            font-size:   calc(var(--font-size-display-xs) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-display-xs) * var(--line-height-heading-multiplier));
        }
    }
    
    .font-heading {
        font-family: var(--font-family-heading);
    
        &.font-strong, & > .font-strong {
            font-weight: var(--font-weight-heading-strong);
        }
    
        &.font-default, & > .font-default {
            font-weight: var(--font-weight-heading-default);
        }
    
        &.font-xl, & > .font-xl {
            font-size:   calc(var(--font-size-heading-xl) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-heading-xl) * var(--line-height-heading-multiplier));
        }
        
        &.font-l, & > .font-l {
            font-size:   calc(var(--font-size-heading-l) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-heading-l) * var(--line-height-heading-multiplier));
        }
        
        &.font-m, & > .font-m {
            font-size:   calc(var(--font-size-heading-m) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-heading-m) * var(--line-height-heading-multiplier));
        }
        
        &.font-s, & > .font-s {
            font-size:   calc(var(--font-size-heading-s) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-heading-s) * var(--line-height-heading-multiplier));
        }
        
        &.font-xs, & > .font-xs {
            font-size:   calc(var(--font-size-heading-xs) * var(--font-size-heading-multiplier));
            line-height: calc(var(--line-height-heading-xs) * var(--line-height-heading-multiplier));
        }
    }
    
    .font-body {
        font-family: var(--font-family-body);
    
        &.font-strong, & > .font-strong {
            font-weight: var(--font-weight-body-strong);
        }
    
        &.font-default, & > .font-default {
            font-weight: var(--font-weight-body-default);
        }
    
        &.font-xl, & > .font-xl {
            font-size:   calc(var(--font-size-body-xl) * var(--font-size-body-multiplier));
            line-height: calc(var(--line-height-body-xl) * var(--line-height-body-multiplier));
        }
        
        &.font-l, & > .font-l {
            font-size:   calc(var(--font-size-body-l) * var(--font-size-body-multiplier));
            line-height: calc(var(--line-height-body-l) * var(--line-height-body-multiplier));
        }
        
        &.font-m, & > .font-m {
            font-size:   calc(var(--font-size-body-m) * var(--font-size-body-multiplier));
            line-height: calc(var(--line-height-body-m) * var(--line-height-body-multiplier));
        }
        
        &.font-s, & > .font-s {
            font-size:   calc(var(--font-size-body-s) * var(--font-size-body-multiplier));
            line-height: calc(var(--line-height-body-s) * var(--line-height-body-multiplier));
        }
        
        &.font-xs, & > .font-xs {
            font-size:   calc(var(--font-size-body-xs) * var(--font-size-body-multiplier));
            line-height: calc(var(--line-height-body-xs) * var(--line-height-body-multiplier));
        }
    }
    
    .font-label {
        font-family: var(--font-family-label);
    
        &.font-strong, & > .font-strong {
            font-weight: var(--font-weight-label-strong);
        }
    
        &.font-default, & > .font-default {
            font-weight: var(--font-weight-label-default);
        }
    
        &.font-l, & > .font-l {
            font-size:   calc(var(--font-size-label-l) * var(--font-size-label-multiplier));
            line-height: calc(var(--line-height-label-l) * var(--line-height-label-multiplier));
        }
        
        &.font-m, & > .font-m {
            font-size:   calc(var(--font-size-label-m) * var(--font-size-label-multiplier));
            line-height: calc(var(--line-height-label-m) * var(--line-height-label-multiplier));
        }
        
        &.font-s, & > .font-s {
            font-size:   calc(var(--font-size-label-s) * var(--font-size-label-multiplier));
            line-height: calc(var(--line-height-label-s) * var(--line-height-label-multiplier));
        }
    }
    
    .font-code {
        font-family: var(--font-family-code);
    
        &.font-strong, & > .font-strong {
            font-weight: var(--font-weight-code-strong);
        }
    
        &.font-default, & > .font-default {
            font-weight: var(--font-weight-code-default);
        }
    
        &.font-l, & > .font-l {
            font-size:   calc(var(--font-size-label-l) * var(--font-size-label-multiplier));
            line-height: calc(var(--line-height-label-l) * var(--line-height-label-multiplier));
        }
        
        &.font-m, & > .font-m {
            font-size:   calc(var(--font-size-label-m) * var(--font-size-label-multiplier));
            line-height: calc(var(--line-height-label-m) * var(--line-height-label-multiplier));
        }
        
        &.font-s, & > .font-s {
            font-size:   calc(var(--font-size-label-s) * var(--font-size-label-multiplier));
            line-height: calc(var(--line-height-label-s) * var(--line-height-label-multiplier));
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/styles/utilities.scss
    ```scss
    .text-decoration-none {
      text-decoration: none;
    }
    
    .reset-button-styles {
      background: none;
      padding: 0;
      outline: 0;
      border: 0;
    }
    
    .focus-ring {
      &:focus-visible {
        outline: var(--static-space-2) solid var(--brand-solid-strong);
        outline-offset: 2px;
      }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/border.scss
    ```scss
    [data-border="playful"] {
        --radius-xs:        0.25rem;
        --radius-xs-nest-4: 0.375rem;
        --radius-xs-nest-8: 0.5rem;
    
        --radius-s:         0.5rem;
        --radius-s-nest-4:  0.75rem;
        --radius-s-nest-8:  1rem;
    
        --radius-m:         0.75rem;
        --radius-m-nest-4:  1rem;
        --radius-m-nest-8:  1.25rem;
        
        --radius-l:         1rem;
        --radius-l-nest-4:  1.25rem;
        --radius-l-nest-8:  1.75rem;
    
        --radius-xl:        1.25rem;
        --radius-xl-nest-4: 1.5rem;
        --radius-xl-nest-8: 1.875rem;
    
        --radius-full:       999rem;
    }
    
    [data-border="conservative"] {
        --radius-xs:        0.125rem;
        --radius-xs-nest-4: 0.25rem;
        --radius-xs-nest-8: 0.375rem;
    
        --radius-s:         0.25rem;
        --radius-s-nest-4:  0.375rem;
        --radius-s-nest-8:  0.5rem;
    
        --radius-m:         0.375rem;
        --radius-m-nest-4:  0.5rem;
        --radius-m-nest-8:  0.625rem;
        
        --radius-l:         0.625rem;
        --radius-l-nest-4:  0.875rem;
        --radius-l-nest-8:  1.125rem;
    
        --radius-xl:        0.75rem;
        --radius-xl-nest-4: 1rem;
        --radius-xl-nest-8: 1.25rem;
    
        --radius-full:       999rem;
    }
    
    [data-border="rounded"] {
        --radius-xs:        1rem;
        --radius-xs-nest-4: 1.25rem;
        --radius-xs-nest-8: 1.5rem;
    
        --radius-s:         1.25rem;
        --radius-s-nest-4:  1.5rem;
        --radius-s-nest-8:  2rem;
    
        --radius-m:         1.25rem;
        --radius-m-nest-4:  1.5rem;
        --radius-m-nest-8:  1.875rem;
        
        --radius-l:         1.75rem;
        --radius-l-nest-4:  2rem;
        --radius-l-nest-8:  2.5rem;
    
        --radius-xl:        2rem;
        --radius-xl-nest-4: 2.25rem;
        --radius-xl-nest-8: 2.75rem;
    
        --radius-full:       999rem;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/index.scss
    ```scss
    @use "@/once-ui/tokens/scheme.scss";
    @use "@/once-ui/tokens/function.scss";
    @use "@/once-ui/tokens/layout.scss";
    @use "@/once-ui/tokens/border.scss";
    @use "@/once-ui/tokens/shadow.scss";
    @use "@/once-ui/tokens/typography.scss";
    @use "@/once-ui/tokens/theme.scss";
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/layout.scss
    ```scss
    :root {
        --static-space-0:   0;
        --static-space-1:   1px;
        --static-space-2:   0.125rem;
        --static-space-4:   0.25rem;
        --static-space-8:   0.5rem;
        --static-space-12:  0.75rem;
        --static-space-16:  1rem;
        --static-space-20:  1.25rem;
        --static-space-24:  1.5rem;
        --static-space-32:  2rem;
        --static-space-40:  2.5rem;
        --static-space-48:  3rem;
        --static-space-56:  3.5rem;
        --static-space-64:  4rem;
        --static-space-80:  5rem;
        --static-space-104: 6.5rem;
        --static-space-128: 8rem;
        --static-space-160: 10rem;
    
        --static-width-2400: 150rem;
        --static-width-1600: 100rem;
        --static-width-1440: 90rem;
        --static-width-1200: 75rem;
        --static-width-1024: 64rem;
        --static-width-880:  55rem;
        --static-width-768:  48rem;
        --static-width-640:  40rem;
        --static-width-560:  35rem;
        --static-width-400:  25rem;
        --static-width-320:  20rem;
    
        --static-height-560: 35rem;
        --static-height-480: 30rem;
        --static-height-400: 25rem;
        --static-height-360: 22.5rem;
        --static-height-320: 20rem;
        --static-height-280: 17.5rem;
        --static-height-240: 15rem;
        --static-height-220: 13.75rem;
        --static-height-160: 10rem;
    
        --responsive-width-xl: var(--static-width-1440);
        --responsive-width-l:  var(--static-width-1200);
        --responsive-width-m:  var(--static-width-1024);
        --responsive-width-s:  var(--static-width-768);
        --responsive-width-xs: var(--static-width-640);
    
        --responsive-height-xl: var(--static-height-560);
        --responsive-height-l:  var(--static-height-480);
        --responsive-height-m:  var(--static-height-400);
        --responsive-height-s:  var(--static-height-360);
        --responsive-height-xs: var(--static-height-280);
    
        --responsive-space-xl: var(--static-space-80);
        --responsive-space-l:  var(--static-space-40);
        --responsive-space-m:  var(--static-space-24);
        --responsive-space-s:  var(--static-space-16);
        --responsive-space-xs: var(--static-space-12);
    }
    
    @media (--m) {
        :root {
            --responsive-width-xl: var(--static-width-1024);
            --responsive-width-l:  var(--static-width-1024);
            --responsive-width-m:  var(--static-width-880);
            --responsive-width-s:  var(--static-width-768);
            --responsive-width-xs: var(--static-width-640);
    
            --responsive-height-xl: var(--static-height-480);
            --responsive-height-l:  var(--static-height-400);
            --responsive-height-m:  var(--static-height-360);
            --responsive-height-s:  var(--static-height-280);
            --responsive-height-xs: var(--static-height-240);
    
            --responsive-space-xl: var(--static-space-64);
            --responsive-space-l:  var(--static-space-24);
            --responsive-space-m:  var(--static-space-16);
            --responsive-space-s:  var(--static-space-12);
            --responsive-space-xs: var(--static-space-8);
        }
    }
    
    @media (--s) {
        :root {
            --responsive-width-xl: var(--static-width-1024);
            --responsive-width-l:  var(--static-width-1024);
            --responsive-width-m:  var(--static-width-880);
            --responsive-width-s:  var(--static-width-768);
            --responsive-width-xs: var(--static-width-640);
    
            --responsive-height-xl: var(--static-height-320);
            --responsive-height-l:  var(--static-height-280);
            --responsive-height-m:  var(--static-height-240);
            --responsive-height-s:  var(--static-height-220);
            --responsive-height-xs: var(--static-height-160);
    
            --responsive-space-xl: var(--static-space-40);
            --responsive-space-l:  var(--static-space-16);
            --responsive-space-m:  var(--static-space-12);
            --responsive-space-s:  var(--static-space-8);
            --responsive-space-xs: var(--static-space-4);
        }
    }
    
    [data-scaling="110"] {
        --static-space-1:   calc(0.0625rem * 1.1);
        --static-space-2:   calc(0.125rem * 1.1);
        --static-space-4:   calc(0.25rem * 1.1);
        --static-space-8:   calc(0.5rem * 1.1);
        --static-space-12:  calc(0.75rem * 1.1);
        --static-space-16:  calc(1rem * 1.1);
        --static-space-20:  calc(1.25rem * 1.1);
        --static-space-24:  calc(1.5rem * 1.1);
        --static-space-32:  calc(2rem * 1.1);
        --static-space-40:  calc(2.5rem * 1.1);
        --static-space-48:  calc(3rem * 1.1);
        --static-space-56:  calc(3.5rem * 1.1);
        --static-space-64:  calc(4rem * 1.1);
        --static-space-80:  calc(5rem * 1.1);
        --static-space-104: calc(6.5rem * 1.1);
        --static-space-128: calc(8rem * 1.1);
        --static-space-160: calc(10rem * 1.1);
    
        --static-width-2400: calc(150rem * 1.1);
        --static-width-1600: calc(100rem * 1.1);
        --static-width-1440: calc(90rem * 1.1);
        --static-width-1200: calc(75rem * 1.1);
        --static-width-1024: calc(64rem * 1.1);
        --static-width-880:  calc(55rem * 1.1);
        --static-width-768:  calc(48rem * 1.1);
        --static-width-560:  calc(35rem * 1.1);
        --static-width-400:  calc(25rem * 1.1);
        --static-width-320:  calc(20rem * 1.1);
    
        --static-height-560: calc(35rem * 1.1);
        --static-height-480: calc(30rem * 1.1);
        --static-height-400: calc(25rem * 1.1);
        --static-height-360: calc(22.5rem * 1.1);
        --static-height-320: calc(20rem * 1.1);
        --static-height-280: calc(17.5rem * 1.1);
        --static-height-240: calc(15rem * 1.1);
        --static-height-220: calc(13.75rem * 1.1);
        --static-height-160: calc(10rem * 1.1);
    }
    
    [data-scaling="105"] {
        --static-space-1:   calc(0.0625rem * 1.05);
        --static-space-2:   calc(0.125rem * 1.05);
        --static-space-4:   calc(0.25rem * 1.05);
        --static-space-8:   calc(0.5rem * 1.05);
        --static-space-12:  calc(0.75rem * 1.05);
        --static-space-16:  calc(1rem * 1.05);
        --static-space-20:  calc(1.25rem * 1.05);
        --static-space-24:  calc(1.5rem * 1.05);
        --static-space-32:  calc(2rem * 1.05);
        --static-space-40:  calc(2.5rem * 1.05);
        --static-space-48:  calc(3rem * 1.05);
        --static-space-56:  calc(3.5rem * 1.05);
        --static-space-64:  calc(4rem * 1.05);
        --static-space-80:  calc(5rem * 1.05);
        --static-space-104: calc(6.5rem * 1.05);
        --static-space-128: calc(8rem * 1.05);
        --static-space-160: calc(10rem * 1.05);
    
        --static-width-2400: calc(150rem * 1.05);
        --static-width-1600: calc(100rem * 1.05);
        --static-width-1440: calc(90rem * 1.05);
        --static-width-1200: calc(75rem * 1.05);
        --static-width-1024: calc(64rem * 1.05);
        --static-width-880:  calc(55rem * 1.05);
        --static-width-768:  calc(48rem * 1.05);
        --static-width-560:  calc(35rem * 1.05);
        --static-width-400:  calc(25rem * 1.05);
        --static-width-320:  calc(20rem * 1.05);
    
        --static-height-560: calc(35rem * 1.05);
        --static-height-480: calc(30rem * 1.05);
        --static-height-400: calc(25rem * 1.05);
        --static-height-360: calc(22.5rem * 1.05);
        --static-height-320: calc(20rem * 1.05);
        --static-height-280: calc(17.5rem * 1.05);
        --static-height-240: calc(15rem * 1.05);
        --static-height-220: calc(13.75rem * 1.05);
        --static-height-160: calc(10rem * 1.05);
    }
    
    [data-scaling="95"] {
        --static-space-1:   calc(0.0625rem * 0.95);
        --static-space-2:   calc(0.125rem * 0.95);
        --static-space-4:   calc(0.25rem * 0.95);
        --static-space-8:   calc(0.5rem * 0.95);
        --static-space-12:  calc(0.75rem * 0.95);
        --static-space-16:  calc(1rem * 0.95);
        --static-space-20:  calc(1.25rem * 0.95);
        --static-space-24:  calc(1.5rem * 0.95);
        --static-space-32:  calc(2rem * 0.95);
        --static-space-40:  calc(2.5rem * 0.95);
        --static-space-48:  calc(3rem * 0.95);
        --static-space-56:  calc(3.5rem * 0.95);
        --static-space-64:  calc(4rem * 0.95);
        --static-space-80:  calc(5rem * 0.95);
        --static-space-104: calc(6.5rem * 0.95);
        --static-space-128: calc(8rem * 0.95);
        --static-space-160: calc(10rem * 0.95);
    
        --static-width-2400: calc(150rem * 0.95);
        --static-width-1600: calc(100rem * 0.95);
        --static-width-1440: calc(90rem * 0.95);
        --static-width-1200: calc(75rem * 0.95);
        --static-width-1024: calc(64rem * 0.95);
        --static-width-880:  calc(55rem * 0.95);
        --static-width-768:  calc(48rem * 0.95);
        --static-width-560:  calc(35rem * 0.95);
        --static-width-400:  calc(25rem * 0.95);
        --static-width-320:  calc(20rem * 0.95);
    
        --static-height-560: calc(35rem * 0.95);
        --static-height-480: calc(30rem * 0.95);
        --static-height-400: calc(25rem * 0.95);
        --static-height-360: calc(22.5rem * 0.95);
        --static-height-320: calc(20rem * 0.95);
        --static-height-280: calc(17.5rem * 0.95);
        --static-height-240: calc(15rem * 0.95);
        --static-height-220: calc(13.75rem * 0.95);
        --static-height-160: calc(10rem * 0.95);
    }
    
    [data-scaling="90"] {
        --static-space-1:   calc(0.0625rem * 0.9);
        --static-space-2:   calc(0.125rem * 0.9);
        --static-space-4:   calc(0.25rem * 0.9);
        --static-space-8:   calc(0.5rem * 0.9);
        --static-space-12:  calc(0.75rem * 0.9);
        --static-space-16:  calc(1rem * 0.9);
        --static-space-20:  calc(1.25rem * 0.9);
        --static-space-24:  calc(1.5rem * 0.9);
        --static-space-32:  calc(2rem * 0.9);
        --static-space-40:  calc(2.5rem * 0.9);
        --static-space-48:  calc(3rem * 0.9);
        --static-space-56:  calc(3.5rem * 0.9);
        --static-space-64:  calc(4rem * 0.9);
        --static-space-80:  calc(5rem * 0.9);
        --static-space-104: calc(6.5rem * 0.9);
        --static-space-128: calc(8rem * 0.9);
        --static-space-160: calc(10rem * 0.9);
    
        --static-width-2400: calc(150rem * 0.9);
        --static-width-1600: calc(100rem * 0.9);
        --static-width-1440: calc(90rem * 0.9);
        --static-width-1200: calc(75rem * 0.9);
        --static-width-1024: calc(64rem * 0.9);
        --static-width-880:  calc(55rem * 0.9);
        --static-width-768:  calc(48rem * 0.9);
        --static-width-560:  calc(35rem * 0.9);
        --static-width-400:  calc(25rem * 0.9);
        --static-width-320:  calc(20rem * 0.9);
    
        --static-height-560: calc(35rem * 0.9);
        --static-height-480: calc(30rem * 0.9);
        --static-height-400: calc(25rem * 0.9);
        --static-height-360: calc(22.5rem * 0.9);
        --static-height-320: calc(20rem * 0.9);
        --static-height-280: calc(17.5rem * 0.9);
        --static-height-240: calc(15rem * 0.9);
        --static-height-220: calc(13.75rem * 0.9);
        --static-height-160: calc(10rem * 0.9);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/scheme.scss
    ```scss
    :root {
        /* STATIC */
        --static-transparent: #00000000;
    
        --static-white:        #ffffff;
        --static-white-medium: #ffffff4D;
        --static-black:        #000000;
        --static-black-medium: #0000004D;
    
        /* CUSTOM */
        /* 
            Insert code for your custom color palette
            generated at https://once-ui.com/customize
        */
    
        /* BASE */
        /* sand */
        --scheme-sand-100:  #0D0A00;
        --scheme-sand-200:  #1B1608;
        --scheme-sand-300:  #443F30;
        --scheme-sand-400:  #5E594C;
        --scheme-sand-500:  #797465;
        --scheme-sand-600:  #999486;
        --scheme-sand-700:  #B7B2A4;
        --scheme-sand-800:  #D7D2C4;
        --scheme-sand-900:  #E5E0D2;
        --scheme-sand-1000: #F2EDDF;
        --scheme-sand-1100: #F8F3E5;
        --scheme-sand-1200: #FDF9EE;
    
        --scheme-sand-600-10: #9994861A;
        --scheme-sand-600-30: #9994864D;
        --scheme-sand-600-50: #99948680;
        
        /* gray */
        --scheme-gray-100:  #0A0A0A;
        --scheme-gray-200:  #151515;
        --scheme-gray-300:  #3F3F3F;
        --scheme-gray-400:  #595959;
        --scheme-gray-500:  #757575;
        --scheme-gray-600:  #959595;
        --scheme-gray-700:  #B2B2B2;
        --scheme-gray-800:  #D2D2D2;
        --scheme-gray-900:  #E0E0E0;
        --scheme-gray-1000: #EDEDED;
        --scheme-gray-1100: #F3F3F3;
        --scheme-gray-1200: #F9F9F9;
    
        --scheme-gray-600-10: #9595951A;
        --scheme-gray-600-30: #9595954D;
        --scheme-gray-600-50: #95959580;
        
        /* slate */
        --scheme-slate-100:  #040816;
        --scheme-slate-200:  #0F152B;
        --scheme-slate-300:  #393F55;
        --scheme-slate-400:  #52586F;
        --scheme-slate-500:  #6D748A;
        --scheme-slate-600:  #8E94AA;
        --scheme-slate-700:  #ACB2C8;
        --scheme-slate-800:  #CCD2E8;
        --scheme-slate-900:  #DAE0F6;
        --scheme-slate-1000: #E9EDFE;
        --scheme-slate-1100: #F1F3FD;
        --scheme-slate-1200: #F8F9FD;
    
        --scheme-slate-600-10: #8E94AA1A;
        --scheme-slate-600-30: #8E94AA4D;
        --scheme-slate-600-50: #8E94AA80;
    
        /* red */
        --scheme-red-100:  #130507;
        --scheme-red-200:  #2A0A10;
        --scheme-red-300:  #830711;
        --scheme-red-400:  #B6020C;
        --scheme-red-500:  #E90507;
        --scheme-red-600:  #FF5F53;
        --scheme-red-700:  #FF9689;
        --scheme-red-800:  #FDC6BD;
        --scheme-red-900:  #FDD8D2;
        --scheme-red-1000: #FDEAE6;
        --scheme-red-1100: #FCF1EF;
        --scheme-red-1200: #FDF9F8;
    
        --scheme-red-600-10: #FF5F531A;
        --scheme-red-600-30: #FF5F534D;
        --scheme-red-600-50: #FF5F5380;
        
        /* orange */
        --scheme-orange-100:  #120605;
        --scheme-orange-200:  #270D0A;
        --scheme-orange-300:  #7C1A06;
        --scheme-orange-400:  #AC2401;
        --scheme-orange-500:  #DB3400;
        --scheme-orange-600:  #FD6325;
        --scheme-orange-700:  #FF9964;
        --scheme-orange-800:  #FEC8A4;
        --scheme-orange-900:  #FDDAC2;
        --scheme-orange-1000: #FDEADD;
        --scheme-orange-1100: #FCF2E9;
        --scheme-orange-1200: #FCF9F5;
    
        --scheme-orange-600-10: #FD63251A;
        --scheme-orange-600-30: #FD63254D;
        --scheme-orange-600-50: #FD632580;
        
        /* yellow */
        --scheme-yellow-100:  #100704;
        --scheme-yellow-200:  #231009;
        --scheme-yellow-300:  #6B2D09;
        --scheme-yellow-400:  #924205;
        --scheme-yellow-500:  #B85B02;
        --scheme-yellow-600:  #E07B00;
        --scheme-yellow-700:  #FE9C0B;
        --scheme-yellow-800:  #FECC55;
        --scheme-yellow-900:  #FEDE79;
        --scheme-yellow-1000: #FCEEA7;
        --scheme-yellow-1100: #FBF5CB;
        --scheme-yellow-1200: #FBFAEB;
    
        --scheme-yellow-600-10: #E07B001A;
        --scheme-yellow-600-30: #E07B004D;
        --scheme-yellow-600-50: #E07B0080;
    
        /* moss */
        --scheme-moss-100:  #080B04;
        --scheme-moss-200:  #111707;
        --scheme-moss-300:  #2F460C;
        --scheme-moss-400:  #3C630A;
        --scheme-moss-500:  #478309;
        --scheme-moss-600:  #4FA900;
        --scheme-moss-700:  #54CC01;
        --scheme-moss-800:  #76ED53;
        --scheme-moss-900:  #98F789;
        --scheme-moss-1000: #C0FDBB;
        --scheme-moss-1100: #DAFDD7;
        --scheme-moss-1200: #F0FDEF;
    
        --scheme-moss-600-10: #4FA9001A;
        --scheme-moss-600-30: #4FA9004D;
        --scheme-moss-600-50: #4FA90080;
    
        /* green */
        --scheme-green-100:  #040B07;
        --scheme-green-200:  #081810;
        --scheme-green-300:  #0D4929;
        --scheme-green-400:  #0C6731;
        --scheme-green-500:  #0A8637;
        --scheme-green-600:  #08AC3A;
        --scheme-green-700:  #01CF38;
        --scheme-green-800:  #5FEF61;
        --scheme-green-900:  #91F88C;
        --scheme-green-1000: #C0FDBB;
        --scheme-green-1100: #DAFDD7;
        --scheme-green-1200: #F0FDEF;
    
        --scheme-green-600-10: #08AC3A1A;
        --scheme-green-600-30: #08AC3A4D;
        --scheme-green-600-50: #08AC3A80;
    
        /* emerald */
        --scheme-emerald-100:  #040B0A;
        --scheme-emerald-200:  #081816;
        --scheme-emerald-300:  #0D483C;
        --scheme-emerald-400:  #0C6551;
        --scheme-emerald-500:  #0A8466;
        --scheme-emerald-600:  #08A97C;
        --scheme-emerald-700:  #01CB90;
        --scheme-emerald-800:  #56ECAD;
        --scheme-emerald-900:  #84F6C3;
        --scheme-emerald-1000: #B4FDDA;
        --scheme-emerald-1100: #D7FCEA;
        --scheme-emerald-1200: #EEFDF5;
    
        --scheme-emerald-600-10: #08A97C1A;
        --scheme-emerald-600-30: #08A97C4D;
        --scheme-emerald-600-50: #08A97C80;
    
        /* aqua */
        --scheme-aqua-100:  #050B0D;
        --scheme-aqua-200:  #081719;
        --scheme-aqua-300:  #0C464B;
        --scheme-aqua-400:  #0C6367;
        --scheme-aqua-500:  #0B8184;
        --scheme-aqua-600:  #08A6A5;
        --scheme-aqua-700:  #01C7C3;
        --scheme-aqua-800:  #4DE9DC;
        --scheme-aqua-900:  #78F6E4;
        --scheme-aqua-1000: #B0FCEE;
        --scheme-aqua-1100: #D3FCF3;
        --scheme-aqua-1200: #ECFDF9;
    
        --scheme-aqua-600-10: #08A6A51A;
        --scheme-aqua-600-30: #08A6A54D;
        --scheme-aqua-600-50: #08A6A580;
    
        /* cyan */
        --scheme-cyan-100:  #050911;
        --scheme-cyan-200:  #0A1525;
        --scheme-cyan-300:  #094074;
        --scheme-cyan-400:  #045B9C;
        --scheme-cyan-500:  #0279BE;
        --scheme-cyan-600:  #049EE2;
        --scheme-cyan-700:  #17C0FD;
        --scheme-cyan-800:  #60E4FC;
        --scheme-cyan-900:  #82F1FC;
        --scheme-cyan-1000: #B3FAFC;
        --scheme-cyan-1100: #D4FBFC;
        --scheme-cyan-1200: #EFFCFD;
    
        --scheme-cyan-600-10: #049EE21A;
        --scheme-cyan-600-30: #049EE24D;
        --scheme-cyan-600-50: #049EE280;
    
        /* blue */
        --scheme-blue-100:  #0A071B;
        --scheme-blue-200:  #0D0B44;
        --scheme-blue-300:  #0019CB;
        --scheme-blue-400:  #033CF8;
        --scheme-blue-500:  #2D69FA;
        --scheme-blue-600:  #5A93FC;
        --scheme-blue-700:  #84B5FD;
        --scheme-blue-800:  #B4D6FB;
        --scheme-blue-900:  #CBE3FB;
        --scheme-blue-1000: #E0EFFC;
        --scheme-blue-1100: #EBF5FC;
        --scheme-blue-1200: #F6FAFD;
    
        --scheme-blue-600-10: #5A93FC1A;
        --scheme-blue-600-30: #5A93FC4D;
        --scheme-blue-600-50: #5A93FC80;
    
        /* indigo */
        --scheme-indigo-100:  #0E0718;
        --scheme-indigo-200:  #1C0B35;
        --scheme-indigo-300:  #3D01C5;
        --scheme-indigo-400:  #5625F7;
        --scheme-indigo-500:  #7358FA;
        --scheme-indigo-600:  #9585FA;
        --scheme-indigo-700:  #B3A9FD;
        --scheme-indigo-800:  #D2CEFB;
        --scheme-indigo-900:  #E0DEFA;
        --scheme-indigo-1000: #EDEDFB;
        --scheme-indigo-1100: #F3F2FC;
        --scheme-indigo-1200: #F9F9FD;
    
        --scheme-indigo-600-10:  #9585FA1A;
        --scheme-indigo-600-30:  #9585FA4D;
        --scheme-indigo-600-50:  #9585FA80;
    
        /* violet */
        --scheme-violet-100:  #0E0512;
        --scheme-violet-200:  #210B2B;
        --scheme-violet-300:  #60099B;
        --scheme-violet-400:  #7D04E4;
        --scheme-violet-500:  #9745F7;
        --scheme-violet-600:  #B07AFA;
        --scheme-violet-700:  #C7A2FD;
        --scheme-violet-800:  #DDCBFB;
        --scheme-violet-900:  #E6DCFB;
        --scheme-violet-1000: #F0EBFC;
        --scheme-violet-1100: #F5F3FC;
        --scheme-violet-1200: #FAF8FD;
    
        --scheme-violet-600-10:  #B07AFA1A;
        --scheme-violet-600-30:  #B07AFA4D;
        --scheme-violet-600-50:  #B07AFA80;
    
        /* magenta */
        --scheme-magenta-100:  #100511;
        --scheme-magenta-200:  #250A26;
        --scheme-magenta-300:  #70077B;
        --scheme-magenta-400:  #9902B3;
        --scheme-magenta-500:  #BD1DE8;
        --scheme-magenta-600:  #D166FA;
        --scheme-magenta-700:  #DC98FD;
        --scheme-magenta-800:  #E8C7FB;
        --scheme-magenta-900:  #EFD9FB;
        --scheme-magenta-1000: #F5E9FC;
        --scheme-magenta-1100: #F8F1FC;
        --scheme-magenta-1200: #FBF8FD;
    
        --scheme-magenta-600-10:  #D166FA1A;
        --scheme-magenta-600-30:  #D166FA4D;
        --scheme-magenta-600-50:  #D166FA80;
    
        /* pink */
        --scheme-pink-100:  #12050B;
        --scheme-pink-200:  #280A1A;
        --scheme-pink-300:  #7D074A;
        --scheme-pink-400:  #AE0169;
        --scheme-pink-500:  #DE028E;
        --scheme-pink-600:  #F854BE;
        --scheme-pink-700:  #FD8BE4;
        --scheme-pink-800:  #FCC0F1;
        --scheme-pink-900:  #FCD5F5;
        --scheme-pink-1000: #FCE7F9;
        --scheme-pink-1100: #FCF0FA;
        --scheme-pink-1200: #FDF8FC;
    
        --scheme-pink-600-10:  #F854BE1A;
        --scheme-pink-600-30:  #F854BE4D;
        --scheme-pink-600-50:  #F854BE80;
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/shadow.scss
    ```scss
    :root {
        --shadow-xs: 0px 0px 1px rgba(0, 0, 0, 0.12), 0px 1px 2px  rgba(0, 0, 0, 0.08),  0px 2px 4px   rgba(0, 0, 0, 0.08);
        --shadow-s:  0px 0px 2px rgba(0, 0, 0, 0.12), 0px 1px 4px  rgba(0, 0, 0, 0.08),  0px 4px 8px   rgba(0, 0, 0, 0.08);
        --shadow-m:  0px 0px 2px rgba(0, 0, 0, 0.12), 0px 2px 4px  rgba(0, 0, 0, 0.08),  0px 8px 8px   rgba(0, 0, 0, 0.08);
        --shadow-l:  0px 2px 4px rgba(0, 0, 0, 0.12), 0px 8px 12px rgba(0, 0, 0, 0.08),  0px 8px 16px  rgba(0, 0, 0, 0.08);
        --shadow-xl: 0px 4px 4px rgba(0, 0, 0, 0.12), 0px 8px 12px rgba(0, 0, 0, 0.08),  0px 24px 24px rgba(0, 0, 0, 0.08);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/theme.scss
    ```scss
    :root {
        /* FONT FAMILY */
        --font-family-body:     var(--font-primary);
        --font-family-heading:  var(--font-secondary);
        --font-family-label:    var(--font-tertiary);
        --font-family-code:     var(--font-code);
    
        --font-size-heading-multiplier:   1;
        --font-size-body-multiplier:      1;
        --font-size-label-multiplier:     1;
    
        --line-height-heading-multiplier: 1;
        --line-height-body-multiplier:    1;
        --line-height-label-multiplier:   1;
    
        /* FONT SCALING */
        --font-scaling-desktop: 16px;
        --font-scaling-tablet:  15px;
        --font-scaling-mobile:  14px;
    
        --cursor-interactive:    pointer;
    
        --solid-inset-distance:  0;
        --solid-inset-size:      0;
        --solid-border-width:    0;
        --backdrop-filter:       none;
        --surface-border:        var(--static-transparent);
        --surface-background:    var(--neutral-background-medium);
    }
    
    [data-theme="dark"] {
        .dark-flex {
            display: flex;
        }
    
        .dark-grid {
            display: grid;
        }
    
        .light-flex {
            display: none;
        }
    
        .light-grid {
            display: none;
        }
    
        --icon: url('/trademark/icon-dark.svg');
        --type: url('/trademark/type-dark.svg');
        
        --page-background:              var(--neutral-background-weak);
        --backdrop:                     var(--static-black-medium);
    
        --solid-border-color-brand:     var(--brand-alpha-strong);
        --solid-border-color-neutral:   var(--neutral-alpha-strong);
        --solid-border-color-danger:    var(--danger-alpha-strong);
    
        /* code */
        --code-moss:                    var(--scheme-moss-800);
        --code-gray:                    var(--scheme-gray-800);
        --code-aqua:                    var(--scheme-aqua-800);
        --code-green:                   var(--scheme-green-800);
        --code-blue:                    var(--scheme-blue-800);
        --code-violet:                  var(--scheme-violet-800);
        --code-orange:                  var(--scheme-orange-800);
    
        /* brand */
        --brand-background-strong:      var(--function-brand-300);
        --brand-background-medium:      var(--function-brand-200);
        --brand-background-weak:        var(--function-brand-100);
    
        --brand-on-background-strong:   var(--static-white);
        --brand-on-background-medium:   var(--function-brand-900);
        --brand-on-background-weak:     var(--function-brand-700);
    
        --brand-border-strong:          var(--function-brand-400);
        --brand-border-medium:          var(--function-brand-300);
        --brand-border-weak:            var(--function-brand-200);
      
        --brand-alpha-strong:           var(--function-brand-600-50);
        --brand-alpha-medium:           var(--function-brand-600-30);
        --brand-alpha-weak:             var(--function-brand-600-10);
    
        /* accent */
        --accent-background-strong:     var(--function-accent-300);
        --accent-background-medium:     var(--function-accent-200);
        --accent-background-weak:       var(--function-accent-100);
    
        --accent-on-background-strong:  var(--static-white);
        --accent-on-background-medium:  var(--function-accent-900);
        --accent-on-background-weak:    var(--function-accent-700);
      
        --accent-solid-strong:          var(--function-accent-500);
        --accent-solid-medium:          var(--function-accent-400);
        --accent-solid-weak:            var(--function-accent-300);
      
        --accent-on-solid-strong:       var(--static-white);      
        --accent-on-solid-weak:         var(--function-accent-900);
    
        --accent-border-strong:         var(--function-accent-400);
        --accent-border-medium:         var(--function-accent-300);
        --accent-border-weak:           var(--function-accent-200);
      
        --accent-alpha-strong:          var(--function-accent-600-50);
        --accent-alpha-medium:          var(--function-accent-600-30);
        --accent-alpha-weak:            var(--function-accent-600-10);
    
        /* neutral */
        --neutral-background-strong:    var(--function-neutral-300);
        --neutral-background-medium:    var(--function-neutral-200);
        --neutral-background-weak:      var(--function-neutral-100);
    
        --neutral-on-background-strong: var(--static-white);
        --neutral-on-background-medium: var(--function-neutral-900);
        --neutral-on-background-weak:   var(--function-neutral-700);
      
        --neutral-solid-strong:         var(--function-neutral-500);
        --neutral-solid-medium:         var(--function-neutral-400);
        --neutral-solid-weak:           var(--function-neutral-300);
      
        --neutral-on-solid-strong:      var(--static-white);      
        --neutral-on-solid-weak:        var(--function-neutral-900);
    
        --neutral-border-strong:        var(--function-neutral-400);
        --neutral-border-medium:        var(--function-neutral-300);
        --neutral-border-weak:          var(--function-neutral-200);
      
        --neutral-alpha-strong:         var(--function-neutral-600-50);
        --neutral-alpha-medium:         var(--function-neutral-600-30);
        --neutral-alpha-weak:           var(--function-neutral-600-10);
    
        /* info */
        --info-background-strong:       var(--function-info-300);
        --info-background-medium:       var(--function-info-200);
        --info-background-weak:         var(--function-info-100);
    
        --info-on-background-strong:    var(--static-white);
        --info-on-background-medium:    var(--function-info-900);
        --info-on-background-weak:      var(--function-info-700);
      
        --info-solid-strong:            var(--function-info-500);
        --info-solid-medium:            var(--function-info-400);
        --info-solid-weak:              var(--function-info-300);
      
        --info-on-solid-strong:         var(--static-white);      
        --info-on-solid-weak:           var(--function-info-900);
    
        --info-border-strong:           var(--function-info-400);
        --info-border-medium:           var(--function-info-300);
        --info-border-weak:             var(--function-info-200);
      
        --info-alpha-strong:            var(--function-info-600-50);
        --info-alpha-medium:            var(--function-info-600-30);
        --info-alpha-weak:              var(--function-info-600-10);
    
        /* warning */
        --warning-background-strong:    var(--function-warning-300);
        --warning-background-medium:    var(--function-warning-200);
        --warning-background-weak:      var(--function-warning-100);
    
        --warning-on-background-strong: var(--static-white);
        --warning-on-background-medium: var(--function-warning-900);
        --warning-on-background-weak:   var(--function-warning-700);
      
        --warning-solid-strong:         var(--function-warning-500);
        --warning-solid-medium:         var(--function-warning-400);
        --warning-solid-weak:           var(--function-warning-300);
      
        --warning-on-solid-strong:      var(--static-white);      
        --warning-on-solid-weak:        var(--function-warning-900);
    
        --warning-border-strong:        var(--function-warning-400);
        --warning-border-medium:        var(--function-warning-300);
        --warning-border-weak:          var(--function-warning-200);
      
        --warning-alpha-strong:         var(--function-warning-600-50);
        --warning-alpha-medium:         var(--function-warning-600-30);
        --warning-alpha-weak:           var(--function-warning-600-10);
    
        /* danger */
        --danger-background-strong:     var(--function-danger-300);
        --danger-background-medium:     var(--function-danger-200);
        --danger-background-weak:       var(--function-danger-100);
    
        --danger-on-background-strong:  var(--static-white);
        --danger-on-background-medium:  var(--function-danger-900);
        --danger-on-background-weak:    var(--function-danger-700);
      
        --danger-solid-strong:          var(--function-danger-500);
        --danger-solid-medium:          var(--function-danger-400);
        --danger-solid-weak:            var(--function-danger-300);
      
        --danger-on-solid-strong:       var(--static-white);      
        --danger-on-solid-weak:         var(--function-danger-900);
    
        --danger-border-strong:         var(--function-danger-400);
        --danger-border-medium:         var(--function-danger-300);
        --danger-border-weak:           var(--function-danger-200);
      
        --danger-alpha-strong:          var(--function-danger-600-50);
        --danger-alpha-medium:          var(--function-danger-600-30);
        --danger-alpha-weak:            var(--function-danger-600-10);
    
        /* success */ 
        --success-background-strong:    var(--function-success-300);
        --success-background-medium:    var(--function-success-200);
        --success-background-weak:      var(--function-success-100);
    
        --success-on-background-strong: var(--static-white);
        --success-on-background-medium: var(--function-success-900);
        --success-on-background-weak:   var(--function-success-700);
      
        --success-solid-strong:         var(--function-success-500);
        --success-solid-medium:         var(--function-success-400);
        --success-solid-weak:           var(--function-success-300);
      
        --success-on-solid-strong:      var(--static-white);      
        --success-on-solid-weak:        var(--function-success-900);
    
        --success-border-strong:        var(--function-success-400);
        --success-border-medium:        var(--function-success-300);
        --success-border-weak:          var(--function-success-200);
      
        --success-alpha-strong:         var(--function-success-600-50);
        --success-alpha-medium:         var(--function-success-600-30);
        --success-alpha-weak:           var(--function-success-600-10);
    }
    
    [data-theme="light"] {
        .dark-flex {
            display: none;
        }
    
        .dark-grid {
            display: none;
        }
    
        .light-flex {
            display: flex;
        }
    
        .light-grid {
            display: grid;
        }
    
        --icon: url('/trademark/icon-light.svg');
        --type: url('/trademark/type-light.svg');
    
        --page-background:              var(--neutral-background-weak);
        --backdrop:                     var(--static-white-medium);
    
        --solid-border-color-brand:     var(--brand-alpha-strong);
        --solid-border-color-neutral:   var(--neutral-alpha-strong);
        --solid-border-color-danger:    var(--danger-alpha-strong);
    
        /* code */
        --code-moss:                    var(--scheme-moss-600);
        --code-gray:                    var(--scheme-gray-600);
        --code-aqua:                    var(--scheme-aqua-600);
        --code-green:                   var(--scheme-green-600);
        --code-blue:                    var(--scheme-blue-600);
        --code-violet:                  var(--scheme-violet-600);
        --code-orange:                  var(--scheme-orange-600);
        
        /* brand */  
        --brand-background-strong:      var(--function-brand-800);
        --brand-background-medium:      var(--function-brand-1000);
        --brand-background-weak:        var(--static-white);
    
        --brand-on-background-strong:   var(--function-brand-100);
        --brand-on-background-medium:   var(--function-brand-400);
        --brand-on-background-weak:     var(--function-brand-500);
    
        --brand-border-strong:          var(--function-brand-800);
        --brand-border-medium:          var(--function-brand-900);
        --brand-border-weak:            var(--function-brand-1000);
      
        --brand-alpha-strong:           var(--function-brand-600-50);
        --brand-alpha-medium:           var(--function-brand-600-30);
        --brand-alpha-weak:             var(--function-brand-600-10);
        
        /* accent */
        --accent-background-strong:     var(--function-accent-800);
        --accent-background-medium:     var(--function-accent-1000);
        --accent-background-weak:       var(--static-white);
    
        --accent-on-background-strong:  var(--function-accent-100);
        --accent-on-background-medium:  var(--function-accent-400);
        --accent-on-background-weak:    var(--function-accent-500);
      
        --accent-solid-strong:          var(--function-accent-600);
        --accent-solid-medium:          var(--function-accent-500);
        --accent-solid-weak:            var(--function-accent-400);
      
        --accent-on-solid-strong:       var(--static-white);      
        --accent-on-solid-weak:         var(--function-accent-1000);
    
        --accent-border-strong:         var(--function-accent-800);
        --accent-border-medium:         var(--function-accent-900);
        --accent-border-weak:           var(--function-accent-1000);
      
        --accent-alpha-strong:          var(--function-accent-600-50);
        --accent-alpha-medium:          var(--function-accent-600-30);
        --accent-alpha-weak:            var(--function-accent-600-10);
    
        /* neutral */
        --neutral-background-strong:    var(--function-neutral-800);
        --neutral-background-medium:    var(--function-neutral-1000);
        --neutral-background-weak:      var(--static-white);
    
        --neutral-on-background-strong: var(--function-neutral-100);
        --neutral-on-background-medium: var(--function-neutral-400);
        --neutral-on-background-weak:   var(--function-neutral-500);
      
        --neutral-solid-strong:         var(--function-neutral-600);
        --neutral-solid-medium:         var(--function-neutral-500);
        --neutral-solid-weak:           var(--function-neutral-400);
      
        --neutral-on-solid-strong:      var(--static-white);      
        --neutral-on-solid-weak:        var(--function-neutral-1000);
    
        --neutral-border-strong:        var(--function-neutral-800);
        --neutral-border-medium:        var(--function-neutral-900);
        --neutral-border-weak:          var(--function-neutral-1000);
      
        --neutral-alpha-strong:         var(--function-neutral-600-50);
        --neutral-alpha-medium:         var(--function-neutral-600-30);
        --neutral-alpha-weak:           var(--function-neutral-600-10);
    
        /* info */
        --info-background-strong:       var(--function-info-800);
        --info-background-medium:       var(--function-info-1000);
        --info-background-weak:         var(--static-white);
    
        --info-on-background-strong:    var(--function-info-100);
        --info-on-background-medium:    var(--function-info-400);
        --info-on-background-weak:      var(--function-info-500);
      
        --info-solid-strong:            var(--function-info-600);
        --info-solid-medium:            var(--function-info-500);
        --info-solid-weak:              var(--function-info-400);
      
        --info-on-solid-strong:         var(--static-white);      
        --info-on-solid-weak:           var(--function-info-1000);
    
        --info-border-strong:           var(--function-info-800);
        --info-border-medium:           var(--function-info-900);
        --info-border-weak:             var(--function-info-1000);
      
        --info-alpha-strong:            var(--function-info-600-50);
        --info-alpha-medium:            var(--function-info-600-30);
        --info-alpha-weak:              var(--function-info-600-10);
    
        /* warning */
        --warning-background-strong:    var(--function-warning-800);
        --warning-background-medium:    var(--function-warning-1000);
        --warning-background-weak:      var(--static-white);
    
        --warning-on-background-strong: var(--function-warning-100);
        --warning-on-background-medium: var(--function-warning-400);
        --warning-on-background-weak:   var(--function-warning-500);
      
        --warning-solid-strong:         var(--function-warning-600);
        --warning-solid-medium:         var(--function-warning-500);
        --warning-solid-weak:           var(--function-warning-400);
      
        --warning-on-solid-strong:      var(--static-white);      
        --warning-on-solid-weak:        var(--function-warning-1000);
    
        --warning-border-strong:        var(--function-warning-800);
        --warning-border-medium:        var(--function-warning-900);
        --warning-border-weak:          var(--function-warning-1000);
      
        --warning-alpha-strong:         var(--function-warning-600-50);
        --warning-alpha-medium:         var(--function-warning-600-30);
        --warning-alpha-weak:           var(--function-warning-600-10);
       
        /* danger */   
        --danger-background-strong:     var(--function-danger-800);
        --danger-background-medium:     var(--function-danger-1000);
        --danger-background-weak:       var(--static-white);
    
        --danger-on-background-strong:  var(--function-danger-100);
        --danger-on-background-medium:  var(--function-danger-400);
        --danger-on-background-weak:    var(--function-danger-500);
      
        --danger-solid-strong:          var(--function-danger-600);
        --danger-solid-medium:          var(--function-danger-500);
        --danger-solid-weak:            var(--function-danger-400);
      
        --danger-on-solid-strong:       var(--static-white);      
        --danger-on-solid-weak:         var(--function-danger-1000);
    
        --danger-border-strong:         var(--function-danger-800);
        --danger-border-medium:         var(--function-danger-900);
        --danger-border-weak:           var(--function-danger-1000);
      
        --danger-alpha-strong:          var(--function-danger-600-50);
        --danger-alpha-medium:          var(--function-danger-600-30);
        --danger-alpha-weak:            var(--function-danger-600-10);
       
        /* success */   
        --success-background-strong:    var(--function-success-800);
        --success-background-medium:    var(--function-success-1000);
        --success-background-weak:      var(--static-white);
    
        --success-on-background-strong: var(--function-success-100);
        --success-on-background-medium: var(--function-success-400);
        --success-on-background-weak:   var(--function-success-500);
      
        --success-solid-strong:         var(--function-success-600);
        --success-solid-medium:         var(--function-success-500);
        --success-solid-weak:           var(--function-success-400);
      
        --success-on-solid-strong:      var(--static-white);      
        --success-on-solid-weak:        var(--function-success-1000);
    
        --success-border-strong:        var(--function-success-800);
        --success-border-medium:        var(--function-success-900);
        --success-border-weak:          var(--function-success-1000);
      
        --success-alpha-strong:         var(--function-success-600-50);
        --success-alpha-medium:         var(--function-success-600-30);
        --success-alpha-weak:           var(--function-success-600-10);
    }
    
    [data-solid-style="plastic"] {
        --solid-inset-distance: -1rem;
        --solid-inset-size:      1rem;
        --solid-border-width:    1px;
    }
    
    [data-transition="all"],[data-transition="micro"] {
        --transition-eased:                  ease-in-out;
        --transition-property-all:           all;
        --transition-duration-micro-short:   0.1s;
        --transition-duration-micro-medium:  0.2s;
        --transition-duration-micro-long:    0.4s;
        --transition-micro-short:            var(--transition-property-all) var(--transition-duration-micro-short) var(--transition-eased);
        --transition-micro-medium:           var(--transition-property-all) var(--transition-duration-micro-medium) var(--transition-eased);
        --transition-micro-long:             var(--transition-property-all) var(--transition-duration-micro-long) var(--transition-eased);
    }
    
    [data-transition="all"],[data-transition="macro"] {
        --transition-eased:                  ease-in-out;
        --transition-property-all:           all;
        --transition-duration-macro-short:   0.15s;
        --transition-duration-macro-medium:  0.3s;
        --transition-duration-macro-long:    0.6s;
        --transition-macro-short:            var(--transition-property-all) var(--transition-duration-macro-short) var(--transition-eased);
        --transition-macro-medium:           var(--transition-property-all) var(--transition-duration-macro-medium) var(--transition-eased);
        --transition-macro-long:             var(--transition-property-all) var(--transition-duration-macro-long) var(--transition-eased);
    }
    
    [data-surface="translucent"] {
        --backdrop-filter: blur(1rem);
    }
    
    [data-surface="translucent"][data-theme="light"],
    [data-surface="translucent"] [data-theme="light"] {
        --surface-background:    var(--static-white-medium);
        --surface-border:        var(--neutral-alpha-medium);
    }
    
    [data-surface="translucent"][data-theme="dark"],
    [data-surface="translucent"] [data-theme="dark"] {
        --surface-background:    var(--static-black-medium);
        --surface-border:        var(--neutral-alpha-medium);
    }
    
    [data-surface="filled"][data-theme="light"],
    [data-surface="filled"] [data-theme="light"] {
        --surface-background:    var(--neutral-background-weak);
        --surface-border:        var(--neutral-border-medium);
    }
    
    [data-surface="filled"][data-theme="dark"],
    [data-surface="filled"] [data-theme="dark"] {
        --surface-background:    var(--neutral-background-medium);
        --surface-border:        var(--static-transparent);
    }
    
    [data-theme="dark"][data-solid="color"],
    [data-theme="dark"] [data-solid="color"] {
        --brand-solid-strong:         var(--function-brand-500);
        --brand-solid-medium:         var(--function-brand-400);
        --brand-solid-weak:           var(--function-brand-300);
    
        --brand-on-solid-strong:      var(--static-white);      
        --brand-on-solid-weak:        var(--function-brand-900);
    }
    
    [data-theme="dark"][data-solid="contrast"],
    [data-theme="dark"] [data-solid="contrast"] {
        --brand-solid-strong:         var(--function-neutral-1000);
        --brand-solid-medium:         var(--static-white);
        --brand-solid-weak:           var(--function-neutral-900);
    
        --brand-on-solid-strong:      var(--static-black);
        --brand-on-solid-weak:        var(--function-neutral-200);
    }
    
    [data-theme="dark"][data-solid="inverse"],
    [data-theme="dark"] [data-solid="inverse"] {
        --brand-solid-strong:         var(--function-brand-800);
        --brand-solid-medium:         var(--function-brand-700);
        --brand-solid-weak:           var(--function-brand-600);
    
        --brand-on-solid-strong:      var(--static-black);      
        --brand-on-solid-weak:        var(--function-brand-200);
    }
    
    [data-theme="light"][data-solid="color"],
    [data-theme="light"] [data-solid="color"] {
        --brand-solid-strong:         var(--function-brand-600);
        --brand-solid-medium:         var(--function-brand-500);
        --brand-solid-weak:           var(--function-brand-400);
      
        --brand-on-solid-strong:      var(--static-white);      
        --brand-on-solid-weak:        var(--function-brand-1000);
    }
    
    [data-theme="light"][data-solid="contrast"],
    [data-theme="light"] [data-solid="contrast"] {
        --brand-solid-strong:         var(--function-neutral-300);
        --brand-solid-medium:         var(--static-black);
        --brand-solid-weak:           var(--function-neutral-400);
      
        --brand-on-solid-strong:      var(--static-white);      
        --brand-on-solid-weak:        var(--function-neutral-1000);
    }
    
    
    [data-solid="color"] {
        --solid-inset-color-brand:    var(--brand-alpha-strong);
        --solid-inset-color-neutral:  var(--static-transparent);
        --solid-inset-color-danger:   var(--danger-alpha-strong);
    }
    
    [data-solid="contrast"] {
        --solid-border-color-brand:   var(--neutral-alpha-strong);
    
        --solid-inset-color-brand:    var(--static-transparent);
        --solid-inset-color-neutral:  var(--static-transparent);
        --solid-inset-color-danger:   var(--danger-alpha-strong);
    }
    
    [data-solid="inverse"] {
        --solid-border-color-brand:   var(--brand-alpha-strong);
    
        --solid-inset-color-brand:    var(--brand-alpha-strong);
        --solid-inset-color-neutral:  var(--static-transparent);
        --solid-inset-color-danger:   var(--danger-alpha-strong);
    }
    
    [data-theme="light"][data-solid="inverse"],
    [data-theme="light"] [data-solid="inverse"] {
        --brand-solid-strong:         var(--function-brand-900);
        --brand-solid-medium:         var(--function-brand-800);
        --brand-solid-weak:           var(--function-brand-700);
      
        --brand-on-solid-strong:      var(--static-black);      
        --brand-on-solid-weak:        var(--function-brand-200);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/function.scss
    ```scss
    :root {
        /* FUNCTION */
        /* info */
        --function-info-100:  var(--scheme-gray-100);
        --function-info-200:  var(--scheme-gray-200);
        --function-info-300:  var(--scheme-gray-300);
        --function-info-400:  var(--scheme-gray-400);
        --function-info-500:  var(--scheme-gray-500);
        --function-info-600:  var(--scheme-gray-600);
        --function-info-700:  var(--scheme-gray-700);
        --function-info-800:  var(--scheme-gray-800);
        --function-info-900:  var(--scheme-gray-900);
        --function-info-1000: var(--scheme-gray-1000);
        --function-info-1100: var(--scheme-gray-1100);
        --function-info-1200: var(--scheme-gray-1200);
    
        --function-info-600-10: var(--scheme-gray-600-10);
        --function-info-600-30: var(--scheme-gray-600-30);
        --function-info-600-50: var(--scheme-gray-600-50);
    
        /* warning */
        --function-warning-100:  var(--scheme-yellow-100);
        --function-warning-200:  var(--scheme-yellow-200);
        --function-warning-300:  var(--scheme-yellow-300);
        --function-warning-400:  var(--scheme-yellow-400);
        --function-warning-500:  var(--scheme-yellow-500);
        --function-warning-600:  var(--scheme-yellow-600);
        --function-warning-700:  var(--scheme-yellow-700);
        --function-warning-800:  var(--scheme-yellow-800);
        --function-warning-900:  var(--scheme-yellow-900);
        --function-warning-1000: var(--scheme-yellow-1000);
        --function-warning-1100: var(--scheme-yellow-1100);
        --function-warning-1200: var(--scheme-yellow-1200);
    
        --function-warning-600-10: var(--scheme-yellow-600-10);
        --function-warning-600-30: var(--scheme-yellow-600-30);
        --function-warning-600-50: var(--scheme-yellow-600-50);
    
        /* danger */
        --function-danger-100:  var(--scheme-red-100);
        --function-danger-200:  var(--scheme-red-200);
        --function-danger-300:  var(--scheme-red-300);
        --function-danger-400:  var(--scheme-red-400);
        --function-danger-500:  var(--scheme-red-500);
        --function-danger-600:  var(--scheme-red-600);
        --function-danger-700:  var(--scheme-red-700);
        --function-danger-800:  var(--scheme-red-800);
        --function-danger-900:  var(--scheme-red-900);
        --function-danger-1000: var(--scheme-red-1000);
        --function-danger-1100: var(--scheme-red-1100);
        --function-danger-1200: var(--scheme-red-1200);
    
        --function-danger-600-10: var(--scheme-red-600-10);
        --function-danger-600-30: var(--scheme-red-600-30);
        --function-danger-600-50: var(--scheme-red-600-50);
    
        /* success */
        --function-success-100:  var(--scheme-green-100);
        --function-success-200:  var(--scheme-green-200);
        --function-success-300:  var(--scheme-green-300);
        --function-success-400:  var(--scheme-green-400);
        --function-success-500:  var(--scheme-green-500);
        --function-success-600:  var(--scheme-green-600);
        --function-success-700:  var(--scheme-green-700);
        --function-success-800:  var(--scheme-green-800);
        --function-success-900:  var(--scheme-green-900);
        --function-success-1000: var(--scheme-green-1000);
        --function-success-1100: var(--scheme-green-1100);
        --function-success-1200: var(--scheme-green-1200);
    
        --function-success-600-10: var(--scheme-green-600-10);
        --function-success-600-30: var(--scheme-green-600-30);
        --function-success-600-50: var(--scheme-green-600-50);
    }
    
    /* brand */
    [data-brand="custom"] {
        --function-brand-100:  var(--scheme-brand-100);
        --function-brand-200:  var(--scheme-brand-200);
        --function-brand-300:  var(--scheme-brand-300);
        --function-brand-400:  var(--scheme-brand-400);
        --function-brand-500:  var(--scheme-brand-500);
        --function-brand-600:  var(--scheme-brand-600);
        --function-brand-700:  var(--scheme-brand-700);
        --function-brand-800:  var(--scheme-brand-800);
        --function-brand-900:  var(--scheme-brand-900);
        --function-brand-1000: var(--scheme-brand-1000);
        --function-brand-1100: var(--scheme-brand-1100);
        --function-brand-1200: var(--scheme-brand-1200);
    
        --function-brand-600-10: var(--scheme-brand-600-10);
        --function-brand-600-30: var(--scheme-brand-600-30);
        --function-brand-600-50: var(--scheme-brand-600-50);
    }
    
    [data-brand="red"] {
        --function-brand-100:  var(--scheme-red-100);
        --function-brand-200:  var(--scheme-red-200);
        --function-brand-300:  var(--scheme-red-300);
        --function-brand-400:  var(--scheme-red-400);
        --function-brand-500:  var(--scheme-red-500);
        --function-brand-600:  var(--scheme-red-600);
        --function-brand-700:  var(--scheme-red-700);
        --function-brand-800:  var(--scheme-red-800);
        --function-brand-900:  var(--scheme-red-900);
        --function-brand-1000: var(--scheme-red-1000);
        --function-brand-1100: var(--scheme-red-1100);
        --function-brand-1200: var(--scheme-red-1200);
    
        --function-brand-600-10: var(--scheme-red-600-10);
        --function-brand-600-30: var(--scheme-red-600-30);
        --function-brand-600-50: var(--scheme-red-600-50);
    }
    
    [data-brand="orange"] {
        --function-brand-100:  var(--scheme-orange-100);
        --function-brand-200:  var(--scheme-orange-200);
        --function-brand-300:  var(--scheme-orange-300);
        --function-brand-400:  var(--scheme-orange-400);
        --function-brand-500:  var(--scheme-orange-500);
        --function-brand-600:  var(--scheme-orange-600);
        --function-brand-700:  var(--scheme-orange-700);
        --function-brand-800:  var(--scheme-orange-800);
        --function-brand-900:  var(--scheme-orange-900);
        --function-brand-1000: var(--scheme-orange-1000);
        --function-brand-1100: var(--scheme-orange-1100);
        --function-brand-1200: var(--scheme-orange-1200);
    
        --function-brand-600-10: var(--scheme-orange-600-10);
        --function-brand-600-30: var(--scheme-orange-600-30);
        --function-brand-600-50: var(--scheme-orange-600-50);
    }
    
    [data-brand="yellow"] {
        --function-brand-100:  var(--scheme-yellow-100);
        --function-brand-200:  var(--scheme-yellow-200);
        --function-brand-300:  var(--scheme-yellow-300);
        --function-brand-400:  var(--scheme-yellow-400);
        --function-brand-500:  var(--scheme-yellow-500);
        --function-brand-600:  var(--scheme-yellow-600);
        --function-brand-700:  var(--scheme-yellow-700);
        --function-brand-800:  var(--scheme-yellow-800);
        --function-brand-900:  var(--scheme-yellow-900);
        --function-brand-1000: var(--scheme-yellow-1000);
        --function-brand-1100: var(--scheme-yellow-1100);
        --function-brand-1200: var(--scheme-yellow-1200);
    
        --function-brand-600-10: var(--scheme-yellow-600-10);
        --function-brand-600-30: var(--scheme-yellow-600-30);
        --function-brand-600-50: var(--scheme-yellow-600-50);
    }
    
    [data-brand="moss"] {
        --function-brand-100:  var(--scheme-moss-100);
        --function-brand-200:  var(--scheme-moss-200);
        --function-brand-300:  var(--scheme-moss-300);
        --function-brand-400:  var(--scheme-moss-400);
        --function-brand-500:  var(--scheme-moss-500);
        --function-brand-600:  var(--scheme-moss-600);
        --function-brand-700:  var(--scheme-moss-700);
        --function-brand-800:  var(--scheme-moss-800);
        --function-brand-900:  var(--scheme-moss-900);
        --function-brand-1000: var(--scheme-moss-1000);
        --function-brand-1100: var(--scheme-moss-1100);
        --function-brand-1200: var(--scheme-moss-1200);
    
        --function-brand-600-10: var(--scheme-moss-600-10);
        --function-brand-600-30: var(--scheme-moss-600-30);
        --function-brand-600-50: var(--scheme-moss-600-50);
    }
    
    [data-brand="green"] {
        --function-brand-100:  var(--scheme-green-100);
        --function-brand-200:  var(--scheme-green-200);
        --function-brand-300:  var(--scheme-green-300);
        --function-brand-400:  var(--scheme-green-400);
        --function-brand-500:  var(--scheme-green-500);
        --function-brand-600:  var(--scheme-green-600);
        --function-brand-700:  var(--scheme-green-700);
        --function-brand-800:  var(--scheme-green-800);
        --function-brand-900:  var(--scheme-green-900);
        --function-brand-1000: var(--scheme-green-1000);
        --function-brand-1100: var(--scheme-green-1100);
        --function-brand-1200: var(--scheme-green-1200);
    
        --function-brand-600-10: var(--scheme-green-600-10);
        --function-brand-600-30: var(--scheme-green-600-30);
        --function-brand-600-50: var(--scheme-green-600-50);
    }
    
    [data-brand="emerald"] {
        --function-brand-100:  var(--scheme-emerald-100);
        --function-brand-200:  var(--scheme-emerald-200);
        --function-brand-300:  var(--scheme-emerald-300);
        --function-brand-400:  var(--scheme-emerald-400);
        --function-brand-500:  var(--scheme-emerald-500);
        --function-brand-600:  var(--scheme-emerald-600);
        --function-brand-700:  var(--scheme-emerald-700);
        --function-brand-800:  var(--scheme-emerald-800);
        --function-brand-900:  var(--scheme-emerald-900);
        --function-brand-1000: var(--scheme-emerald-1000);
        --function-brand-1100: var(--scheme-emerald-1100);
        --function-brand-1200: var(--scheme-emerald-1200);
    
        --function-brand-600-10: var(--scheme-emerald-600-10);
        --function-brand-600-30: var(--scheme-emerald-600-30);
        --function-brand-600-50: var(--scheme-emerald-600-50);
    }
    
    [data-brand="aqua"] {
        --function-brand-100:  var(--scheme-aqua-100);
        --function-brand-200:  var(--scheme-aqua-200);
        --function-brand-300:  var(--scheme-aqua-300);
        --function-brand-400:  var(--scheme-aqua-400);
        --function-brand-500:  var(--scheme-aqua-500);
        --function-brand-600:  var(--scheme-aqua-600);
        --function-brand-700:  var(--scheme-aqua-700);
        --function-brand-800:  var(--scheme-aqua-800);
        --function-brand-900:  var(--scheme-aqua-900);
        --function-brand-1000: var(--scheme-aqua-1000);
        --function-brand-1100: var(--scheme-aqua-1100);
        --function-brand-1200: var(--scheme-aqua-1200);
    
        --function-brand-600-10: var(--scheme-aqua-600-10);
        --function-brand-600-30: var(--scheme-aqua-600-30);
        --function-brand-600-50: var(--scheme-aqua-600-50);
    }
    
    [data-brand="cyan"] {
        --function-brand-100:  var(--scheme-cyan-100);
        --function-brand-200:  var(--scheme-cyan-200);
        --function-brand-300:  var(--scheme-cyan-300);
        --function-brand-400:  var(--scheme-cyan-400);
        --function-brand-500:  var(--scheme-cyan-500);
        --function-brand-600:  var(--scheme-cyan-600);
        --function-brand-700:  var(--scheme-cyan-700);
        --function-brand-800:  var(--scheme-cyan-800);
        --function-brand-900:  var(--scheme-cyan-900);
        --function-brand-1000: var(--scheme-cyan-1000);
        --function-brand-1100: var(--scheme-cyan-1100);
        --function-brand-1200: var(--scheme-cyan-1200);
    
        --function-brand-600-10: var(--scheme-cyan-600-10);
        --function-brand-600-30: var(--scheme-cyan-600-30);
        --function-brand-600-50: var(--scheme-cyan-600-50);
    }
    
    [data-brand="blue"] {
        --function-brand-100:  var(--scheme-blue-100);
        --function-brand-200:  var(--scheme-blue-200);
        --function-brand-300:  var(--scheme-blue-300);
        --function-brand-400:  var(--scheme-blue-400);
        --function-brand-500:  var(--scheme-blue-500);
        --function-brand-600:  var(--scheme-blue-600);
        --function-brand-700:  var(--scheme-blue-700);
        --function-brand-800:  var(--scheme-blue-800);
        --function-brand-900:  var(--scheme-blue-900);
        --function-brand-1000: var(--scheme-blue-1000);
        --function-brand-1100: var(--scheme-blue-1100);
        --function-brand-1200: var(--scheme-blue-1200);
    
        --function-brand-600-10: var(--scheme-blue-600-10);
        --function-brand-600-30: var(--scheme-blue-600-30);
        --function-brand-600-50: var(--scheme-blue-600-50);
    }
    
    [data-brand="indigo"] {
        --function-brand-100:  var(--scheme-indigo-100);
        --function-brand-200:  var(--scheme-indigo-200);
        --function-brand-300:  var(--scheme-indigo-300);
        --function-brand-400:  var(--scheme-indigo-400);
        --function-brand-500:  var(--scheme-indigo-500);
        --function-brand-600:  var(--scheme-indigo-600);
        --function-brand-700:  var(--scheme-indigo-700);
        --function-brand-800:  var(--scheme-indigo-800);
        --function-brand-900:  var(--scheme-indigo-900);
        --function-brand-1000: var(--scheme-indigo-1000);
        --function-brand-1100: var(--scheme-indigo-1100);
        --function-brand-1200: var(--scheme-indigo-1200);
    
        --function-brand-600-10: var(--scheme-indigo-600-10);
        --function-brand-600-30: var(--scheme-indigo-600-30);
        --function-brand-600-50: var(--scheme-indigo-600-50);
    }
    
    [data-brand="violet"] {
        --function-brand-100:  var(--scheme-violet-100);
        --function-brand-200:  var(--scheme-violet-200);
        --function-brand-300:  var(--scheme-violet-300);
        --function-brand-400:  var(--scheme-violet-400);
        --function-brand-500:  var(--scheme-violet-500);
        --function-brand-600:  var(--scheme-violet-600);
        --function-brand-700:  var(--scheme-violet-700);
        --function-brand-800:  var(--scheme-violet-800);
        --function-brand-900:  var(--scheme-violet-900);
        --function-brand-1000: var(--scheme-violet-1000);
        --function-brand-1100: var(--scheme-violet-1100);
        --function-brand-1200: var(--scheme-violet-1200);
    
        --function-brand-600-10: var(--scheme-violet-600-10);
        --function-brand-600-30: var(--scheme-violet-600-30);
        --function-brand-600-50: var(--scheme-violet-600-50);
    }
    
    [data-brand="magenta"] {
        --function-brand-100:  var(--scheme-magenta-100);
        --function-brand-200:  var(--scheme-magenta-200);
        --function-brand-300:  var(--scheme-magenta-300);
        --function-brand-400:  var(--scheme-magenta-400);
        --function-brand-500:  var(--scheme-magenta-500);
        --function-brand-600:  var(--scheme-magenta-600);
        --function-brand-700:  var(--scheme-magenta-700);
        --function-brand-800:  var(--scheme-magenta-800);
        --function-brand-900:  var(--scheme-magenta-900);
        --function-brand-1000: var(--scheme-magenta-1000);
        --function-brand-1100: var(--scheme-magenta-1100);
        --function-brand-1200: var(--scheme-magenta-1200);
    
        --function-brand-600-10: var(--scheme-magenta-600-10);
        --function-brand-600-30: var(--scheme-magenta-600-30);
        --function-brand-600-50: var(--scheme-magenta-600-50);
    }
    
    [data-brand="pink"] {
        --function-brand-100:  var(--scheme-pink-100);
        --function-brand-200:  var(--scheme-pink-200);
        --function-brand-300:  var(--scheme-pink-300);
        --function-brand-400:  var(--scheme-pink-400);
        --function-brand-500:  var(--scheme-pink-500);
        --function-brand-600:  var(--scheme-pink-600);
        --function-brand-700:  var(--scheme-pink-700);
        --function-brand-800:  var(--scheme-pink-800);
        --function-brand-900:  var(--scheme-pink-900);
        --function-brand-1000: var(--scheme-pink-1000);
        --function-brand-1100: var(--scheme-pink-1100);
        --function-brand-1200: var(--scheme-pink-1200);
    
        --function-brand-600-10: var(--scheme-pink-600-10);
        --function-brand-600-30: var(--scheme-pink-600-30);
        --function-brand-600-50: var(--scheme-pink-600-50);
    }
    
    /* accent */
    [data-accent="custom"] {
        --function-accent-100:  var(--scheme-accent-100);
        --function-accent-200:  var(--scheme-accent-200);
        --function-accent-300:  var(--scheme-accent-300);
        --function-accent-400:  var(--scheme-accent-400);
        --function-accent-500:  var(--scheme-accent-500);
        --function-accent-600:  var(--scheme-accent-600);
        --function-accent-700:  var(--scheme-accent-700);
        --function-accent-800:  var(--scheme-accent-800);
        --function-accent-900:  var(--scheme-accent-900);
        --function-accent-1000: var(--scheme-accent-1000);
        --function-accent-1100: var(--scheme-accent-1100);
        --function-accent-1200: var(--scheme-accent-1200);
    
        --function-accent-600-10: var(--scheme-accent-600-10);
        --function-accent-600-30: var(--scheme-accent-600-30);
        --function-accent-600-50: var(--scheme-accent-600-50);
    }
    
    [data-accent="red"] {
        --function-accent-100:  var(--scheme-red-100);
        --function-accent-200:  var(--scheme-red-200);
        --function-accent-300:  var(--scheme-red-300);
        --function-accent-400:  var(--scheme-red-400);
        --function-accent-500:  var(--scheme-red-500);
        --function-accent-600:  var(--scheme-red-600);
        --function-accent-700:  var(--scheme-red-700);
        --function-accent-800:  var(--scheme-red-800);
        --function-accent-900:  var(--scheme-red-900);
        --function-accent-1000: var(--scheme-red-1000);
        --function-accent-1100: var(--scheme-red-1100);
        --function-accent-1200: var(--scheme-red-1200);
    
        --function-accent-600-10: var(--scheme-red-600-10);
        --function-accent-600-30: var(--scheme-red-600-30);
        --function-accent-600-50: var(--scheme-red-600-50);
    }
    
    [data-accent="orange"] {
        --function-accent-100:  var(--scheme-orange-100);
        --function-accent-200:  var(--scheme-orange-200);
        --function-accent-300:  var(--scheme-orange-300);
        --function-accent-400:  var(--scheme-orange-400);
        --function-accent-500:  var(--scheme-orange-500);
        --function-accent-600:  var(--scheme-orange-600);
        --function-accent-700:  var(--scheme-orange-700);
        --function-accent-800:  var(--scheme-orange-800);
        --function-accent-900:  var(--scheme-orange-900);
        --function-accent-1000: var(--scheme-orange-1000);
        --function-accent-1100: var(--scheme-orange-1100);
        --function-accent-1200: var(--scheme-orange-1200);
    
        --function-accent-600-10: var(--scheme-orange-600-10);
        --function-accent-600-30: var(--scheme-orange-600-30);
        --function-accent-600-50: var(--scheme-orange-600-50);
    }
    
    [data-accent="yellow"] {
        --function-accent-100:  var(--scheme-yellow-100);
        --function-accent-200:  var(--scheme-yellow-200);
        --function-accent-300:  var(--scheme-yellow-300);
        --function-accent-400:  var(--scheme-yellow-400);
        --function-accent-500:  var(--scheme-yellow-500);
        --function-accent-600:  var(--scheme-yellow-600);
        --function-accent-700:  var(--scheme-yellow-700);
        --function-accent-800:  var(--scheme-yellow-800);
        --function-accent-900:  var(--scheme-yellow-900);
        --function-accent-1000: var(--scheme-yellow-1000);
        --function-accent-1100: var(--scheme-yellow-1100);
        --function-accent-1200: var(--scheme-yellow-1200);
    
        --function-accent-600-10: var(--scheme-yellow-600-10);
        --function-accent-600-30: var(--scheme-yellow-600-30);
        --function-accent-600-50: var(--scheme-yellow-600-50);
    }
    
    [data-accent="moss"] {
        --function-accent-100:  var(--scheme-moss-100);
        --function-accent-200:  var(--scheme-moss-200);
        --function-accent-300:  var(--scheme-moss-300);
        --function-accent-400:  var(--scheme-moss-400);
        --function-accent-500:  var(--scheme-moss-500);
        --function-accent-600:  var(--scheme-moss-600);
        --function-accent-700:  var(--scheme-moss-700);
        --function-accent-800:  var(--scheme-moss-800);
        --function-accent-900:  var(--scheme-moss-900);
        --function-accent-1000: var(--scheme-moss-1000);
        --function-accent-1100: var(--scheme-moss-1100);
        --function-accent-1200: var(--scheme-moss-1200);
    
        --function-accent-600-10: var(--scheme-moss-600-10);
        --function-accent-600-30: var(--scheme-moss-600-30);
        --function-accent-600-50: var(--scheme-moss-600-50);
    }
    
    [data-accent="green"] {
        --function-accent-100:  var(--scheme-green-100);
        --function-accent-200:  var(--scheme-green-200);
        --function-accent-300:  var(--scheme-green-300);
        --function-accent-400:  var(--scheme-green-400);
        --function-accent-500:  var(--scheme-green-500);
        --function-accent-600:  var(--scheme-green-600);
        --function-accent-700:  var(--scheme-green-700);
        --function-accent-800:  var(--scheme-green-800);
        --function-accent-900:  var(--scheme-green-900);
        --function-accent-1000: var(--scheme-green-1000);
        --function-accent-1100: var(--scheme-green-1100);
        --function-accent-1200: var(--scheme-green-1200);
    
        --function-accent-600-10: var(--scheme-green-600-10);
        --function-accent-600-30: var(--scheme-green-600-30);
        --function-accent-600-50: var(--scheme-green-600-50);
    }
    
    [data-accent="emerald"] {
        --function-accent-100:  var(--scheme-emerald-100);
        --function-accent-200:  var(--scheme-emerald-200);
        --function-accent-300:  var(--scheme-emerald-300);
        --function-accent-400:  var(--scheme-emerald-400);
        --function-accent-500:  var(--scheme-emerald-500);
        --function-accent-600:  var(--scheme-emerald-600);
        --function-accent-700:  var(--scheme-emerald-700);
        --function-accent-800:  var(--scheme-emerald-800);
        --function-accent-900:  var(--scheme-emerald-900);
        --function-accent-1000: var(--scheme-emerald-1000);
        --function-accent-1100: var(--scheme-emerald-1100);
        --function-accent-1200: var(--scheme-emerald-1200);
    
        --function-accent-600-10: var(--scheme-emerald-600-10);
        --function-accent-600-30: var(--scheme-emerald-600-30);
        --function-accent-600-50: var(--scheme-emerald-600-50);
    }
    
    [data-accent="aqua"] {
        --function-accent-100:  var(--scheme-aqua-100);
        --function-accent-200:  var(--scheme-aqua-200);
        --function-accent-300:  var(--scheme-aqua-300);
        --function-accent-400:  var(--scheme-aqua-400);
        --function-accent-500:  var(--scheme-aqua-500);
        --function-accent-600:  var(--scheme-aqua-600);
        --function-accent-700:  var(--scheme-aqua-700);
        --function-accent-800:  var(--scheme-aqua-800);
        --function-accent-900:  var(--scheme-aqua-900);
        --function-accent-1000: var(--scheme-aqua-1000);
        --function-accent-1100: var(--scheme-aqua-1100);
        --function-accent-1200: var(--scheme-aqua-1200);
    
        --function-accent-600-10: var(--scheme-aqua-600-10);
        --function-accent-600-30: var(--scheme-aqua-600-30);
        --function-accent-600-50: var(--scheme-aqua-600-50);
    }
    
    [data-accent="cyan"] {
        --function-accent-100:  var(--scheme-cyan-100);
        --function-accent-200:  var(--scheme-cyan-200);
        --function-accent-300:  var(--scheme-cyan-300);
        --function-accent-400:  var(--scheme-cyan-400);
        --function-accent-500:  var(--scheme-cyan-500);
        --function-accent-600:  var(--scheme-cyan-600);
        --function-accent-700:  var(--scheme-cyan-700);
        --function-accent-800:  var(--scheme-cyan-800);
        --function-accent-900:  var(--scheme-cyan-900);
        --function-accent-1000: var(--scheme-cyan-1000);
        --function-accent-1100: var(--scheme-cyan-1100);
        --function-accent-1200: var(--scheme-cyan-1200);
    
        --function-accent-600-10: var(--scheme-cyan-600-10);
        --function-accent-600-30: var(--scheme-cyan-600-30);
        --function-accent-600-50: var(--scheme-cyan-600-50);
    }
    
    [data-accent="blue"] {
        --function-accent-100:  var(--scheme-blue-100);
        --function-accent-200:  var(--scheme-blue-200);
        --function-accent-300:  var(--scheme-blue-300);
        --function-accent-400:  var(--scheme-blue-400);
        --function-accent-500:  var(--scheme-blue-500);
        --function-accent-600:  var(--scheme-blue-600);
        --function-accent-700:  var(--scheme-blue-700);
        --function-accent-800:  var(--scheme-blue-800);
        --function-accent-900:  var(--scheme-blue-900);
        --function-accent-1000: var(--scheme-blue-1000);
        --function-accent-1100: var(--scheme-blue-1100);
        --function-accent-1200: var(--scheme-blue-1200);
    
        --function-accent-600-10: var(--scheme-blue-600-10);
        --function-accent-600-30: var(--scheme-blue-600-30);
        --function-accent-600-50: var(--scheme-blue-600-50);
    }
    
    [data-accent="indigo"] {
        --function-accent-100:  var(--scheme-indigo-100);
        --function-accent-200:  var(--scheme-indigo-200);
        --function-accent-300:  var(--scheme-indigo-300);
        --function-accent-400:  var(--scheme-indigo-400);
        --function-accent-500:  var(--scheme-indigo-500);
        --function-accent-600:  var(--scheme-indigo-600);
        --function-accent-700:  var(--scheme-indigo-700);
        --function-accent-800:  var(--scheme-indigo-800);
        --function-accent-900:  var(--scheme-indigo-900);
        --function-accent-1000: var(--scheme-indigo-1000);
        --function-accent-1100: var(--scheme-indigo-1100);
        --function-accent-1200: var(--scheme-indigo-1200);
    
        --function-accent-600-10: var(--scheme-indigo-600-10);
        --function-accent-600-30: var(--scheme-indigo-600-30);
        --function-accent-600-50: var(--scheme-indigo-600-50);
    }
    
    [data-accent="violet"] {
        --function-accent-100:  var(--scheme-violet-100);
        --function-accent-200:  var(--scheme-violet-200);
        --function-accent-300:  var(--scheme-violet-300);
        --function-accent-400:  var(--scheme-violet-400);
        --function-accent-500:  var(--scheme-violet-500);
        --function-accent-600:  var(--scheme-violet-600);
        --function-accent-700:  var(--scheme-violet-700);
        --function-accent-800:  var(--scheme-violet-800);
        --function-accent-900:  var(--scheme-violet-900);
        --function-accent-1000: var(--scheme-violet-1000);
        --function-accent-1100: var(--scheme-violet-1100);
        --function-accent-1200: var(--scheme-violet-1200);
    
        --function-accent-600-10: var(--scheme-violet-600-10);
        --function-accent-600-30: var(--scheme-violet-600-30);
        --function-accent-600-50: var(--scheme-violet-600-50);
    }
    
    [data-accent="magenta"] {
        --function-accent-100:  var(--scheme-magenta-100);
        --function-accent-200:  var(--scheme-magenta-200);
        --function-accent-300:  var(--scheme-magenta-300);
        --function-accent-400:  var(--scheme-magenta-400);
        --function-accent-500:  var(--scheme-magenta-500);
        --function-accent-600:  var(--scheme-magenta-600);
        --function-accent-700:  var(--scheme-magenta-700);
        --function-accent-800:  var(--scheme-magenta-800);
        --function-accent-900:  var(--scheme-magenta-900);
        --function-accent-1000: var(--scheme-magenta-1000);
        --function-accent-1100: var(--scheme-magenta-1100);
        --function-accent-1200: var(--scheme-magenta-1200);
    
        --function-accent-600-10: var(--scheme-magenta-600-10);
        --function-accent-600-30: var(--scheme-magenta-600-30);
        --function-accent-600-50: var(--scheme-magenta-600-50);
    }
    
    [data-accent="pink"] {
        --function-accent-100:  var(--scheme-pink-100);
        --function-accent-200:  var(--scheme-pink-200);
        --function-accent-300:  var(--scheme-pink-300);
        --function-accent-400:  var(--scheme-pink-400);
        --function-accent-500:  var(--scheme-pink-500);
        --function-accent-600:  var(--scheme-pink-600);
        --function-accent-700:  var(--scheme-pink-700);
        --function-accent-800:  var(--scheme-pink-800);
        --function-accent-900:  var(--scheme-pink-900);
        --function-accent-1000: var(--scheme-pink-1000);
        --function-accent-1100: var(--scheme-pink-1100);
        --function-accent-1200: var(--scheme-pink-1200);
    
        --function-accent-600-10: var(--scheme-pink-600-10);
        --function-accent-600-30: var(--scheme-pink-600-30);
        --function-accent-600-50: var(--scheme-pink-600-50);
    }
    
    /* neutral */
    [data-neutral="custom"] {
        --function-neutral-100:  var(--scheme-neutral-100);
        --function-neutral-200:  var(--scheme-neutral-200);
        --function-neutral-300:  var(--scheme-neutral-300);
        --function-neutral-400:  var(--scheme-neutral-400);
        --function-neutral-500:  var(--scheme-neutral-500);
        --function-neutral-600:  var(--scheme-neutral-600);
        --function-neutral-700:  var(--scheme-neutral-700);
        --function-neutral-800:  var(--scheme-neutral-800);
        --function-neutral-900:  var(--scheme-neutral-900);
        --function-neutral-1000: var(--scheme-neutral-1000);
        --function-neutral-1100: var(--scheme-neutral-1100);
        --function-neutral-1200: var(--scheme-neutral-1200);
    
        --function-neutral-600-10: var(--scheme-neutral-600-10);
        --function-neutral-600-30: var(--scheme-neutral-600-30);
        --function-neutral-600-50: var(--scheme-neutral-600-50);
    }
    
    [data-neutral="slate"] {
        --function-neutral-100:  var(--scheme-slate-100);
        --function-neutral-200:  var(--scheme-slate-200);
        --function-neutral-300:  var(--scheme-slate-300);
        --function-neutral-400:  var(--scheme-slate-400);
        --function-neutral-500:  var(--scheme-slate-500);
        --function-neutral-600:  var(--scheme-slate-600);
        --function-neutral-700:  var(--scheme-slate-700);
        --function-neutral-800:  var(--scheme-slate-800);
        --function-neutral-900:  var(--scheme-slate-900);
        --function-neutral-1000: var(--scheme-slate-1000);
        --function-neutral-1100: var(--scheme-slate-1100);
        --function-neutral-1200: var(--scheme-slate-1200);
    
        --function-neutral-600-10: var(--scheme-slate-600-10);
        --function-neutral-600-30: var(--scheme-slate-600-30);
        --function-neutral-600-50: var(--scheme-slate-600-50);
    }
    
    [data-neutral="gray"] {
        --function-neutral-100:  var(--scheme-gray-100);
        --function-neutral-200:  var(--scheme-gray-200);
        --function-neutral-300:  var(--scheme-gray-300);
        --function-neutral-400:  var(--scheme-gray-400);
        --function-neutral-500:  var(--scheme-gray-500);
        --function-neutral-600:  var(--scheme-gray-600);
        --function-neutral-700:  var(--scheme-gray-700);
        --function-neutral-800:  var(--scheme-gray-800);
        --function-neutral-900:  var(--scheme-gray-900);
        --function-neutral-1000: var(--scheme-gray-1000);
        --function-neutral-1100: var(--scheme-gray-1100);
        --function-neutral-1200: var(--scheme-gray-1200);
    
        --function-neutral-600-10: var(--scheme-gray-600-10);
        --function-neutral-600-30: var(--scheme-gray-600-30);
        --function-neutral-600-50: var(--scheme-gray-600-50);
    }
    
    [data-neutral="sand"] {
        --function-neutral-100:  var(--scheme-sand-100);
        --function-neutral-200:  var(--scheme-sand-200);
        --function-neutral-300:  var(--scheme-sand-300);
        --function-neutral-400:  var(--scheme-sand-400);
        --function-neutral-500:  var(--scheme-sand-500);
        --function-neutral-600:  var(--scheme-sand-600);
        --function-neutral-700:  var(--scheme-sand-700);
        --function-neutral-800:  var(--scheme-sand-800);
        --function-neutral-900:  var(--scheme-sand-900);
        --function-neutral-1000: var(--scheme-sand-1000);
        --function-neutral-1100: var(--scheme-sand-1100);
        --function-neutral-1200: var(--scheme-sand-1200);
    
        --function-neutral-600-10: var(--scheme-sand-600-10);
        --function-neutral-600-30: var(--scheme-sand-600-30);
        --function-neutral-600-50: var(--scheme-sand-600-50);
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/tokens/typography.scss
    ```scss
    :root {
        /* FONT WEIGHT */
        --font-weight-thin:            100;
        --font-weight-extraLight:      200;
        --font-weight-light:           300;
        --font-weight-normal:          400;
        --font-weight-medium:          500;
        --font-weight-semiBold:        600;
        --font-weight-bold:            700;
        --font-weight-extraBold:       800;
    
        --font-weight-body-default:    var(--font-weight-normal);
        --font-weight-body-strong:     var(--font-weight-bold);
        --font-weight-label-default:   var(--font-weight-normal);
        --font-weight-label-strong:    var(--font-weight-semiBold);
        --font-weight-code-default:    var(--font-weight-normal);
        --font-weight-code-strong:     var(--font-weight-bold);
        --font-weight-heading-default: var(--font-weight-normal);
        --font-weight-heading-strong:  var(--font-weight-semiBold);
        --font-weight-display-default: var(--font-weight-light);
        --font-weight-display-strong:  var(--font-weight-semiBold);
    
        /* FONT SIZE */
        --font-size-display-xl:        5rem;
        --font-size-display-l:         4rem;
        --font-size-display-m:         3rem;
        --font-size-display-s:         2.5rem;
        --font-size-display-xs:        2rem;
    
        --font-size-heading-xl:        1.5rem;
        --font-size-heading-l:         1.33rem;
        --font-size-heading-m:         1.25rem;
        --font-size-heading-s:         1.125rem;
        --font-size-heading-xs:        1rem;
    
        --font-size-body-xl:           1.25rem;
        --font-size-body-l:            1.125rem;
        --font-size-body-m:            1rem;
        --font-size-body-s:            0.875rem;
        --font-size-body-xs:           0.75rem;
    
        --font-size-label-l:           1rem;
        --font-size-label-m:           0.925rem;
        --font-size-label-s:           0.825rem;
    
        /* LINE HEIGHT */
        --line-height-display-xl:      5rem;
        --line-height-display-l:       4.25rem;
        --line-height-display-m:       3.25rem;
        --line-height-display-s:       3rem;
        --line-height-display-xs:      2.5rem;
    
        --line-height-heading-xl:      2rem;
        --line-height-heading-l:       1.75rem;
        --line-height-heading-m:       1.5rem;
        --line-height-heading-s:       1.5rem;
        --line-height-heading-xs:      1.25rem;
    
        --line-height-body-xl:         1.75rem;
        --line-height-body-l:          1.5rem;
        --line-height-body-m:          1.5rem;
        --line-height-body-s:          1.125rem;
        --line-height-body-xs:         1rem;
    
        --line-height-label-l:         1.25rem;
        --line-height-label-m:         1.25rem;
        --line-height-label-s:         1rem;
    }
    
    @media (--m) {
        :root {
            /* FONT SIZE */
            --font-size-display-xl:    3.5rem;
            --font-size-display-l:     3.25rem;
            --font-size-display-m:     2.75rem;
            --font-size-display-s:     2.25rem;
            --font-size-display-xs:    1.75rem;
        
            --font-size-heading-xl:    1.33rem;
            --font-size-heading-l:     1.25rem;
            --font-size-heading-m:     1.125rem;
        
            /* LINE HEIGHT */
            --line-height-display-xl:  3.75rem;
            --line-height-display-l:   3.5rem;
            --line-height-display-m:   3rem;
            --line-height-display-s:   2.5rem;
            --line-height-display-xs:  2rem;
        
            --line-height-heading-xl:  1.75rem;
            --line-height-heading-l:   1.5rem;
            --line-height-heading-m:   1.25rem;
        }
    }
    
    @media (--s) {
        :root {
            /* FONT SIZE */
            --font-size-display-xl:    2.75rem;
            --font-size-display-l:     2.5rem;
            --font-size-display-m:     2.25rem;
            --font-size-display-s:     2rem;
        
            /* LINE HEIGHT */
            --line-height-display-xl:  3rem;
            --line-height-display-l:   3rem;
            --line-height-display-m:   2.5rem;
            --line-height-display-s:   2.5rem;
        }
    }
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/icons.ts
    ```ts
    import { IconType } from "react-icons";
    
    import {
      HiChevronUp,
      HiChevronDown,
      HiChevronRight,
      HiChevronLeft,
      HiOutlineArrowPath,
      HiCheck,
      HiOutlineSun,
      HiOutlineMoon,
      HiMiniQuestionMarkCircle,
      HiMiniMinus,
      HiOutlineEye,
      HiOutlineEyeSlash,
      HiMiniPlus,
      HiMiniUser,
      HiMiniXMark,
      HiEyeDropper,
      HiOutlineClipboard,
      HiOutlineMagnifyingGlass,
      HiCalendar,
      HiOutlineLink,
      HiExclamationTriangle,
      HiArrowUpRight,
      HiInformationCircle,
      HiExclamationCircle,
      HiCheckCircle,
      HiOutlineShieldCheck,
      HiOutlineSparkles,
      HiOutlineComputerDesktop,
    } from "react-icons/hi2";
    
    import { RiVisaLine } from "react-icons/ri";
    
    import { FaDiscord, FaGithub, FaGoogle } from "react-icons/fa6";
    
    import { LuChevronsLeftRight } from "react-icons/lu";
    
    export const iconLibrary: Record<string, IconType> = {
      chevronUp: HiChevronUp,
      chevronDown: HiChevronDown,
      chevronRight: HiChevronRight,
      chevronLeft: HiChevronLeft,
      chevronsLeftRight: LuChevronsLeftRight,
      refresh: HiOutlineArrowPath,
      check: HiCheck,
      light: HiOutlineSun,
      dark: HiOutlineMoon,
      helpCircle: HiMiniQuestionMarkCircle,
      infoCircle: HiInformationCircle,
      warningTriangle: HiExclamationTriangle,
      errorCircle: HiExclamationCircle,
      checkCircle: HiCheckCircle,
      eyeDropper: HiEyeDropper,
      clipboard: HiOutlineClipboard,
      person: HiMiniUser,
      close: HiMiniXMark,
      openLink: HiOutlineLink,
      discord: FaDiscord,
      google: FaGoogle,
      github: FaGithub,
      arrowUpRight: HiArrowUpRight,
      minus: HiMiniMinus,
      plus: HiMiniPlus,
      calendar: HiCalendar,
      eye: HiOutlineEye,
      eyeOff: HiOutlineEyeSlash,
      search: HiOutlineMagnifyingGlass,
      visa: RiVisaLine,
      security: HiOutlineShieldCheck,
      sparkle: HiOutlineSparkles,
      computer: HiOutlineComputerDesktop
    };
    
    export type IconLibrary = typeof iconLibrary;
    export type IconName = keyof IconLibrary;
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/interfaces.ts
    ```ts
    import { CSSProperties, ElementType, HTMLAttributes, ReactNode } from "react";
    import {
      ColorScheme,
      ColorWeight,
      flex,
      gridColumns,
      opacity,
      RadiusNest,
      RadiusSize,
      ShadowSize,
      SpacingToken,
      TextSize,
      TextType,
      TextVariant,
      TextWeight,
    } from "./types";
    
    export interface GridProps extends HTMLAttributes<HTMLDivElement> {
      columns?: gridColumns;
      rows?: gridColumns;
      tabletColumns?: gridColumns;
      mobileColumns?: gridColumns;
      tabletRows?: gridColumns;
      mobileRows?: gridColumns;
    }
    
    export interface FlexProps extends HTMLAttributes<HTMLDivElement> {
      direction?: "row" | "column" | "row-reverse" | "column-reverse";
      tabletDirection?: "row" | "column" | "row-reverse" | "column-reverse";
      mobileDirection?: "row" | "column" | "row-reverse" | "column-reverse";
      horizontal?:
        | "start"
        | "center"
        | "end"
        | "space-between"
        | "space-around"
        | "space-evenly"
        | "stretch";
      vertical?:
        | "start"
        | "center"
        | "end"
        | "space-between"
        | "space-around"
        | "space-evenly"
        | "stretch";
      center?: boolean;
      wrap?: boolean;
      flex?: flex;
    }
    
    export interface TextProps<T extends ElementType = "span"> extends HTMLAttributes<T> {
      as?: T;
      variant?: TextVariant;
      wrap?: CSSProperties["textWrap"];
      size?: TextSize;
      weight?: TextWeight;
    }
    
    export interface SizeProps extends HTMLAttributes<HTMLDivElement> {
      width?: number | SpacingToken;
      height?: number | SpacingToken;
      maxWidth?: number | SpacingToken;
      minWidth?: number | SpacingToken;
      minHeight?: number | SpacingToken;
      maxHeight?: number | SpacingToken;
      fit?: boolean;
      fitWidth?: boolean;
      fitHeight?: boolean;
      fill?: boolean;
      fillWidth?: boolean;
      fillHeight?: boolean;
      aspectRatio?: CSSProperties["aspectRatio"];
    }
    
    export interface SpacingProps extends HTMLAttributes<HTMLDivElement> {
      padding?: SpacingToken;
      paddingLeft?: SpacingToken;
      paddingRight?: SpacingToken;
      paddingTop?: SpacingToken;
      paddingBottom?: SpacingToken;
      paddingX?: SpacingToken;
      paddingY?: SpacingToken;
      margin?: SpacingToken;
      marginLeft?: SpacingToken;
      marginRight?: SpacingToken;
      marginTop?: SpacingToken;
      marginBottom?: SpacingToken;
      marginX?: SpacingToken;
      marginY?: SpacingToken;
      gap?: SpacingToken | "-1";
      top?: SpacingToken;
      right?: SpacingToken;
      bottom?: SpacingToken;
      left?: SpacingToken;
    }
    
    export interface StyleProps extends HTMLAttributes<HTMLDivElement> {
      textVariant?: TextVariant;
      textSize?: TextSize;
      textType?: TextType;
      textWeight?: TextWeight;
      background?:
        | `${ColorScheme}-${ColorWeight}`
        | `${ColorScheme}-alpha-${ColorWeight}`
        | "surface"
        | "overlay"
        | "page"
        | "transparent";
      solid?: `${ColorScheme}-${ColorWeight}`;
      borderTop?:
        | `${ColorScheme}-${ColorWeight}`
        | `${ColorScheme}-alpha-${ColorWeight}`
        | "surface"
        | "transparent";
      borderRight?:
        | `${ColorScheme}-${ColorWeight}`
        | `${ColorScheme}-alpha-${ColorWeight}`
        | "surface"
        | "transparent";
      borderBottom?:
        | `${ColorScheme}-${ColorWeight}`
        | `${ColorScheme}-alpha-${ColorWeight}`
        | "surface"
        | "transparent";
      borderLeft?:
        | `${ColorScheme}-${ColorWeight}`
        | `${ColorScheme}-alpha-${ColorWeight}`
        | "surface"
        | "transparent";
      border?:
        | `${ColorScheme}-${ColorWeight}`
        | `${ColorScheme}-alpha-${ColorWeight}`
        | "surface"
        | "transparent";
      borderStyle?: "solid" | "dashed";
      borderWidth?: 1 | 2;
      topRadius?: RadiusSize;
      rightRadius?: RadiusSize;
      bottomRadius?: RadiusSize;
      leftRadius?: RadiusSize;
      topLeftRadius?: RadiusSize;
      topRightRadius?: RadiusSize;
      bottomLeftRadius?: RadiusSize;
      bottomRightRadius?: RadiusSize;
      radius?: RadiusSize | `${RadiusSize}-${RadiusNest}`;
      shadow?: ShadowSize;
      cursor?: CSSProperties["cursor"] | "interactive";
    }
    
    export interface ConditionalProps extends HTMLAttributes<HTMLDivElement> {
      hide?: "s" | "m" | "l";
      show?: "s" | "m" | "l";
    }
    
    export interface DisplayProps extends HTMLAttributes<HTMLDivElement> {
      as?: ElementType;
      inline?: boolean;
      pointerEvents?: "none" | "all" | "auto";
      position?: CSSProperties["position"];
      overflow?: CSSProperties["overflow"];
      overflowX?: CSSProperties["overflowX"];
      overflowY?: CSSProperties["overflowY"];
      transition?:
        | "micro-short"
        | "micro-medium"
        | "micro-long"
        | "macro-short"
        | "macro-medium"
        | "macro-long";
        opacity?: opacity;
      zIndex?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
      dark?: boolean;
      light?: boolean;
    }
    
    export interface CommonProps extends HTMLAttributes<HTMLDivElement> {
      onBackground?: `${ColorScheme}-${ColorWeight}`;
      onSolid?: `${ColorScheme}-${ColorWeight}`;
      align?: CSSProperties["textAlign"];
      className?: string;
      children?: ReactNode;
      style?: React.CSSProperties;
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/once-ui/types.ts
    ```ts
    export type StaticSpacingToken =
      | "0"
      | "1"
      | "2"
      | "4"
      | "8"
      | "12"
      | "16"
      | "20"
      | "24"
      | "32"
      | "40"
      | "48"
      | "56"
      | "64"
      | "80"
      | "104"
      | "128"
      | "160";
    
    export type Schemes =
      | "blue"
      | "indigo"
      | "violet"
      | "magenta"
      | "pink"
      | "red"
      | "orange"
      | "yellow"
      | "moss"
      | "green"
      | "emerald"
      | "aqua"
      | "cyan";
    
    export type TShirtSizes = "xs" | "s" | "m" | "l" | "xl";
    
    export type ResponsiveSpacingToken = TShirtSizes;
    
    export type ShadowSize = TShirtSizes;
    
    export type SpacingToken = StaticSpacingToken | ResponsiveSpacingToken;
    
    export type opacity = 0 | 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | 100;
    
    export type ColorScheme =
      | "neutral"
      | "brand"
      | "accent"
      | "info"
      | "danger"
      | "warning"
      | "success";
    
    export type ColorCategory = "on-solid" | "on-background";
    
    export type ColorWeight = "weak" | "medium" | "strong";
    
    export type RadiusSize = TShirtSizes | "full";
    
    export type RadiusNest = "4" | "8";
    
    export type TextType = "body" | "heading" | "display" | "label" | "code";
    
    export type TextWeight = "default" | "strong";
    
    export type TextSize = TShirtSizes;
    
    export type TextVariant = `${TextType}-${TextWeight}-${TextSize}`;
    
    export type gridColumns =
      | "1"
      | "2"
      | "3"
      | "4"
      | "5"
      | "6"
      | "7"
      | "8"
      | "9"
      | "10"
      | "11"
      | "12"
      | 1
      | 2
      | 3
      | 4
      | 5
      | 6
      | 7
      | 8
      | 9
      | 10
      | 11
      | 12;
    
    export type flex =
      | "0"
      | "1"
      | "2"
      | "3"
      | "4"
      | "5"
      | "6"
      | "7"
      | "8"
      | "9"
      | "10"
      | "11"
      | "12"
      | 0
      | 1
      | 2
      | 3
      | 4
      | 5
      | 6
      | 7
      | 8
      | 9
      | 10
      | 11
      | 12;
    
    ```
    
    File: /Users/ttran/hookgen/.env.example
    ```example
    # This file is a placeholder for environment variables required to run this project.
    # Currently, there are no environment variables needed.
    
    # Example of what future variables might look like:
    # NEXT_PUBLIC_API_KEY=your_api_key_here
    # DATABASE_URL=your_database_url_here
    # SECRET_KEY=your_secret_key_here
    ```
    
    File: /Users/ttran/hookgen/.eslintrc.json
    ```json
    {
      "extends": "next/core-web-vitals"
    }
    
    ```
    
    File: /Users/ttran/hookgen/biome.json
    ```json
    {
      "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
      "vcs": {
        "enabled": false,
        "clientKind": "git",
        "useIgnoreFile": false
      },
      "files": {
        "ignoreUnknown": false,
        "ignore": []
      },
      "formatter": {
        "enabled": true,
        "indentStyle": "space",
        "indentWidth": 2,
        "lineWidth": 100
      },
      "organizeImports": {
        "enabled": true
      },
      "linter": {
        "enabled": true,
        "rules": { "recommended": true }
      },
      "javascript": {
        "formatter": {
          "quoteStyle": "double"
        }
      }
    }
    
    ```
    
    File: /Users/ttran/hookgen/hookgen-impl-plan.md
    ```md
    # Implementation Plan
    
    ## Setup & Configuration
    
    - [ ] Step 1: Initialize Project & Dependencies
      - **Task**: Ensure the Next.js project is set up based on the starter template. Install necessary dependencies.
      - **Files**:
        - `package.json`: Verify `next`, `react`, `react-dom`, `typescript`, `tailwindcss` are present. Add `openai`, `classnames`.
      - **Step Dependencies**: None.
      - **User Instructions**: Run `npm install` (or `yarn install`) in the `frontend` directory.
    
    - [ ] Step 2: Configure Tailwind CSS & Shadcn UI
      - **Task**: Initialize Shadcn UI which will configure Tailwind CSS and CSS variables based on Radix Colors. Set up the default theme (dark) and primary/accent colors (blue/indigo) as per `config.js` (or Shadcn defaults).
      - **Files**:
        - `tailwind.config.ts`: Configure Tailwind according to Shadcn UI documentation.
        - `styles/globals.css`: Ensure Tailwind base styles and Shadcn CSS variables are imported/defined.
        - `components.json`: Created by Shadcn init.
      - **Step Dependencies**: Step 1.
      - **User Instructions**: Run `npx shadcn-ui@latest init` in the `frontend` directory. Follow the prompts, selecting default options (e.g., `Default` style, `Slate` or `Gray` neutral color, `CSS Variables: yes`).
    
    - [ ] Step 3: Set Up Environment Variables
      - **Task**: Create the `.env.local` file and add the placeholder for the OpenAI API key. Add `.env.local` to `.gitignore` if not already present.
      - **Files**:
        - `.env.local`: Add `OPENAI_API_KEY=your_openai_api_key_here`.
        - `.gitignore`: Ensure `.env.local` is listed.
      - **Step Dependencies**: None.
      - **User Instructions**: Replace `your_openai_api_key_here` in `.env.local` with your actual OpenAI API key.
    
    ## Backend Development (API Route & Libs)
    
    - [ ] Step 4: Define API Types
      - **Task**: Create shared TypeScript interfaces for the API request body and success/error responses.
      - **Files**:
        - `types/index.ts`: Define `HypeGenRequest`, `HypeGenData`, `HypeGenResponse`, `HypeGenErrorResponse` interfaces as specified in the technical specification.
      - **Step Dependencies**: None.
    
    - [ ] Step 5: Create API Route Structure
      - **Task**: Create the basic file structure and boilerplate for the `/api/generate` API route. Include basic request parsing and validation for required fields.
      - **Files**:
        - `app/api/generate/route.ts`: Create the file. Import `NextRequest`, `NextResponse`. Export async `POST` function. Add initial JSON body parsing (`await request.json()`) within a try-catch block. Add checks for `topic` and `highlight` presence. Return 400 error if invalid.
      - **Step Dependencies**: Step 4.
    
    - [ ] Step 6: Implement OpenAI Client Utility
      - **Task**: Create a utility function to initialize and return the OpenAI client, reading the API key from environment variables.
      - **Files**:
        - `lib/openai.ts`: Create the file. Import `OpenAI` from `openai`. Create a function `getOpenAIClient()` that initializes the client using `process.env.OPENAI_API_KEY` and returns it. Include error handling if the key is missing.
      - **Step Dependencies**: Step 1, Step 3.
    
    - [ ] Step 7: Implement Prompt Generation Utilities
      - **Task**: Create functions in `lib/prompts.ts` to generate the specific LLM message arrays for each platform (Twitter, YouTube Description, Short-form Hook) based on the `HypeGenRequest` data. Ensure prompts request 2 variations, JSON array output, tone, emojis, hashtags, and length constraints.
      - **Files**:
        - `lib/prompts.ts`: Create file. Import `HypeGenRequest` from `types`. Define functions like `generateTwitterPromptMessages(data: HypeGenRequest): Array<any>`, `generateYoutubePromptMessages(...)`, `generateShortsPromptMessages(...)`. Implement the detailed prompt structures as outlined in the technical specification.
      - **Step Dependencies**: Step 4.
    
    - [ ] Step 8: Implement Core API Generation Logic
      - **Task**: Integrate the OpenAI client and prompt utilities into the API route. Make parallel calls to the OpenAI API for each platform. Handle responses and basic error handling.
      - **Files**:
        - `app/api/generate/route.ts`: Import `getOpenAIClient` and prompt functions. Inside the `POST` function (after validation):
          - Get the OpenAI client.
          - Generate prompts for all platforms.
          - Use `Promise.all` to call `openai.chat.completions.create` for each prompt (using `gpt-4o` or `gpt-3.5-turbo`).
          - Wrap the `Promise.all` in a `try...catch` block.
          - *Initial Parsing (Simplified for now)*: For this step, just log the raw content of the first choice's message for each platform. Return a placeholder success response.
          - Implement basic error handling: If `Promise.all` fails or OpenAI client error, return a 500 error response (`{ success: false, error: 'AI generation failed.' }`).
      - **Step Dependencies**: Step 5, Step 6, Step 7.
    
    - [ ] Step 9: Implement API Response Parsing & Formatting
      - **Task**: Refine the API route to safely parse the expected JSON array format from the LLM responses for each platform. Validate the structure (array of 2 strings). Construct the final success response object or return a specific error if parsing/validation fails.
      - **Files**:
        - `app/api/generate/route.ts`: Modify the `try` block after `Promise.all`:
          - Use `JSON.parse()` on `response.choices[0]?.message?.content` for each platform's result, wrapped in individual `try...catch` blocks or a robust parsing utility.
          - Validate that the parsed result is an array of two strings. If not, throw or handle the error (e.g., return 500 with "Invalid format from AI").
          - Construct the `HypeGenData` object.
          - Return `NextResponse.json({ success: true, data: responseData })`.
          - Refine the main `catch` block to differentiate parsing errors from API errors if possible.
      - **Step Dependencies**: Step 8.
    
    ## Frontend Development (UI & Logic)
    
    - [ ] Step 10: Install Shadcn UI Components
      - **Task**: Install the specific Shadcn UI components required for the form and results display.
      - **Files**: None (modifies `components/ui/`).
      - **Step Dependencies**: Step 2.
      - **User Instructions**: Run the following commands in the `frontend` directory:
        - `npx shadcn-ui@latest add button`
        - `npx shadcn-ui@latest add input`
        - `npx shadcn-ui@latest add textarea`
        - `npx shadcn-ui@latest add select`
        - `npx shadcn-ui@latest add card`
        - `npx shadcn-ui@latest add tabs`
        - `npx shadcn-ui@latest add progress`
        - `npx shadcn-ui@latest add alert`
        - `npx shadcn-ui@latest add label` (dependency for some components)
        - `npx shadcn-ui@latest add icons` (if not already added by others, for copy/check icons)
    
    - [ ] Step 11: Scaffold Main Client Component (`HypeGenForm`)
      - **Task**: Create the main client component file, mark it with `'use client'`, and set up the basic structure and state hooks.
      - **Files**:
        - `components/hypegen/HypeGenForm.tsx`: Create the file. Add `'use client'`. Import `useState`. Define the component structure. Add `useState` hooks for `contentType`, `topic`, `highlight`, `vibe`, `isLoading`, `apiResponse`, `error`.
      - **Step Dependencies**: Step 4.
    
    - [ ] Step 12: Build Input Form UI
      - **Task**: Implement the form UI within `HypeGenForm.tsx` using the installed Shadcn components (`Select`, `Input`, `Textarea`, `Button`). Connect them to the state variables via `value` and `onChange` / `onValueChange` props.
      - **Files**:
        - `components/hypegen/HypeGenForm.tsx`: Add JSX for the form elements. Use `SelectTrigger`, `SelectContent`, `SelectItem` for dropdowns. Use `Label` where appropriate. Add basic Tailwind classes for layout (e.g., `flex flex-col gap-4`).
      - **Step Dependencies**: Step 10, Step 11.
    
    - [ ] Step 13: Implement Form Submission Logic
      - **Task**: Implement the `handleSubmit` function in `HypeGenForm.tsx` to perform client-side validation, set loading state, and make the `fetch` call to the `/api/generate` endpoint. Handle the response to update `apiResponse` or `error` state.
      - **Files**:
        - `components/hypegen/HypeGenForm.tsx`: Implement the `handleSubmit` function as described in the technical spec (section 3.1). Attach it to the Generate button's `onClick`. Disable the button when `isLoading` is true.
      - **Step Dependencies**: Step 9, Step 12.
    
    - [ ] Step 14: Implement Loading and Error States UI
      - **Task**: Add conditional rendering in `HypeGenForm.tsx` to display a loading indicator (e.g., Shadcn `Progress`) when `isLoading` is true, and an error message (Shadcn `Alert` with `variant="destructive"`) when `error` is not null.
      - **Files**:
        - `components/hypegen/HypeGenForm.tsx`: Add JSX for `Progress` and `Alert` components, conditionally rendered based on `isLoading` and `error` state.
      - **Step Dependencies**: Step 10, Step 13.
    
    - [ ] Step 15: Scaffold Result Card Component (`ResultCard`)
      - **Task**: Create the `ResultCard.tsx` component structure, mark it with `'use client'`, and define its props interface.
      - **Files**:
        - `components/hypegen/ResultCard.tsx`: Create the file. Add `'use client'`. Define `ResultCardProps` interface (`platformName: string`, `variations: [string, string]`). Set up basic component structure using Shadcn `Card`.
      - **Step Dependencies**: Step 10.
    
    - [ ] Step 16: Implement Result Card UI (Variations with Tabs)
      - **Task**: Build the UI inside `ResultCard.tsx` to display the platform name and the two text variations using Shadcn `Tabs`.
      - **Files**:
        - `components/hypegen/ResultCard.tsx`: Import and use `CardHeader`, `CardTitle`, `CardContent`, `Tabs`, `TabsList`, `TabsTrigger`, `TabsContent`. Map `variations` prop to display text in `TabsContent`.
      - **Step Dependencies**: Step 15.
    
    - [ ] Step 17: Implement Results Display in Main Form
      - **Task**: In `HypeGenForm.tsx`, conditionally render the results section. If `apiResponse` has data, map over the platforms and render a `ResultCard` for each, passing the necessary props.
      - **Files**:
        - `components/hypegen/HypeGenForm.tsx`: Add conditional rendering logic (`apiResponse && apiResponse.success && !isLoading && !error`). Map `Object.entries(apiResponse.data)` to render `ResultCard` components. Pass `platformName` (e.g., format the key like "YouTube Description") and `variations` array.
      - **Step Dependencies**: Step 13, Step 16.
    
    - [ ] Step 18: Implement Twitter Character Count
      - **Task**: In `ResultCard.tsx`, add logic to display the character count dynamically below each Twitter variation. Style count appropriately (e.g., red if > 280).
      - **Files**:
        - `components/hypegen/ResultCard.tsx`: Inside the Twitter `TabsContent`, add a `<span>` or `p` tag. Calculate `variation.length`. Display `${variation.length} / 280`. Use Tailwind class `text-destructive-foreground` (or similar based on theme) conditionally if `length > 280`.
      - **Step Dependencies**: Step 16.
    
    - [ ] Step 19: Implement Copy-to-Clipboard Functionality
      - **Task**: Add a "Copy" button to each variation in `ResultCard.tsx`. Implement the `navigator.clipboard.writeText` logic and provide simple visual feedback on success.
      - **Files**:
        - `components/hypegen/ResultCard.tsx`: Add an icon-only Shadcn `Button` inside each `TabsContent`. Add an `onClick` handler that calls `navigator.clipboard.writeText(variationText)`. Add `useState` for `isCopied` feedback (e.g., change button icon to `Check` for 1-2 seconds). Handle potential clipboard errors gracefully (e.g., `console.error`).
      - **Step Dependencies**: Step 16.
    
    - [ ] Step 20: Final UI Polish & Responsiveness
      - **Task**: Review the entire UI for consistency, spacing, alignment, and responsiveness based on the Polish Requirements Checklist. Apply necessary Tailwind classes. Ensure no console errors.
      - **Files**:
        - `components/hypegen/HypeGenForm.tsx`
        - `components/hypegen/ResultCard.tsx`
        - `app/page.tsx` (if layout adjustments needed)
        - `styles/globals.css` (if minor global tweaks needed)
      - **Step Dependencies**: All previous UI steps.
    
    ## Deployment (Optional)
    
    - [ ] Step 21: Prepare for Deployment
      - **Task**: Ensure all necessary environment variables are set up in the deployment environment (e.g., Vercel). Verify build process works locally.
      - **Files**: `.env.local` (reference), Vercel project settings.
      - **Step Dependencies**: All previous steps.
      - **User Instructions**: Add `OPENAI_API_KEY` as an environment variable in your Vercel project settings.
    
    - [ ] Step 22: Deploy to Vercel
      - **Task**: Deploy the application using the Vercel CLI or Git integration.
      - **Files**: None (deployment process).
      - **Step Dependencies**: Step 21.
      - **User Instructions**: Push code to GitHub/GitLab/Bitbucket repository connected to Vercel, or run `vercel deploy` from the `frontend` directory.
    
    ```
    
    File: /Users/ttran/hookgen/hookgen-prd.md
    ```md
    **Hackathon Project Specification: Social Media Promo Pack Generator**
    
    * **Project Title:** Social Media Promo Pack Generator
    * **Version:** 1.0
    * **Date:** May 21, 2024
    * **Goal:** Create a polished, complete MVP web application within the 1-day hackathon timeframe that helps content creators generate tailored promotional text snippets for multiple social media platforms based on their content details. The project aims to be a strong contender by excelling in Completeness, Polish, Build Quality, and Relevance, with potential for future startup development.
    
    **1. Overview & Problem Statement**
    
    Content creators (streamers, YouTubers, podcasters) spend significant time crafting promotional text for different platforms to maximize reach and engagement for each piece of content. This repetitive task requires adapting the message, tone, and format (length, hashtags, emojis) for platforms like Twitter, YouTube, TikTok, etc.
    
    This tool aims to automate the initial draft generation, providing creators with platform-optimized promotional text snippets instantly, saving them time and ensuring consistency.
    
    **2. Target Audience**
    
    * Video Game Streamers
    * YouTube Content Creators
    * Podcasters
    * Any media creator who promotes their content on multiple social platforms.
    
    **3. Core MVP Functionality**
    
    The application will provide a simple web interface for users to input content details and receive generated promotional text.
    
    * **3.1. Frontend (React)**
      * **Input Form:**
        * `Content Type`: Dropdown selector (e.g., "Stream VOD", "YouTube Video", "Podcast Episode").
        * `Main Topic / Title`: Text input field (required).
        * `Key Highlight / Hook`: Text area field (required). Briefly describe the most engaging part.
        * `Target Vibe / Tone`: Dropdown selector (e.g., "Excited", "Funny", "Informative", "Intriguing", "Urgent") (required, default provided).
        * Submit Button.
      * **Output Display:**
        * Display a clear loading indicator (potentially thematic/animated) while waiting for backend processing.
        * Once results are received, display generated text snippets in clearly separated sections/cards for each target platform:
          * **Twitter:** Display **two** generated tweet variations. Include relevant **emojis** based on vibe and **hashtags**. Show dynamic character count for each variation (<280).
          * **YouTube/Twitch Description:** Display **two** generated short description paragraph variations (~50-100 words).
          * **Short-form Video Hook (TikTok/Shorts/Reels):** Display **two** generated catchy hook/caption variations. Include relevant **emojis** and potential **hashtags**.
        * Each generated snippet variation MUST have a working "Copy to Clipboard" button.
        * Gracefully display error messages if the backend fails.
    
    * **3.2. Backend (Python - Flask/FastAPI)**
      * **API Endpoint:** One endpoint to receive POST requests with form data (content type, topic, highlight, vibe).
      * **LLM Integration:**
        * Use an environment variable for the LLM API Key (e.g., OpenAI).
        * **Prompt Engineering:** Construct specific prompts for the chosen LLM (e.g., GPT-3.5-Turbo, GPT-4o):
          * Craft distinct prompts for *each* target platform (Twitter, YT Description, Short-form Hook).
          * Each prompt must explicitly request **two** distinct variations.
          * Prompts should instruct the LLM to incorporate the `Target Vibe`, use relevant **emojis** appropriately, and generate relevant **hashtags** (especially for Twitter/Shorts).
          * Prompts must specify desired output format and length constraints (e.g., Twitter <280 chars).
        * Execute LLM API calls for each platform's prompt.
      * **Response Handling:** Parse the LLM responses, extracting the two variations for each platform. Handle potential API errors.
      * **Return Value:** Send a JSON response containing the generated text variations structured by platform (e.g., `{"twitter": ["variation1", "variation2"], "youtubeDescription": [...], "shortFormHook": [...]}`).
    
    **4. Key Features & "Wow" Factors (MVP Focus)**
    
    * **Core Value:** Generate tailored social media promotional text from simple inputs.
    * **Multiple Variations:** Provides 2 distinct options per platform, enhancing usability (**Wow Factor 1**).
    * **Platform Optimization:** Text includes relevant emojis and hashtags tailored to the platform & vibe (**Wow Factor 2**).
    * **High Polish Interface:** Clean, intuitive UI, smooth transitions, clear loading state, visual feedback (character counts), reliable copy functionality (**Wow Factor 3 / Judging Criteria**).
    * **Completeness:** Fully functional end-to-end flow from input to usable, multi-variation output.
    
    **5. Technology Stack**
    
    * **Frontend:** React (potentially with Create React App, Vite, or Next.js), basic CSS / CSS Framework (e.g., Tailwind CSS for speed if proficient).
    * **Backend:** Python (Flask or FastAPI).
    * **AI:** Third-party LLM API (e.g., OpenAI API using GPT-3.5-Turbo for speed/cost or GPT-4o if affordable/needed).
    * **Deployment (Optional for Hackathon):** If time allows, a simple static deployment (e.g., Vercel, Netlify) for the frontend and a basic PaaS (e.g., Fly.io, Railway, Heroku) for the backend. *Focus on local demo readiness first.*
    
    **6. Judging Criteria Alignment**
    
    * **🚀 Completeness:** Deliver the full input-to-multi-variation-output flow described in Section 3. Working demo is paramount.
    * **🖥 Polish:** Achieve the requirements in Section 4 (High Polish Interface). No bugs in the core flow, visually clean, smooth UX, working copy buttons, character counts.
    * **🛠 Build Quality:** Reasonably clean, organized code. Functional API endpoint with basic error handling. Environment variables for secrets.
    * **🎮 Relevance:** Directly addresses the Media/Gaming theme by providing a tool for Content Creators.
    
    **7. Polish Requirements Checklist (Must-Haves)**
    
    * [ ] Consistent visual design (spacing, typography, colors).
    * [ ] Clear Input form with labels and appropriate input types.
    * [ ] Visible and informative loading state during generation.
    * [ ] Clearly structured output sections per platform.
    * [ ] Display of *two* variations per platform.
    * [ ] Working "Copy to Clipboard" for *each* variation.
    * [ ] Character count display (dynamic) for Twitter variations.
    * [ ] Graceful error handling display (e.g., "Generation failed, please try again").
    * [ ] Responsive layout (usable on typical laptop screen).
    * [ ] No console errors in the browser during normal operation.
    
    **8. Stretch Goals (If Core MVP is 100% complete & polished)**
    
    1. **Brand Voice Hint Input:** Add the optional text area for pasting a writing sample to slightly influence the LLM's tone (low risk addition).
    2. **Add Discord Output:** Include generation for a Discord announcement snippet (requires new prompt and UI section).
    3. **Refinement Feature (High Risk):** Add a single "Regenerate" button per platform (not per variation) to get two new options if the first set wasn't good.
    
    **9. Out of Scope for Hackathon MVP**
    
    * User accounts or authentication.
    * Saving history of generated content.
    * Direct integration with social media platforms (posting).
    * Image or thumbnail generation/suggestions.
    * Analytics or performance tracking.
    * Advanced prompt customization by the user.
    * Billing or complex API key management for users.
    
    **10. Demo Flow Outline (2-3 minutes)**
    
    1. (5s) Briefly state the problem: Creators waste time writing promo text.
    2. (10s) Introduce the solution: Social Media Promo Pack Generator - instant, tailored snippets.
    3. (30s) Show the clean input form, quickly fill it out with a relatable example (e.g., a game stream highlight). Select a Vibe.
    4. (10s) Hit Submit, point out the loading indicator.
    5. (45s) Showcase the results: Show the generated variations for Twitter (mention emojis, hashtags, char count), YouTube Desc, and Short-form Hook. Highlight the two options per platform.
    6. (10s) Demonstrate the "Copy to Clipboard" functionality working for one snippet.
    7. (10s) Briefly mention the Tech Stack (Python, React, AI API) and the startup potential (more platforms, scheduling, etc.).
    8. (Optional - 5s) If a stretch goal was implemented, briefly show it.
    
    ```
    
    File: /Users/ttran/hookgen/LICENSE
    ```LICENSE
    MIT License
    
    Copyright (c) 2024-2025 Once UI
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    
    ```
    
    File: /Users/ttran/hookgen/next.config.mjs
    ```mjs
    /** @type {import('next').NextConfig} */
    const nextConfig = {
      sassOptions: {
        compiler: "modern",
        silenceDeprecations: ["legacy-js-api"],
      },
    };
    
    export default nextConfig;
    
    ```
    
    File: /Users/ttran/hookgen/package.json
    ```json
    {
      "name": "@once-ui-system/nextjs-starter",
      "version": "0.6",
      "scripts": {
        "dev": "next dev --turbopack",
        "export": "next export",
        "build": "next build",
        "start": "next start",
        "biome-write": "npx @biomejs/biome format --write .",
        "lint": "next lint"
      },
      "dependencies": {
        "@floating-ui/react-dom": "^2.1.1",
        "classnames": "^2.5.1",
        "compressorjs": "^1.2.1",
        "next": "15.2.3",
        "postcss": "^8.4.39",
        "postcss-preset-env": "^9.5.15",
        "prismjs": "^1.29.0",
        "react": "19.0.0",
        "react-dom": "19.0.0",
        "react-icons": "^5.2.1",
        "sass": "^1.77.6",
        "sharp": "^0.33.4"
      },
      "devDependencies": {
        "@biomejs/biome": "1.9.4",
        "@csstools/postcss-global-data": "^2.1.1",
        "@types/node": "20.17.23",
        "@types/react": "19.0.1",
        "@types/react-dom": "19.0.2",
        "postcss-custom-media": "^10.0.7",
        "postcss-flexbugs-fixes": "^5.0.2",
        "typescript": "5.8.2"
      },
      "overrides": {
        "@types/react": "19.0.1",
        "@types/react-dom": "19.0.2"
      }
    }
    
    ```
    
    File: /Users/ttran/hookgen/README.md
    ```md
    # Once UI for Next.js
    
    A design system for indie builders who move fast and break limits without neglecting quality.
    
    
    ![Once UI](public/images/og/home.jpg)
    
    # Features
    
    Start building your Next.js app in minutes with: 
    * **A robust token and style system** that simplifies customization and ensures consistency. 
    * **A copy-and-paste component library** that integrates seamlessly into your project.
    * **Interactive documentation** to apply your branding and set component properties.
    
    # Demo
    [demo.once-ui.com](https://demo.once-ui.com)
    
    ![Once UI](public/images/demo.png)
    
    # Getting started
    Clone the starter template from GitHub.
    ```bash
    git clone https://github.com/once-ui-system/nextjs-starter.git
    ```
    
    You can also deploy it directly to Vercel.
    
    [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fonce-ui-system%2Fnextjs-starter&redirect-url=https%3A%2F%2Fonce-ui.com%2Fdocs%2F)
    
    
    View the step-by-step guide at [once-ui.com/docs](https://once-ui.com/docs).
    
    # Documentation
    [once-ui.com/docs](https://once-ui.com/docs)
    
    # Authors
    Connect with us!
    
    Lorant One: [Site](https://lorant.one), [Threads](https://www.threads.net/@lorant.one), [LinkedIn](https://www.linkedin.com/in/lorant-one/)  
    Zsofia Komaromi: [Site](https://zsofia.pro), [Threads](https://www.threads.net/@zsofia_kom), [LinkedIn](https://www.linkedin.com/in/zsofiakomaromi/)
    
    # Get involved
    - Join the [Design Engineers Club](https://discord.com/invite/5EyAQ4eNdS) on Discord to connect with designers, developers and share your projects.
    - Report a [bug](https://github.com/once-ui-system/nextjs-starter/issues/new?labels=bug&template=bug_report.md).
    - Submit a [feature request](https://github.com/once-ui-system/nextjs-starter/issues/new?labels=feature%20request&template=feature_request.md).
    
    # License
    
    Distributed under the MIT License. See `LICENSE.txt` for more information.
    
    # Sponsors
    
    [github.com/sponsors/once-ui-system](https://github.com/sponsors/once-ui-system)
    
    Become a sponsor and help us continue to develop and maintain this project.
    
    # Once UI for Figma
    
    Once UI is also available for Figma.  
    Design and prototype entire products from scratch in hours. Use the same tokens and components as the Next.js design system.
    
    Start designing: [once-ui.com/figma](https://once-ui.com/figma)
    
    # Once UI Pro
    
    Take your project further with Once UI Pro. Get access to complete templates, fully designed pages, and modular blocks that make building apps even faster.
    
    Explore Pro: [once-ui.com/pro](https://once-ui.com/pro)
    ```
    
    File: /Users/ttran/hookgen/postcss.config.js
    ```js
    module.exports = {
      plugins: [
        [
          "@csstools/postcss-global-data",
          {
            files: ["src/once-ui/styles/breakpoints.scss"],
          },
        ],
        "postcss-custom-media",
        "postcss-flexbugs-fixes",
        [
          "postcss-preset-env",
          {
            autoprefixer: {
              flexbox: "no-2009",
            },
            stage: 3,
            features: {
              "custom-properties": false,
            },
          },
        ],
      ],
    };
    
    ```
    
    File: /Users/ttran/hookgen/hookgen-tech-spec.md
    ```md
    **1. Core System Architecture and Key Workflows**
    
    * **Architecture:** Serverless Next.js application deployed on Vercel (ideal for hackathons).
      * **Frontend:** React components using Next.js App Router (primarily Server Components where possible, with Client Components for interactivity). UI built with Shadcn UI, Radix UI primitives, and Tailwind CSS for styling.
      * **Backend:** Next.js API Route (Node.js) handling the generation logic. Alternatively, could use a Server Action, but an API route provides a clearer separation for this type of task and simplifies frontend calls during the hackathon.
      * **AI Integration:** Backend API route interfaces with OpenAI API (specifically a chat completion model like GPT-3.5-Turbo or GPT-4o).
    * **Key Workflow:**
        1. User lands on the main page (`app/page.tsx`).
        2. User interacts with the input form (Client Component).
        3. User provides: Content Type (select), Topic (input), Highlight (textarea), Vibe (select).
        4. User clicks "Generate".
        5. Frontend (Client Component) triggers an asynchronous POST request to the backend API endpoint (`/api/generate`). A loading state is displayed.
        6. Backend API Route receives the data, validates it (basic required fields).
        7. Backend constructs specific prompts for each platform (Twitter, YouTube, Shorts) based on input, requesting 2 variations, emojis, and hashtags.
        8. Backend makes calls to OpenAI API.
        9. Backend processes OpenAI responses, structuring them into a JSON object.
        10. Backend sends JSON response (success or error) back to the frontend.
        11. Frontend receives the response.
        12. If successful, hides loading state, displays the generated variations in separate sections (using Cards/Tabs), enables copy buttons, calculates Twitter char counts.
        13. If error, hides loading state, displays an error message (e.g., Shadcn Alert).
    
    **2. Project Structure and Organization**
    
    * Adhere to Next.js App Router conventions.
    * `frontend/`
      * `app/`
        * `layout.tsx`: Root layout (potentially server component).
        * `page.tsx`: Main page (server component, rendering the primary client component).
        * `api/`
          * `generate/`
            * `route.ts`: Backend API endpoint logic (Node.js).
      * `components/`
        * `ui/`: Shadcn UI generated components (Button, Input, Textarea, Select, Card, Tabs, etc.).
        * `hypegen/` (or similar project-specific name)
          * `HypeGenForm.tsx`: Main client component containing the form and result display logic (`'use client'`).
          * `ResultCard.tsx`: Component to display results for a single platform (includes Tabs for variations, copy button).
      * `lib/`
        * `openai.ts`: Utility functions for interacting with the OpenAI API (constructing client, making calls).
        * `prompts.ts`: Contains functions to generate the specific prompts for the LLM based on user input.
        * `utils.ts`: General utility functions (e.g., clipboard copy helper if needed, though often handled inline).
      * `public/`: Static assets (images, icons if not using react-icons directly via Shadcn).
      * `types/`: Shared TypeScript interfaces (e.g., API request/response types).
      * `styles/`: Global styles (Tailwind base, global overrides).
      * `.env.local`: For storing OpenAI API key.
    
    **3. Detailed Feature Specifications**
    
    * **3.1 Input Form (`HypeGenForm.tsx` - Client Component):**
      * Uses Shadcn `Select` for Content Type (Stream VOD, YT Video, Podcast) and Vibe (Excited, Funny, etc.).
      * Uses Shadcn `Input` for Topic (required).
      * Uses Shadcn `Textarea` for Key Highlight (required).
      * Uses Shadcn `Button` for "Generate" action.
      * Basic client-side validation for required fields before submitting.
      * Manages local state for form inputs using `useState`.
      * Manages loading state (`useState<boolean>`) toggled during API call.
      * Manages API result state (`useState<ApiResponse | null>`) and error state (`useState<string | null>`).
      * Submit handler:
        * Prevents default form submission.
        * Sets loading state to true, clears previous results/errors.
        * Calls `fetch('/api/generate', { method: 'POST', ... })`.
        * Handles response: updates result state or error state.
        * Sets loading state to false.
    * **3.2 Output Display (`HypeGenForm.tsx` rendering `ResultCard.tsx` - Client Component):**
      * Conditionally renders loading indicator (Shadcn `Progress` or custom spinner) based on loading state.
      * Conditionally renders error message (Shadcn `Alert`) based on error state.
      * If results exist, map over platforms (Twitter, YT, Shorts).
      * For each platform, render a `ResultCard` component.
      * `ResultCard.tsx`:
        * Receives platform name and variations array as props.
        * Uses Shadcn `Card` as the container.
        * Uses Shadcn `Tabs` to display "Variation 1" and "Variation 2".
        * Each Tab content displays the generated text.
        * Include dynamic character count below Twitter variations (`variation.length`).
        * Includes Shadcn `Button` (icon-only) next to each variation for "Copy to Clipboard".
        * Copy logic: `navigator.clipboard.writeText(variationText)`. Provide visual feedback (e.g., changing icon briefly, toast - maybe too much for hackathon).
    * **3.3 API Endpoint (`/api/generate/route.ts` - Server-side):**
      * Exports a `POST` function.
      * Reads request body (use `await request.json()`).
      * Validates input types and presence.
      * Retrieves OpenAI API key from `process.env.OPENAI_API_KEY`. Error if missing.
      * Initializes OpenAI client (from `lib/openai.ts`).
      * Calls prompt generation functions (from `lib/prompts.ts`) for each platform, passing validated user input. Prompts must explicitly ask for 2 distinct variations, tone matching, emoji/hashtag usage, and length limits. Recommend requesting JSON output format if the model supports it reliably.
      * Makes asynchronous calls to OpenAI Chat Completion endpoint (`client.chat.completions.create`). Consider parallelizing these calls if appropriate (`Promise.all`).
      * Parses OpenAI responses. Handles potential errors (API errors, rate limits, content safety).
      * Constructs success JSON response (`{ success: true, data: { twitter: [...], ... } }`) or error JSON (`{ success: false, error: 'message' }`).
      * Returns `NextResponse.json(...)`.
    
    **4. Database Schema Design**
    
    * **Not Applicable** for this MVP. State is transient.
    
    **5. Server Actions and Integrations**
    
    * **OpenAI API Integration:**
      * Endpoint: Chat Completions (`/v1/chat/completions`).
      * Authentication: Bearer token using API Key (`process.env.OPENAI_API_KEY`).
      * Data Format: JSON request/response.
      * Key Libraries: `openai` Node.js package.
      * Prompt Engineering: *Crucial*. Needs careful design in `lib/prompts.ts` to elicit the desired format (2 variations), tone, length, emojis, and hashtags for each platform. Error handling for API failures is important. Specify model (e.g., `gpt-3.5-turbo`, `gpt-4o`).
      * Consider model parameters like `temperature` (for creativity) and `max_tokens`.
    * **No other server actions needed for MVP.**
    
    **6. Design System and Component Architecture**
    
    * **Colors:** Use Tailwind utility classes based on Shadcn's theme setup (likely CSS variables derived from Radix Colors). Primary: `brand` (mapped to `primary` in Shadcn), Secondary: `neutral` (mapped to `secondary`, `muted`, `accent`, `card`, `popover`, `input`, `border` in Shadcn). Semantic colors: `destructive`.
    * **Typography:** Use Geist Sans/Mono as defined in the starter (if Next.js template provides it) or default Tailwind fonts. Apply sizes/weights using Tailwind classes (`text-sm`, `font-bold`, etc.).
    * **Styling:** Primarily Tailwind CSS utility classes. Use `@apply` sparingly if needed. Components sourced from Shadcn UI (`npx shadcn-ui@latest add ...`).
    * **Layout:** Use Flexbox/Grid via Tailwind classes (`flex`, `grid`, `gap-4`, `p-4`, etc.). Mobile-first responsive design (`sm:`, `md:` prefixes).
    * **Core Shadcn Components:** `Button`, `Input`, `Textarea`, `Select`, `Card`, `Tabs`, `Alert`, `Progress`.
    * **Custom Components:** `HypeGenForm`, `ResultCard`.
    
    **7. Authentication and Authorization Implementation**
    
    * **Not Applicable** for MVP. The tool is open access.
    
    **8. Data Flow and State Management**
    
    * **State:** Primarily client-side state within `HypeGenForm.tsx` using `useState` for form inputs, loading status, API results, and error message. No complex global state management needed for MVP. `nuqs` is specified in rules but seems overkill here unless we decide to make the form shareable via URL, which is out of scope.
    * **Data Flow:**
        1. User Input -> `useState` in `HypeGenForm`.
        2. Form Submit -> `fetch` call from `HypeGenForm` to `/api/generate` (POST).
        3. API Route -> Calls OpenAI utility in `lib/openai.ts`.
        4. OpenAI Utility -> Makes external API call to OpenAI.
        5. OpenAI API -> Response to OpenAI Utility.
        6. OpenAI Utility -> Response to API Route.
        7. API Route -> `NextResponse.json()` back to `HypeGenForm`.
        8. `fetch` Response -> Updates `useState` for results/error in `HypeGenForm`.
        9. State Update -> React re-renders UI (results display or error message).
    
    **9. Payment Implementation**
    
    * **Not Applicable.**
    
    **10. Analytics Implementation**
    
    * **Not Applicable** for MVP. (Could add Vercel Analytics later).
    
    **11. Testing Strategy**
    
    * **Not Applicable** for the 1-day hackathon build phase. Manual testing during development is key.
    * *(Post-Hackathon)*: Unit tests (Jest) for API route logic (mocking OpenAI), prompt generation functions. E2E tests (Playwright/Cypress) for the main user workflow (form input -> generation -> display).
    
    **Potential Challenges & Risks:**
    
    * **Prompt Engineering:** Getting consistently good, distinct variations with the right tone/emojis/hashtags from the LLM is the *biggest challenge*. Requires iteration and testing during the hackathon. LLM output format might be inconsistent.
    * **LLM API Latency/Reliability:** OpenAI calls can be slow or occasionally fail. Need good loading states and error handling. Consider shorter timeouts.
    * **API Key Management:** Ensure the key is *not* committed. Use `.env.local`.
    * **UI Polish:** Integrating Shadcn/Tailwind correctly and making it look polished within the time limit requires familiarity.
    * **Scope Creep:** Resisting the urge to add more features (more platforms, saving results, user accounts) is vital for finishing.
    * **Stack Conflict Resolution:** Sticking firmly to the Next.js/Node.js/Shadcn stack dictated by the *rules* despite initial Python preference and template ambiguity.
    
    **Edge Cases:**
    
    * Empty/Invalid user input.
    * OpenAI API errors (network, rate limit, auth, content filtering).
    * OpenAI response parsing errors (if format isn't perfect JSON).
    * Clipboard API not available or denied.
    * Very long user input affecting prompt length limits.
    
    </specification_planning>
    
    ---
    
    ```markdown
    # HypeGen (Social Media Promo Pack Generator) Technical Specification
    
    ## 1. System Overview
    
    *   **Core Purpose:** An MVP web application built for a 1-day hackathon ("Vibe Coding Hackathon: Media & Gaming MVP Edition") designed to help content creators (streamers, YouTubers, podcasters) quickly generate tailored promotional text snippets for various social media platforms using AI.
    *   **Value Proposition:** Saves creators time and effort by automating the initial drafting of marketing copy, providing platform-optimized text with appropriate tone, emojis, and hashtags.
    *   **Key Workflows:**
        1.  **Input:** User provides content details (Type, Topic, Highlight, Vibe) via a simple web form.
        2.  **Generation:** User submits form, triggering a backend API call that uses an LLM (OpenAI) to generate promotional text variations for Twitter, YouTube/Twitch, and Short-form video platforms.
        3.  **Output:** The application displays the generated variations clearly, allowing easy copying for use.
    *   **System Architecture:**
        *   **Framework:** Next.js 14+ with App Router.
        *   **Frontend:** React (Server Components where possible, Client Components for interaction), Shadcn UI, Radix UI Primitives, Tailwind CSS.
        *   **Backend:** Node.js via Next.js API Route (`/api/generate`).
        *   **AI Service:** OpenAI API (Chat Completions - e.g., GPT-3.5-Turbo or GPT-4o).
        *   **Deployment:** Vercel (recommended).
    
    ## 2. Project Structure
    
    ```
    
    frontend/
    ├── app/
    │   ├── layout.tsx         # Root layout (Server Component)
    │   ├── page.tsx           # Main page (Server Component)
    │   └── api/
    │       └── generate/
    │           └── route.ts     # Backend generation logic (Node.js API Route)
    ├── components/
    │   ├── ui/                # Shadcn UI components (auto-generated)
    │   │   ├── button.tsx
    │   │   ├── input.tsx
    │   │   ├── textarea.tsx
    │   │   ├── select.tsx
    │   │   ├── card.tsx
    │   │   ├── tabs.tsx
    │   │   ├── progress.tsx
    │   │   └── alert.tsx
    │   └── hypegen/           # Project-specific components
    │       ├── HypeGenForm.tsx  # Main client component (form + results) - 'use client'
    │       └── ResultCard.tsx   # Displays results for one platform (Client) - 'use client'
    ├── lib/
    │   ├── openai.ts          # OpenAI API client setup and interaction logic
    │   └── prompts.ts         # Functions to generate LLM prompts
    ├── public/                # Static assets (favicon, etc.)
    ├── styles/
    │   └── globals.css        # Tailwind base styles, global CSS
    ├── types/
    │   └── index.ts           # Shared TypeScript interfaces
    ├── .env.local             # Environment variables (OPENAI_API_KEY)
    ├── next.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    └── package.json
    
    ```
    
    ## 3. Feature Specification
    
    ### 3.1 User Input Form
    
    *   **Component:** `HypeGenForm.tsx` (Client Component: `'use client'`)
    *   **User Story:** As a content creator, I want to input details about my content (type, topic, key highlight, desired vibe) so the tool can generate relevant promo text.
    *   **Requirements:**
        *   Form Layout: A single-column form.
        *   **Content Type:**
            *   Component: Shadcn `Select`.
            *   Options: "Stream VOD", "YouTube Video", "Podcast Episode".
            *   State: `useState<string>`.
            *   Validation: Required. Default placeholder like "Select Content Type...".
        *   **Main Topic/Title:**
            *   Component: Shadcn `Input`.
            *   Type: `text`.
            *   Placeholder: "e.g., My First Look at Palworld".
            *   State: `useState<string>`.
            *   Validation: Required, min length (e.g., 3 chars).
        *   **Key Highlight/Hook:**
            *   Component: Shadcn `Textarea`.
            *   Placeholder: "e.g., Caught a legendary Pal!"
            *   State: `useState<string>`.
            *   Validation: Required, min length (e.g., 10 chars).
            *   Resizable: Vertically.
        *   **Target Vibe/Tone:**
            *   Component: Shadcn `Select`.
            *   Options: "Excited", "Funny", "Informative", "Intriguing", "Urgent".
            *   State: `useState<string>`.
            *   Validation: Required. Default value "Excited".
        *   **Generate Button:**
            *   Component: Shadcn `Button`.
            *   Label: "Generate Snippets".
            *   Action: Triggers form submission handler.
            *   Disabled state: While loading or if form is invalid.
        *   **State Management:** Use `React.useState` for form fields, loading status (`isLoading: boolean`), results (`apiResponse: HypeGenResponse | null`), and errors (`error: string | null`).
    *   **Implementation Steps:**
        1.  Scaffold `HypeGenForm.tsx` component, mark with `'use client'`.
        2.  Add Shadcn UI components: `Select`, `Input`, `Textarea`, `Button`.
        3.  Implement `useState` hooks for each form field, loading, results, error.
        4.  Add basic `onChange` handlers to update state.
        5.  Implement `handleSubmit` async function:
            *   Perform client-side validation. Show errors if invalid (can use state to conditionally style inputs/show messages, or libraries like `react-hook-form` if time permitted, but likely too complex for hackathon).
            *   `setIsLoading(true)`, `setError(null)`, `setApiResponse(null)`.
            *   Construct request body from state.
            *   Call `fetch('/api/generate', { method: 'POST', body: JSON.stringify(payload), headers: {'Content-Type': 'application/json'} })`.
            *   Handle success: `const data = await res.json(); setApiResponse(data);`.
            *   Handle error: Check `res.ok`. If not ok, or fetch fails, `setError('Failed to generate. Please try again.')`.
            *   `setIsLoading(false)`.
    *   **Error Handling:**
        *   Display validation errors below relevant fields if invalid on submit.
        *   Display generic API error message using Shadcn `Alert` if fetch fails or API returns error.
    
    ### 3.2 Output Display
    
    *   **Component:** Primarily within `HypeGenForm.tsx`, rendering `ResultCard.tsx` (Client Component: `'use client'`)
    *   **User Story:** As a content creator, I want to see the generated promotional text clearly organized by platform, with two variations for each, so I can easily choose and copy the best one.
    *   **Requirements:**
        *   **Loading State:** Display Shadcn `Progress` bar or a simple spinner while `isLoading` is true.
        *   **Error Display:** Display Shadcn `Alert` with `variant="destructive"` if `error` state is not null.
        *   **Results Area:** Render only if `apiResponse` is not null and `isLoading`/`error` are false.
        *   **Platform Sections:** Iterate through the keys in `apiResponse.data` (e.g., `twitter`, `youtubeDescription`, `shortFormHook`).
        *   **Result Card:** For each platform, render `ResultCard`:
            *   Uses Shadcn `Card` as root. `CardHeader` shows platform name (e.g., "Twitter").
            *   `CardContent` contains Shadcn `Tabs`.
            *   `TabsList` has `TabsTrigger` for "Variation 1" and "Variation 2".
            *   Each `TabsContent` displays the corresponding text variation (e.g., `apiResponse.data.twitter[0]`). Include emojis/hashtags as generated.
            *   **Character Count (Twitter only):** Below each Twitter variation text, display `current_length / 280`. Use `text-destructive` color if `length > 280`. Calculate dynamically based on displayed text.
            *   **Copy Button:** Place a small Shadcn `Button` (icon-only, e.g., `ClipboardCopy`) next to or inside each `TabsContent`.
            *   Copy Action: On click, use `navigator.clipboard.writeText(text)`. Add simple feedback (e.g., change icon to `Check` briefly).
    *   **Implementation Steps:**
        1.  Add conditional rendering in `HypeGenForm.tsx` for loading, error, and results based on state.
        2.  Create `ResultCard.tsx` component.
        3.  Inside `ResultCard`, implement Shadcn `Card`, `CardHeader`, `CardContent`, `Tabs`, `TabsList`, `TabsTrigger`, `TabsContent`.
        4.  Pass platform name and variations array as props to `ResultCard`.
        5.  Implement character count logic within `ResultCard` for Twitter.
        6.  Implement "Copy" button functionality within `ResultCard`.
    *   **Error Handling:** Component should render gracefully if variation data is missing/malformed (though backend should prevent this). Copy function should handle potential `navigator.clipboard` errors (e.g., Permissions API).
    
    ### 3.3 Generation API
    
    *   **Route:** `app/api/generate/route.ts`
    *   **Method:** `POST`
    *   **Request Body:**
        ```typescript
        interface HypeGenRequest {
          contentType: string; // "Stream VOD" | "YouTube Video" | "Podcast Episode"
          topic: string;
          highlight: string;
          vibe: string; // "Excited" | "Funny" | ...
        }
        ```
    *   **Response Body (Success):**
        ```typescript
        interface HypeGenData {
          twitter: [string, string];
          youtubeDescription: [string, string];
          shortFormHook: [string, string];
        }
        interface HypeGenResponse {
          success: true;
          data: HypeGenData;
        }
        ```
    *   **Response Body (Error):**
        ```typescript
        interface HypeGenErrorResponse {
          success: false;
          error: string; // User-friendly error message
        }
        ```
    *   **Implementation Steps:**
        1.  Create `app/api/generate/route.ts`. Export async `POST` function receiving `NextRequest`.
        2.  Parse JSON body: `const body: HypeGenRequest = await request.json();`. Use try-catch.
        3.  Basic validation: check if required fields (`topic`, `highlight`) exist and are strings. Return 400 error if invalid.
        4.  Get OpenAI Key: `const apiKey = process.env.OPENAI_API_KEY;`. Return 500 error if missing.
        5.  Import/use `getOpenAIClient` from `lib/openai.ts`.
        6.  Import/use prompt generation functions from `lib/prompts.ts`. Create functions like `generateTwitterPrompts(data: HypeGenRequest): string`, etc.
            *   **Prompt Design (Crucial):** Instruct the LLM clearly:
                *   Role: "You are a marketing assistant for content creators."
                *   Task: "Generate [Platform Name] promotional text."
                *   Input Data: Provide topic, highlight, vibe, content type.
                *   Output Requirements: "Generate EXACTLY TWO distinct variations. Format the output strictly as a JSON array of two strings: `[\"variation 1\", \"variation 2\"]`. Adhere to the target vibe: [Vibe]. Include relevant emojis. Include 3-5 relevant hashtags. For Twitter, ensure text is under 280 characters." (Tailor constraints per platform).
                *   Example (Twitter Prompt): ```json
                    {
                      "role": "system",
                      "content": "You are a helpful assistant specialized in writing social media copy for content creators. Generate EXACTLY TWO distinct, engaging tweet variations under 280 characters to promote content. Incorporate the specified vibe, use 1-3 relevant emojis, and include 3-5 relevant hashtags. Respond ONLY with a valid JSON array containing two strings like [\"tweet variation 1\", \"tweet variation 2\"]."
                    },
                    {
                      "role": "user",
                      "content": `Content Type: ${contentType}\nTopic: ${topic}\nHighlight: ${highlight}\nVibe: ${vibe}`
                    }
                    ```
        7.  Make OpenAI calls using `openai.chat.completions.create`:
            ```typescript
            try {
              const [twitterRes, youtubeRes, shortsRes] = await Promise.all([
                openai.chat.completions.create({
                  model: "gpt-4o", // Or gpt-3.5-turbo
                  messages: [...generateTwitterPrompts(body)],
                  // Request JSON mode if using compatible models
                  // response_format: { type: "json_object" }, // If supported and prompt adjusted
                  temperature: 0.7,
                  max_tokens: 150, // Adjust per platform
                }),
                // ... similar calls for YouTube and Shorts prompts
              ]);
    
              // Safely parse JSON content assuming LLM adheres to format request
              const twitterVariations = JSON.parse(twitterRes.choices[0]?.message?.content || '[]') as [string, string];
              // ... parse others
              
              // Validate parsed structure
              if (!Array.isArray(twitterVariations) || twitterVariations.length !== 2 || twitterVariations.some(s => typeof s !== 'string')) {
                  throw new Error('Invalid format received from LLM for Twitter.');
              }
              // ... validate others
    
              const responseData: HypeGenData = {
                 twitter: twitterVariations,
                 // ... other parsed variations
              };
    
              return NextResponse.json({ success: true, data: responseData });
    
            } catch (error: any) {
              console.error("OpenAI API Error:", error);
              // Provide more specific errors if possible (e.g., parsing error vs API error)
              return NextResponse.json({ success: false, error: "AI generation failed. Please try again." }, { status: 500 });
            }
            ```
        8. Handle JSON parsing errors from LLM response carefully within the `try...catch`.
        9. Return `NextResponse.json(responseData)` on success, or error response with appropriate status (400 for bad input, 500 for server/API errors).
    
    *   **Error Handling:**
        *   Validate incoming request body.
        *   Check for `OPENAI_API_KEY`.
        *   Wrap OpenAI calls in `try...catch`.
        *   Safely parse potentially malformed JSON from LLM.
        *   Handle OpenAI API errors (rate limits, auth issues, server errors, content filters). Log server-side errors. Return user-friendly error messages.
    
    ## 4. Database Schema
    
    *   **Not Applicable** for Hackathon MVP.
    
    ## 5. Server Actions
    
    ### 5.1 Database Actions
    
    *   **Not Applicable.**
    
    ### 5.2 Other Actions (API Route detailed in 3.3)
    
    *   **OpenAI API Integration:**
        *   See implementation details in section 3.3.
        *   Library: `openai` (official Node.js library).
        *   Authentication: API Key from `process.env.OPENAI_API_KEY`.
        *   Models: `gpt-4o` or `gpt-3.5-turbo` recommended for balance of capability and speed/cost.
        *   Prompting: Critical focus area. Define reusable functions in `lib/prompts.ts`.
    
    ## 6. Design System
    
    *   **UI Library:** Shadcn UI with Radix UI primitives.
    *   **Styling:** Tailwind CSS utility classes.
    *   **Visual Style:** Adhere to Shadcn UI defaults initially. Can be customized via `tailwind.config.ts` and `globals.css` if time permits. Use CSS variables for theming.
    *   **Color Palette:** Default Shadcn palette (`primary`, `secondary`, `destructive`, `muted`, `accent`, `foreground`, `background`, `card`, `popover`, `border`, `input`). Map Brand -> Primary, Neutral -> Secondary/Background/Card etc.
    *   **Typography:** Default Geist Sans (likely provided by starter template) or Tailwind defaults. Use Tailwind size classes (`text-sm`, `text-lg`, `font-bold`, etc.).
    *   **Layout:** Flexbox (`flex`, `flex-col`, `items-center`, `justify-between`) and Grid (`grid`, `grid-cols-*`, `gap-*`) via Tailwind. Responsive design using `sm:`, `md:`, `lg:` prefixes (mobile-first).
    *   **Core Components:** Use Shadcn `Button`, `Input`, `Textarea`, `Select`, `Card`, `CardHeader`, `CardContent`, `Tabs`, `TabsList`, `TabsTrigger`, `TabsContent`, `Alert`, `AlertTitle`, `AlertDescription`, `Progress`.
    
    ## 7. Component Architecture
    
    ### 7.1 Server Components
    
    *   **`app/layout.tsx`:** Root layout. Contains HTML structure, body, imports global styles. Can be RSC. Sets up theme provider if needed (though Shadcn handles this often).
    *   **`app/page.tsx`:** Main page route. Renders the overall page structure and imports/renders the main Client Component (`HypeGenForm`). Can fetch initial static data if ever needed. Minimal logic for MVP.
    
    ### 7.2 Client Components
    
    *   **`components/hypegen/HypeGenForm.tsx`:**
        *   Marked with `'use client'`.
        *   **State:** Manages all form inputs (`contentType`, `topic`, etc.), `isLoading` boolean, `apiResponse` object (or null), `error` string (or null). Use `useState`.
        *   **Props:** None required for MVP.
        *   **Logic:** Handles input changes, form submission, `fetch` call to API, updates state based on API response, renders form elements, loading indicators, error messages, and delegates results rendering to `ResultCard`.
        *   **Interfaces:**
            ```typescript
            interface HypeGenFormData {
              contentType: string;
              topic: string;
              highlight: string;
              vibe: string;
            }
            // Use HypeGenResponse from API section for apiResponse state
            ```
    *   **`components/hypegen/ResultCard.tsx`:**
        *   Marked with `'use client'`.
        *   **State:** Minimal internal state, maybe for copy button feedback (`isCopied`).
        *   **Props:**
            ```typescript
            interface ResultCardProps {
              platformName: string; // e.g., "Twitter", "YouTube Description"
              variations: [string, string];
            }
            ```
        *   **Logic:** Renders the Card/Tabs structure. Calculates character count for Twitter. Implements copy-to-clipboard functionality for each variation.
        *   **Interfaces:** Uses `ResultCardProps`.
    
    ## 8. Authentication and Authorization
    
    *   **Not Applicable.**
    
    ## 9. Data Flow
    
    *   Primarily Client-Side state managed within `HypeGenForm.tsx`.
    *   **On Generate:**
        1.  Form State -> Payload for `fetch` POST request.
        2.  `fetch('/api/generate', ...)` -> API Route Handler.
        3.  API Route -> OpenAI API Call.
        4.  OpenAI Response -> API Route.
        5.  API Route -> `NextResponse.json()` to Client (`HypeGenForm`).
        6.  `fetch` resolves -> Update Client State (`apiResponse` or `error`).
        7.  React Renders UI based on updated state.
    
    ## 10. Payments
    
    *   **Not Applicable.**
    
    ## 11. Analytics
    
    *   **Not Applicable** for Hackathon MVP.
    
    ## 12. Testing
    
    *   **Not Applicable** for Hackathon 1-day build scope. Focus on manual testing and debugging during development.
    *   **(Post-Hackathon Plan):**
        *   Unit Tests: `lib/prompts.ts`, API route validation logic (using Jest/Vitest). Mock OpenAI client.
        *   E2E Tests: Simulate user filling form, clicking generate, verifying output display and copy functionality (using Playwright or Cypress).
    
    ```
    
    ```
    
    File: /Users/ttran/hookgen/repomix-output.txt
    ```txt
    
    ```
    
    File: /Users/ttran/hookgen/tsconfig.json
    ```json
    {
      "compilerOptions": {
        "typeRoots": ["./types", "./node_modules/@types"],
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": true,
        "skipLibCheck": true,
        "strict": true,
        "noEmit": true,
        "esModuleInterop": true,
        "module": "esnext",
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "jsx": "preserve",
        "incremental": true,
        "plugins": [
          {
            "name": "next"
          }
        ],
        "paths": {
          "@/*": ["./src/*"]
        },
        "target": "ES2017"
      },
      "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
      "exclude": ["node_modules"]
    }
    
    ```
    
    File: /Users/ttran/hookgen/src/app/page.tsx
    ```tsx
    // Example page: delete the content or rework the blocks
    "use client";
    
    import type React from "react";
    import { useState } from "react";
    
    import {
      Heading,
      Text,
      Button,
      Icon,
      InlineCode,
      Logo,
      Input,
      Avatar,
      AvatarGroup,
      Textarea,
      PasswordInput,
      SegmentedControl,
      SmartLink,
      Dialog,
      Feedback,
      SmartImage,
      Line,
      LogoCloud,
      Background,
      Select,
      useToast,
      Card,
      Fade,
      StatusIndicator,
      DateRangePicker,
      type DateRange,
      TiltFx,
      HoloFx,
      IconButton,
      TagInput,
      Switch,
      Column,
      Row,
      StyleOverlay,
      CompareImage,
      ThemeSwitcher,
    } from "@/once-ui/components";
    import { CodeBlock, MediaUpload } from "@/once-ui/modules";
    import { ScrollToTop } from "@/once-ui/components/ScrollToTop";
    
    export default function Home() {
      const [selectedValue, setSelectedValue] = useState("");
      const [selectedRange, setSelectedRange] = useState<DateRange>();
      const [isFirstDialogOpen, setIsFirstDialogOpen] = useState(false);
      const [isSecondDialogOpen, setIsSecondDialogOpen] = useState(false);
      const [firstDialogHeight, setFirstDialogHeight] = useState<number>();
      const { addToast } = useToast();
      const [intro, setIntro] = useState("");
      const [email, setEmail] = useState("");
      const [password, setPassword] = useState("");
      const [tags, setTags] = useState<string[]>(["UX / UI", "Design systems", "AI / ML"]);
      const [twoFA, setTwoFA] = useState(false);
    
      const handleSelect = (value: string) => {
        console.log("Selected option:", value);
        setSelectedValue(value);
      };
    
      const links = [
        {
          href: "https://once-ui.com/docs/theming",
          title: "Themes",
          description: "Style your app in minutes",
        },
        {
          href: "https://once-ui.com/docs/flexComponent",
          title: "Layout",
          description: "Build responsive layouts",
        },
        {
          href: "https://once-ui.com/docs/typography",
          title: "Typography",
          description: "Scale text automatically",
        },
      ];
    
      const validateIntro = (value: React.ReactNode) => {
        if (typeof value === "string" && value.length < 10) {
          return (
            <Row horizontal="center" marginBottom="12" gap="8">
              <Icon name="errorCircle" />
              Intro must be at least 10 characters long.
            </Row>
          );
        }
        return null;
      };
    
      const validateLogin = () => {
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!regex.test(email)) {
          return "Email and / or password is invalid.";
        }
        return null;
      };
    
      return (
        <Column fillWidth paddingY="80" paddingX="s" horizontal="center" flex={1}>
          <ScrollToTop><IconButton variant="secondary" icon="chevronUp"/></ScrollToTop>
          <Fade
            zIndex={3}
            pattern={{
              display: true,
              size: "2",
            }}
            position="fixed"
            top="0"
            left="0"
            to="bottom"
            height={5}
            fillWidth
            blur={0.25}
          />
          <Row position="fixed" top="0" fillWidth horizontal="center" zIndex={3}>
            <Row
              data-border="rounded"
              horizontal="space-between"
              maxWidth="l"
              paddingRight="64"
              paddingLeft="32"
              paddingY="20"
            >
              <Logo size="s" icon={false} href="https://once-ui.com" />
              <Row gap="12" hide="s">
                <Button
                  href="https://discord.com/invite/5EyAQ4eNdS"
                  prefixIcon="discord"
                  size="s"
                  label="Discord"
                  weight="default"
                  variant="tertiary"
                />
                <Button
                  href="https://github.com/once-ui-system"
                  prefixIcon="github"
                  size="s"
                  label="GitHub"
                  weight="default"
                  variant="tertiary"
                />
                <Row position="fixed" top="20" right="20">
                  <StyleOverlay
                    position="fixed"
                    top="8"
                    right="8"
                    style={{ height: "calc(100vh - var(--static-space-16))" }}
                  />
                </Row>
              </Row>
              <Row gap="16" show="s" horizontal="center" paddingRight="24">
                <IconButton
                  href="https://discord.com/invite/5EyAQ4eNdS"
                  icon="discord"
                  variant="tertiary"
                />
                <IconButton
                  href="https://github.com/once-ui-system/nextjs-starter"
                  icon="github"
                  variant="tertiary"
                />
                <Row position="fixed" top="20" right="20">
                  <StyleOverlay
                    position="fixed"
                    top="8"
                    right="8"
                    style={{ height: "calc(100vh - var(--static-space-16))" }}
                  />
                </Row>
              </Row>
            </Row>
          </Row>
          <Column
            overflow="hidden"
            as="main"
            maxWidth="l"
            position="relative"
            radius="xl"
            horizontal="center"
            border="neutral-alpha-weak"
            fillWidth
          >
            <Column
              fillWidth
              horizontal="center"
              gap="48"
              radius="xl"
              paddingTop="80"
              position="relative"
            >
              <Background
                mask={{
                  x: 0,
                  y: 48,
                }}
                position="absolute"
                grid={{
                  display: true,
                  width: "0.25rem",
                  color: "neutral-alpha-medium",
                  height: "0.25rem",
                }}
              />
              <Background
                mask={{
                  x: 80,
                  y: 0,
                  radius: 100,
                }}
                position="absolute"
                gradient={{
                  display: true,
                  tilt: -35,
                  height: 50,
                  width: 75,
                  x: 100,
                  y: 40,
                  colorStart: "accent-solid-medium",
                  colorEnd: "static-transparent",
                }}
              />
              <Background
                mask={{
                  x: 100,
                  y: 0,
                  radius: 100,
                }}
                position="absolute"
                gradient={{
                  display: true,
                  opacity: 100,
                  tilt: -35,
                  height: 20,
                  width: 120,
                  x: 120,
                  y: 35,
                  colorStart: "brand-solid-strong",
                  colorEnd: "static-transparent",
                }}
              />
              <Column fillWidth horizontal="center" gap="32" padding="32" position="relative">
                <InlineCode radius="xl" shadow="m" fit paddingX="16" paddingY="8">
                  Start by editing
                  <Text onBackground="brand-medium" marginLeft="8">
                    app/page.tsx
                  </Text>
                </InlineCode>
                <Heading wrap="balance" variant="display-strong-xl" align="center" marginBottom="16">
                  Code faster than AI
                </Heading>
                <Button
                  id="readDocs"
                  target="_blank"
                  label="Open docs"
                  href="https://once-ui.com/docs"
                  variant="secondary"
                  arrowIcon
                />
                <Column horizontal="center" paddingTop="64" fillWidth gap="24">
                  <Line maxWidth={4} marginBottom="16" background="neutral-alpha-medium" />
                  <AvatarGroup
                    marginBottom="8"
                    reverse
                    size="s"
                    avatars={[
                      {
                        src: "/images/l.jpg",
                      },
                      {
                        src: "/images/z.jpg",
                      },
                    ]}
                  />
                  <Heading marginBottom="12" as="h2" align="center" variant="heading-default-l">
                    Brought to you by indie creators
                    <br /> behind stellar projects:
                  </Heading>
                  <LogoCloud
                    paddingBottom="104"
                    columns="3"
                    mobileColumns="1"
                    limit={3}
                    fillWidth
                    logos={[
                      {
                        icon: false,
                        wordmarkSrc: "/trademark/dopler-wordmark.svg",
                        href: "https://dopler.app",
                        size: "m",
                      },
                      {
                        icon: false,
                        wordmarkSrc: "/trademark/design-engineers-wordmark.svg",
                        href: "https://club.dropler.io",
                        size: "m",
                      },
                      {
                        icon: false,
                        wordmarkSrc: "/trademark/enroll-wordmark.svg",
                        href: "https://enroll.dopler.app",
                        size: "m",
                      },
                      {
                        icon: false,
                        wordmarkSrc: "/trademark/magic-portfolio-wordmark.svg",
                        href: "https://magic-portfolio.com",
                        size: "m",
                      },
                    ]}
                  />
                </Column>
              </Column>
              <Column fillWidth paddingX="32" gap="12" horizontal="center" position="relative">
                <Heading as="h2" variant="display-default-m">
                  Showcase
                </Heading>
                <Text marginBottom="32" align="center" onBackground="neutral-weak">
                  Tiny snippets to inspire your next project
                </Text>
    
                {/* COMPARE IMAGE */}
                <CompareImage
                  radius="xl"
                  overflow="hidden"
                  border="neutral-alpha-weak"
                  leftContent={{ src: "/images/1.jpg", alt: "alt" }}
                  rightContent={{ src: "/images/2.jpg", alt: "alt" }}
                />
    
                {/* LOGIN */}
                <Row
                  marginY="32"
                  background="overlay"
                  fillWidth
                  radius="xl"
                  border="neutral-alpha-weak"
                  overflow="hidden"
                >
                  <Row fill hide="m">
                    <SmartImage src="/images/login.png" alt="Preview image" sizes="560px" />
                  </Row>
                  <Column fillWidth horizontal="center" gap="20" padding="32" position="relative">
                    <Background
                      mask={{
                        x: 100,
                        y: 0,
                        radius: 75,
                      }}
                      position="absolute"
                      grid={{
                        display: true,
                        opacity: 50,
                        width: "0.5rem",
                        color: "neutral-alpha-medium",
                        height: "1rem",
                      }}
                    />
                    <Logo wordmark={false} size="l" />
                    <Heading as="h3" variant="display-default-s" align="center">
                      Welcome to Once UI
                    </Heading>
                    <Text onBackground="neutral-medium" marginBottom="24">
                      Log in or
                      <SmartLink href="/">sign up</SmartLink>
                    </Text>
                    <Column fillWidth gap="8">
                      <Button
                        label="Continue with Google"
                        fillWidth
                        variant="secondary"
                        weight="default"
                        prefixIcon="google"
                        size="l"
                      />
                      <Button
                        label="Continue with GitHub"
                        fillWidth
                        variant="secondary"
                        weight="default"
                        prefixIcon="github"
                        size="l"
                      />
                    </Column>
                    <Row fillWidth paddingY="24">
                      <Row onBackground="neutral-weak" fillWidth gap="24" vertical="center">
                        <Line />/<Line />
                      </Row>
                    </Row>
                    <Column gap="-1" fillWidth>
                      <Input
                        id="email"
                        label="Email"
                        labelAsPlaceholder
                        onChange={(e) => setEmail(e.target.value)}
                        value={email}
                        validate={validateLogin}
                        errorMessage={false}
                        radius="top"
                      />
                      <PasswordInput
                        autoComplete="new-password"
                        id="password"
                        label="Password"
                        labelAsPlaceholder
                        radius="bottom"
                        onChange={(e) => setPassword(e.target.value)}
                        value={password}
                        validate={validateLogin}
                      />
                    </Column>
                    <Button
                      id="login"
                      label="Log in"
                      arrowIcon
                      fillWidth
                      onClick={() => {
                        addToast({
                          variant: "success",
                          message: "Wohoo! It's a toast!",
                        });
                      }}
                    />
                  </Column>
                </Row>
              </Column>
            </Column>
    
            {/* PAYMENT */}
            <Row
              paddingX="32"
              fillWidth
              paddingY="160"
              gap="64"
              position="relative"
              mobileDirection="column"
              vertical="center"
            >
              <Background
                style={{ left: "-1px" }}
                borderTop="neutral-alpha-medium"
                mask={{
                  x: 0,
                  y: 50,
                  radius: 100,
                }}
                position="absolute"
                grid={{
                  display: true,
                  opacity: 100,
                  width: "10%",
                  color: "neutral-alpha-medium",
                  height: "1.25%",
                }}
              />
              <Row
                position="relative"
                shadow="xl"
                fillWidth
                border="neutral-alpha-medium"
                borderStyle="dashed"
                background="page"
                radius="xl"
              >
                <TiltFx
                  aspectRatio="16 / 9"
                  fillWidth
                  radius="xl"
                  border="accent-alpha-weak"
                  overflow="hidden"
                >
                  <HoloFx fill>
                    <Background
                      fill
                      position="absolute"
                      gradient={{
                        display: true,
                        tilt: -45,
                        height: 150,
                        width: 100,
                        x: 75,
                        y: -50,
                        colorStart: "brand-solid-strong",
                        colorEnd: "accent-solid-weak",
                      }}
                    >
                      <Column
                        fill
                        position="absolute"
                        padding="24"
                        vertical="end"
                        gap="12"
                        onSolid="neutral-strong"
                      >
                        <Text variant="body-default-xl">Lorant One</Text>
                        <Row fillWidth horizontal="space-between" vertical="end" paddingRight="16">
                          <Column gap="4">
                            <Text variant="body-default-m">08 / 27</Text>
                            <Text variant="body-default-m">1234 5678 1234 5678</Text>
                          </Column>
                          <Icon name="visa" size="xl" />
                        </Row>
                      </Column>
                    </Background>
                  </HoloFx>
                </TiltFx>
              </Row>
              <Column position="relative" fillWidth gap="-1">
                <Row fillWidth vertical="center" horizontal="space-between" marginBottom="32">
                  <Heading as="h3" variant="display-default-xs">
                    Fill in your card details
                  </Heading>
                  <IconButton
                    data-border="rounded"
                    variant="tertiary"
                    icon="chevronRight"
                    tooltip="Next"
                    tooltipPosition="left"
                  />
                </Row>
                <Input
                  id="cardnumber"
                  label="Card number"
                  labelAsPlaceholder
                  radius="top"
                  defaultValue="1234 5678 1234 5678"
                />
                <Row fillWidth gap="-1">
                  <Input
                    id="expiry"
                    label="Expiry date"
                    labelAsPlaceholder
                    radius="bottom-left"
                    defaultValue="08 / 27"
                  />
                  <Input
                    id="cvv"
                    label="CVV"
                    labelAsPlaceholder
                    radius="bottom-right"
                    defaultValue="123"
                  />
                </Row>
              </Column>
            </Row>
    
            {/* BOOKING */}
            <Row
              padding="32"
              fillWidth
              gap="64"
              position="relative"
              mobileDirection="column"
              vertical="center"
            >
              <Background
                fill
                position="absolute"
                gradient={{
                  display: true,
                  opacity: 60,
                  tilt: 0,
                  height: 100,
                  width: 100,
                  x: 50,
                  y: 0,
                  colorStart: "brand-solid-strong",
                  colorEnd: "static-transparent",
                }}
              />
              <Column
                fillWidth
                background="surface"
                radius="xl"
                border="neutral-medium"
                overflow="hidden"
                padding="32"
                gap="40"
                position="relative"
              >
                <Row fillWidth horizontal="center" gap="-1">
                  <Column
                    maxWidth={12}
                    gap="4"
                    leftRadius="l"
                    paddingX="16"
                    paddingY="12"
                    background="surface"
                    border="neutral-medium"
                  >
                    <Text variant="label-default-s" onBackground="neutral-weak">
                      Check in
                    </Text>
                    {selectedRange?.startDate ? (
                      <>
                        {selectedRange?.startDate.toLocaleDateString("default", {
                          day: "numeric",
                          month: "long",
                        })}
                      </>
                    ) : (
                      "Add dates"
                    )}
                  </Column>
                  <Column
                    maxWidth={12}
                    gap="4"
                    rightRadius="l"
                    paddingX="16"
                    paddingY="12"
                    background="surface"
                    border="neutral-medium"
                  >
                    <Text variant="label-default-s" onBackground="neutral-weak">
                      Check out
                    </Text>
                    {selectedRange?.endDate ? (
                      <>
                        {selectedRange?.endDate?.toLocaleDateString("default", {
                          day: "numeric",
                          month: "long",
                        })}
                      </>
                    ) : (
                      "Add dates"
                    )}
                  </Column>
                </Row>
                <Row fillWidth horizontal="center">
                  <DateRangePicker
                    data-scaling="110"
                    size="l"
                    fitWidth
                    gap="40"
                    mobileDirection="column"
                    onChange={(range) => setSelectedRange(range)}
                    value={selectedRange}
                  />
                </Row>
              </Column>
            </Row>
    
            {/* PROFILE */}
            <Row horizontal="center" paddingX="32" paddingY="64" fillWidth gap="32" position="relative">
              <Background
                mask={{
                  cursor: true,
                }}
                dots={{
                  display: true,
                  opacity: 50,
                  color: "neutral-solid-strong",
                  size: "48",
                }}
                fill
                position="absolute"
                gradient={{
                  display: true,
                  opacity: 100,
                  tilt: 0,
                  height: 100,
                  width: 200,
                  x: 50,
                  y: 0,
                  colorStart: "neutral-background-medium",
                  colorEnd: "static-transparent",
                }}
              />
              <Column maxWidth={32} gap="-1">
                <Feedback
                  icon
                  variant="success"
                  vertical="center"
                  radius={undefined}
                  topRadius="l"
                  zIndex={1}
                >
                  Your profile is public.
                </Feedback>
                <Column
                  background="page"
                  radius={undefined}
                  bottomRadius="l"
                  overflow="hidden"
                  position="relative"
                  fillWidth
                  horizontal="center"
                  border="neutral-medium"
                >
                  <MediaUpload
                    border={undefined}
                    emptyState={<Row paddingBottom="80">Drag and drop or click to browse</Row>}
                    position="absolute"
                    aspectRatio="16 / 9"
                    sizes="560px"
                    radius={undefined}
                    initialPreviewImage="/images/profile.jpg"
                  />
                  <Column
                    paddingTop="160"
                    paddingX="32"
                    paddingBottom="32"
                    fillWidth
                    position="relative"
                    horizontal="center"
                    gap="8"
                  >
                    <Avatar
                      zIndex={1}
                      style={{
                        border: "8px solid var(--page-background)",
                      }}
                      size="xl"
                      src="/images/l.jpg"
                    />
                    <Heading marginTop="24" as="h3" variant="display-default-m">
                      Lorant One
                    </Heading>
                    <Text align="center" onBackground="neutral-weak" marginBottom="24">
                      165 connections
                    </Text>
                    <SegmentedControl
                      onToggle={(value) => console.log("SegmentedControl changed", value)}
                      buttons={[
                        {
                          size: "l",
                          value: "profile",
                          label: "Profile",
                        },
                        {
                          size: "l",
                          value: "settings",
                          label: "Settings",
                        },
                        {
                          size: "l",
                          value: "notifications",
                          label: (
                            <Row gap="8">
                              Notifications
                              <StatusIndicator size="s" color="cyan" />
                            </Row>
                          ),
                        },
                        {
                          size: "l",
                          value: "integrations",
                          label: "Integrations",
                        },
                        {
                          size: "l",
                          value: "inbox",
                          label: "Inbox",
                        },
                        {
                          size: "l",
                          value: "requests",
                          label: "Requests",
                        },
                      ]}
                    />
                    <Column paddingY="32" fillWidth gap="-1">
                      <Input
                        radius="top"
                        label="Name"
                        labelAsPlaceholder
                        defaultValue="Lorant One"
                        id="name"
                      />
                      <Input
                        radius="bottom"
                        label="Email"
                        labelAsPlaceholder
                        defaultValue="lorant@once-ui.com"
                        id="profileEmail"
                      />
                    </Column>
                    <Textarea
                      id="intro"
                      label="Intro"
                      lines="auto"
                      value={intro}
                      onChange={(e) => setIntro(e.target.value)}
                      validate={validateIntro}
                    />
                    <TagInput
                      id="interests"
                      value={tags}
                      onChange={(newTags: string[]) => {
                        setTags(newTags);
                      }}
                      label="Interests"
                    />
                    <Select
                      searchable
                      labelAsPlaceholder
                      id="select"
                      label="Country"
                      value={selectedValue}
                      options={[
                        {
                          value: "Austria",
                          label: "Austria",
                          onClick: (value) => console.log("Visiblity set: ", value),
                        },
                        {
                          value: "Finland",
                          label: "Finland",
                          onClick: (value) => console.log("Visiblity set: ", value),
                        },
                        {
                          value: "New Zeland",
                          label: "New Zeland",
                          onClick: (value) => console.log("Visiblity set: ", value),
                        },
                        {
                          value: "Norway",
                          label: "Norway",
                          onClick: (value) => console.log("Visiblity set: ", value),
                        },
                        {
                          value: "United Kingdom",
                          label: "United Kingdom",
                          onClick: (value) => console.log("Visiblity set: ", value),
                        },
                        {
                          value: "United States",
                          label: "United States",
                          onClick: (value) => console.log("Visiblity set: ", value),
                        },
                      ]}
                      onSelect={handleSelect}
                    />
                    <Button
                      className="mt-32"
                      prefixIcon="security"
                      variant="secondary"
                      onClick={() => setIsFirstDialogOpen(true)}
                    >
                      Password and security
                    </Button>
                  </Column>
                </Column>
              </Column>
            </Row>
    
            {/* CODE PREVIEW */}
            <TiltFx fillWidth paddingX="32" paddingTop="64">
              <Column
                border="neutral-alpha-weak"
                paddingX="32"
                radius="xl"
                overflow="hidden"
                paddingY="160"
                fillWidth
                position="relative"
              >
                <Background
                  mask={{
                    x: 100,
                    y: 0,
                  }}
                  position="absolute"
                  grid={{
                    display: true,
                    color: "neutral-alpha-medium",
                    width: "2rem",
                    height: "2rem",
                  }}
                />
                <Background
                  mask={{
                    x: 0,
                    y: 100,
                    radius: 100,
                  }}
                  position="absolute"
                  grid={{
                    display: true,
                    color: "brand-alpha-strong",
                    width: "12",
                    height: "12",
                  }}
                  gradient={{
                    display: true,
                    opacity: 100,
                    height: 100,
                    width: 100,
                    tilt: 0,
                    x: 0,
                    y: 100,
                    colorStart: "brand-solid-strong",
                    colorEnd: "brand-background-medium",
                  }}
                />
                <Column horizontal="center" gap="48" fillWidth position="relative">
                  <Heading align="center" as="h2" variant="display-default-l">
                    Quick start
                  </Heading>
                  <CodeBlock
                    compact
                    maxWidth={40}
                    codeInstances={[
                      {
                        code: "git clone https://github.com/once-ui-system/nextjs-starter.git",
                        language: "tsx",
                        label: "tsx",
                      },
                    ]}
                  />
                </Column>
              </Column>
            </TiltFx>
    
            <Row
              position="relative"
              fillWidth
              paddingX="32"
              paddingTop="160"
              minHeight={28}
              paddingBottom="80"
              horizontal="center"
              vertical="end"
            >
              <Background
                mask={{
                  x: 50,
                  y: 100,
                }}
                position="absolute"
                grid={{
                  display: true,
                  width: "0.25rem",
                  color: "brand-alpha-strong",
                  height: "0.25rem",
                }}
              />
              <Row position="relative" textVariant="display-default-m" align="center">
                Learn more
              </Row>
            </Row>
            <Row fillWidth overflow="hidden">
              <Row maxWidth="32" borderTop="neutral-alpha-weak" borderBottom="neutral-medium" />
              <Row fillWidth border="neutral-alpha-weak" mobileDirection="column">
                {links.map((link, index) => (
                  <Card
                    key={link.href}
                    fillWidth
                    href={link.href}
                    padding="40"
                    gap="8"
                    background="page"
                    direction="column"
                    borderRight={index < links.length - 1 ? "neutral-alpha-weak" : undefined}
                    border={undefined}
                  >
                    <Row fillWidth center gap="12">
                      <Text variant="body-strong-m" onBackground="neutral-strong">
                        {link.title}
                      </Text>
                      <Icon size="s" name="arrowUpRight" />
                    </Row>
                    <Text align="center" variant="body-default-s" onBackground="neutral-weak">
                      {link.description}
                    </Text>
                  </Card>
                ))}
              </Row>
              <Row maxWidth="32" borderTop="neutral-alpha-weak" borderBottom="neutral-medium" />
            </Row>
            <Row
              position="relative"
              as="footer"
              fillWidth
              paddingX="l"
              paddingTop="128"
              paddingBottom="80"
            >
              <Background
                borderTop="brand-alpha-strong"
                mask={{
                  x: 50,
                  y: 0,
                }}
                position="absolute"
                grid={{
                  display: true,
                  width: "0.25rem",
                  color: "brand-alpha-strong",
                  height: "0.25rem",
                }}
              />
              <Column
                position="relative"
                textVariant="body-default-xs"
                onBackground="neutral-medium"
                horizontal="center"
                align="center"
                fillWidth
                gap="16"
              >
                <Logo wordmark={false} size="s" />
                <Text size="m">
                  <Text onBackground="neutral-weak">2025 /</Text> Once UI
                </Text>
                <SmartLink href="https://github.com/once-ui-system/nextjs-starter?tab=MIT-1-ov-file">
                  MIT License
                </SmartLink>
                <ThemeSwitcher marginTop="24"/>
              </Column>
            </Row>
          </Column>
    
          <Dialog
            isOpen={isFirstDialogOpen}
            onClose={() => setIsFirstDialogOpen(false)}
            title="Account details"
            description="Manage your security settings and password."
            base={isSecondDialogOpen}
            onHeightChange={(height) => setFirstDialogHeight(height)}
            footer={
              <Button variant="secondary" onClick={() => setIsFirstDialogOpen(false)}>
                Close
              </Button>
            }
          >
            <Column paddingTop="24" fillWidth gap="24">
              <Switch
                reverse
                isChecked={twoFA}
                onToggle={() => setTwoFA(!twoFA)}
                label="2FA"
                description="Enable two factor authentication"
              />
              <Button onClick={() => setIsSecondDialogOpen(true)}>Change password</Button>
            </Column>
          </Dialog>
          <Dialog
            isOpen={isSecondDialogOpen}
            onClose={() => setIsSecondDialogOpen(false)}
            title="Change password"
            stack
            description="Choose a new password for your account."
            minHeight={firstDialogHeight}
            footer={
              <>
                <Button variant="secondary" onClick={() => setIsSecondDialogOpen(false)}>
                  Close
                </Button>
                <Button onClick={() => setIsSecondDialogOpen(false)}>Save</Button>
              </>
            }
          >
            <PasswordInput id="resetPassword" label="New password" />
          </Dialog>
        </Column>
      );
    }
    
    ```
    
    File: /Users/ttran/hookgen/public/trademark/icon-light.svg
    ```svg
    <svg width="590" height="589" viewBox="0 0 590 589" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M81.6393 341.413C55.4536 315.228 55.4536 272.772 81.6393 246.587L156.146 172.08L264.52 280.453C272.002 287.935 272.002 300.065 264.52 307.547L156.146 415.92L81.6393 341.413Z" fill="black"/>
    <path d="M173.08 155.146L247.587 80.6393C273.772 54.4536 316.228 54.4536 342.413 80.6393L416.92 155.146L308.547 263.52C301.065 271.002 288.935 271.002 281.453 263.52L173.08 155.146Z" fill="black"/>
    <path d="M173.08 432.854L281.453 324.48C288.935 316.998 301.065 316.998 308.547 324.48L416.92 432.854L342.413 507.361C316.228 533.546 273.772 533.546 247.587 507.361L173.08 432.854Z" fill="black"/>
    <path d="M325.48 307.547C317.998 300.065 317.998 287.935 325.48 280.453L433.854 172.08L508.361 246.587C534.546 272.772 534.546 315.228 508.361 341.413L433.854 415.92L325.48 307.547Z" fill="black"/>
    </svg>
    
    ```
    </file_contents>
    